NEW
  AUTO 3,1
*--------------------------------------
* Input:
*   ZP.pLineBuf
*   Y,A = target pLSym
* Output:
*   CS, A = EC
*--------------------------------------
EXP.Eval00		lda #0
				tay

EXP.Eval
*				ldx ZPPtr1				local : 
*				phx
*				ldx ZPPtr1+1
*				phx

				ldx ZPPtr2				local : pLSym
				phx
				ldx ZPPtr2+1
				phx

				ldx ZPPtr3				local : BOP
				phx
				ldx ZPPtr3+1			local : PREOP
				phx

				>STYA ZPPtr2			target pLSym

*				stz ZPPtr1
*				stz ZPPtr1+1

				lda #$ff				no previous OP
				sta ZPPtr3+1			no PREOPS
				pha
*--------------------------------------
.10				jsr CC.GetCharNB
				bcs .19

				cmp #'('
				bne .20

				jsr CORE.GetNCharNB	skip (
				bcs .19

				jsr TYPE.Lookup			Search in typedefs
				bcs .11
	
				jsr TYPE.SetQ
				bcc .12
				
.9				jmp EXP.Eval.ExitErr
*--------------------------------------	
.11				>LDYA L.CC.TYPEQUAL		Search in default types
				jsr CC.LookupID
				bcs .13
				
				jsr TYPE.Reset

				jsr EXP.TYPEQUALJMP
				bcs .9
				
.12				jsr CC.GetCharNB
				bcs .19

				cmp #')'
				bne .19

				jsr CORE.GetNCharNB	skip )
				bcs .19

				bra .20
*--------------------------------------
.13				>LDYA ZPPtr2			target pLSym
				jsr EXP.Eval			recurse (exp)
				bcs .19

				jsr CC.GetCharNB
				bcs .19

				cmp #')'
				bne .19

				jsr CORE.GetNCharNB	skip )
				bcc .31

.19				jmp EXP.Eval.ESYN
*--------------------------------------
.20				>LDYA L.CC.PREOPS
				jsr CC.LookupOP
				stx ZPPtr3+1

				jsr CC.GetCharNB
				bcs .29

				jsr CC.IsLetter			define, f() or Var ?
				bcs .22

				jsr CC.GetDefine
				bcc .10

				jsr SYM.RLookup
				bcs .22

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.FUNCTION
				bne .21

				jsr EXP.GetVar			Check type, Get value & set ExpState
				bcs .29

				bra .30
*--------------------------------------
.21				>LDYA ZPPtr2			target pLSym

				jsr F.CallRetV
				bcs .29

				bra .30
*--------------------------------------
.22				jsr CC.IsDigit10		number ?
				bcs .24

.23				jsr EXP.GetNum
				bcs .29

				bra .30
*--------------------------------------
.24				cmp #'''
				bne .25

				jsr EXP.GetChar
				bcs .29

				bra .30

.25				cmp #'"'				String literal
				bne EXP.Eval.ESYN

				jsr EXP.AddConstCharP
.29				bcs EXP.Eval.Err
*--------------------------------------
.30				jsr CC.GetCharNB
				bcs EXP.Eval.ESYN

.31				jsr CC.IsEndArg			, ; ) ? :
				bcc EXP.Eval.End

				jsr CC.IsOPChar
				bcs EXP.Eval.ESYN

				>LDYA L.CC.BOPS			we are at V1 op1 V2 op2...
				jsr CC.LookupOP
				bcs EXP.Eval.ESYN

				stx ZPPtr3				save OP(n)

.33				plx						get OP(n-1)
				bmi .38					$ff....

				cpx ZPPtr3				*=0, +=6
				bcs .38					OP(n) has precedence, on stack : V1,V2

*	OP(n-1) has precedence...
				jsr EXP.BOPS			compute V(n-1) <OP(n-1)> V(n)
				bcc .33

				bcs EXP.Eval.Err

.38				phx						push back OP(n-1)

				lda ZPPtr3				get OP(n)
				pha						push OP(n) on stack

				jmp .10					go check for next token
*--------------------------------------
EXP.Eval.End	plx						any OP on stack ?
				bmi EXP.Eval.Exit

				jsr EXP.BOPS
				bcc EXP.Eval.End

				bra EXP.Eval.Err
*--------------------------------------
EXP.Eval.ESYN	lda #E.ESYN

EXP.Eval.Err	plx
				bpl EXP.Eval.Err

				sec
				bra EXP.Eval.ExitErr
*--------------------------------------
EXP.Eval.Exit	clc

EXP.Eval.ExitErr
				plx
				stx ZPPtr3+1
				plx
				stx ZPPtr3

				plx
				stx ZPPtr2+1
				plx
				stx ZPPtr2

*				plx
*				stx ZPPtr1+1
*				plx
*				stx ZPPtr1

				rts
*--------------------------------------
EXP.TYPEQUALJMP	jmp (J.CC.TYPEQUAL,x)
*--------------------------------------
* ZPPtr2 = target pLSym, X = OP
*--------------------------------------
EXP.BOPS		ldy #SYM.Q
				lda (ZPPtr2),y
				bit #SYM.Q.PPPOINTER
				beq .10

				ldy #SYM.T.UINT
				bra .3

.10				lda (ZPPtr2)			#SYM.T
				tay
				cpy #SYM.T.UINT
				bcs .3

				cpy #SYM.T.UCHAR
				beq .1

				cpy #SYM.T.SCHAR
				beq .2

				lda #E.TMISMATCH
				sec
				rts

.1				>LDYA L.PCC.bBOPS,x
				jmp CODE.EmitPCC

.2				>LDYA L.PCC.bBOPS,x
				jmp CODE.EmitPCC

.3				txa
				clc
				adc CC.Type2FPU-SYM.T.UINT,y
				tax
				jsr CODE.FPUCALL

				clc
				rts
*--------------------------------------
EXP.GetIntegral	jsr CC.GetCharNB
				cmp #'''
				bne .1

				jsr CC.GetNextCharEsc
				bcs .9

				tay

				jsr CC.GetNextChar
				bcs .9

				cmp #'''
				bne .9

				jsr CORE.GetNCharNB		skip '

				lda #0					Y,A = integral

				clc
				rts

.1				jsr CC.IsDigit10
				bcc EXP.IntConst

.9				lda #E.CSYN
*				sec
				rts
*--------------------------------------
EXP.IntConst	>SL
				>SS
				>PUSHW ZP.pLineBuf
				>PUSHWI ZP.pLineBuf
				>PUSHWI 10
				>LIBC StrToUL
				>SR
				bcs .9

				lda (pStack)
				inc pStack
				tay

				lda (pStack)
				inc pStack

				inc pStack
				inc pStack				Y,A = integral

.9				rts
*--------------------------------------
EXP.GetNum		lda (ZPPtr2)			#SYM.T
				cmp #SYM.T.FLOAT

				bcc .1

				beq .11

.90				lda #E.TMISMATCH
*				sec
				rts

.11				>SF
				>SS
				>PUSHW ZP.pLineBuf
				>PUSHWI ZP.pLineBuf
				>LIBC StrToF
				>SR
				bcs .99

				ldy #4

.10				lda (pStack),y
				jsr CODE.PUSHI
				dey
				bpl .10

				lda #5
				clc
				adc pStack
				sta pStack
				
				lda #ExpState.VonStack
				tsb ExpState
				
*				clc
.99				rts
*--------------------------------------
.1				>SL
				>SS
				>PUSHW ZP.pLineBuf
				>PUSHWI ZP.pLineBuf
				>PUSHWI 10

				lda (ZPPtr2)			#SYM.T
				tay
				lda CC.TYPESIGN-1,y
				bmi .2

				>LIBC StrToUL
				bra .3

.2				>LIBC StrToL

.3				>SR
				bcs .99

				ldy #SYM.Q				anticipate 2 bytes if *
				lda (ZPPtr2),y
				and #SYM.Q.PPPOINTER
				bne .5

				lda (ZPPtr2)			#SYM.T
				tax
				lda CC.TYPESIZE-1,x

				dec
				tay

.5				lda (pStack),y
				jsr CODE.PUSHI
				dey
				bpl .5

				lda #4
				clc
				adc pStack
				sta pStack
				
				lda #ExpState.VonStack
				tsb ExpState
				
*				clc
				rts
*--------------------------------------
EXP.GetChar		ldy #SYM.Q
				lda (ZPPtr2),y
				bne .9

				lda (ZPPtr2)			#SYM.T
				cmp #SYM.T.UCHAR
				beq .1

				cmp #SYM.T.SCHAR
				bne .9

.1				jsr CC.GetNextCharEsc
				bcs .9

				jsr CODE.PUSHI
				bcs .99

				jsr CC.GetNextChar
				bcs .9

				cmp #'''
				bne .9

				jsr CORE.GetNCharNB	skip '

				clc
				rts

.9				lda #E.ESYN
				sec
.99				rts
*--------------------------------------
EXP.AddConstCharP
				lda ZPCCConst
				jsr CODE.LDAI
				bcs .99
				
				>LDYA L.PCC.GetIAddrY
				jsr CODE.EmitPCC
				bcs .99
				
				lda ZPCCConst+1
				jsr CODE.LDAI
				bcs .99
				
				>LDYA L.PCC.GetIAddrA
				jsr CODE.EmitPCC
				bcs .99

				lda #ExpState.VinReg
				sta ExpState

				jsr CODE.IDSelect
				bcs .99
				
.1				jsr CC.GetNextCharEsc
				bcs .9

				bvs .2					ESCaped

				cmp #C.CR
				beq .9

				cmp #'"'
				beq .3

.2				jsr CODE.EmitData
				bcs .99

				bra .1

.3				jsr CORE.GetNCharNBNL		Skip "
				bcs .8

				cmp #'\'
				beq .3

				cmp #'"'
				beq .1

.8				lda #0
				jsr CODE.EmitData
				bcs .99

				jmp CODE.CSSelect

.9				lda #E.ESYN
				sec
.99				rts
*--------------------------------------
* ZPPtr2 = Target pLSym
* ZPPtr3+1 = PREOPS
*--------------------------------------
EXP.GetVar		stz ExpState

				jsr EXP.POSTOPS			var++, var[0]... ?
				bcs .99

				ldx ZPPtr3+1			preop &var, *var, --var ...
				jsr EXP.PREOPS
				bcs .99

				jsr EXP.CheckType
				bcs .99

				lda ExpState
				bne .8

				jsr EXP.GetAddr2		Load ZS.RT.Ptr2 with var address
				bcs .99

				jsr EXP.GetRSymSizeOf
				tay
				dey
				bne .1

				lda #ExpState.VinReg
				tsb ExpState

				>LDYA L.PCC.GetValueA
				jmp CODE.EmitPCC

.1				cpy #1
				bne .2

				lda #ExpState.VinReg
				tsb ExpState

				>LDYA L.PCC.GetValueYA
				jmp CODE.EmitPCC

.2				lda #ExpState.VonStack
				tsb ExpState
				
				jsr CODE.LDYI
				bcs .99

				>LDYA L.PCC.PushValueY
				jmp CODE.EmitPCC

.8				

.99				rts
*--------------------------------------
* POSTOPS
*--------------------------------------
EXP.POSTOPS		>LDYA L.CC.POSTOPS
				jsr CC.LookupOP
				bcs .8

				jmp (J.CC.POSTOPS,x)

.8				clc
				rts
*--------------------------------------
EXP.PostInc		lda ExpState
				bit #ExpState.AinPTR
				bne .1

				jsr EXP.GetAddr2
				bcs .99

				lda #ExpState.AinPTR
				tsb ExpState

.1				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.AAARRAY+SYM.Q.PPPOINTER
				bne .8

				lda (ZP.pRSymBuf)	#SYM.T
				cmp #SYM.T.FLOAT
				bcs .98

				tay

				lda CC.TYPESIZE-1,y
				lsr
				bcc .2

				>LDYA L.PCC.Inc1
				jmp CODE.EmitPCC

.2				lsr
				bcc .4

				>LDYA L.PCC.Inc2
				jmp CODE.EmitPCC

.4				>LDYA L.PCC.Inc4
				jmp CODE.EmitPCC


.8

.98				lda #E.ESYN
				sec
.99				rts
*--------------------------------------
EXP.PostDec		lda ExpState
				bit #ExpState.AinPTR
				bne .1

				jsr EXP.GetAddr2
				bcs .99

				lda #ExpState.AinPTR
				tsb ExpState

.1				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.AAARRAY+SYM.Q.PPPOINTER
				bne .8

				lda (ZP.pRSymBuf)		#SYM.T
				cmp #SYM.T.FLOAT
				bcs .98

				tay

				lda CC.TYPESIZE-1,y
				lsr
				bcc .2

				>LDYA L.PCC.Dec1
				jmp CODE.EmitPCC

.2				lsr
				bcc .4

				>LDYA L.PCC.Dec2
				jmp CODE.EmitPCC

.4				>LDYA L.PCC.Dec4
				jmp CODE.EmitPCC


.8

.98				lda #E.ESYN
				sec
.99				rts
*--------------------------------------
EXP.Idx			ldy #SYM.Q
				lda (ZP.pRSymBuf),y

				bit #SYM.Q.AAARRAY
				bne EXP.array

				and #SYM.Q.PPPOINTER
				cmp #SYM.Q.POINTER
				bne .98

				lda (ZP.pRSymBuf),y
				eor #SYM.Q.POINTER+SYM.Q.ARRAY
				sta (ZP.pRSymBuf),y		convert from *type to type[]

				jsr EXP.GetAddr2
				bcs .99

				>LDYA L.PCC.PushDeref2
				jsr CODE.EmitPCC
				bcs .99

				jsr EXP.array.getIdx	...int16 on stack...
				bcs .99

				jsr EXP.GetRSymSizeOf
				cmp #1
				bne .1

				cpx #0
				beq .2					sizeof=1, no MUL required

.1				jsr CODE.PUSHAXI		...sizeof on stack...
				bcs .99

				ldx #FPU.wMUL
				jsr CODE.FPUCALL		...sizeof*int16...
				bcs .99

.2				ldx #FPU.wADD
				jsr CODE.FPUCALL		...add to base address
				bcs .99

				jsr CC.GetCharNB
				bcs .97

				cmp #']'
				bne .97

				jsr CORE.GetNCharNB	skip ']'

				lda #ExpState.AonStack
				sta ExpState

				clc
				rts

.97				lda #E.ESYN
				sec
				rts

.98				lda #E.TMISMATCH
				sec
.99				rts
*--------------------------------------
EXP.array		ldy #SYM.A1
				lda (ZP.pRSymBuf),y
				iny
				ora (ZP.pRSymBuf),y
				beq .1
*			jsr CODE.DEBUG
				jsr EXP.PushAddr		array[int]...
				bcc .2

				rts

.1				jsr EXP.GetAddr2		array[]...it is a *
				bcs .9

				>LDYA L.PCC.PushDeref2
				jsr CODE.EmitPCC
				bcs .9

.2				jsr EXP.array.getIdx	...int16 on stack...
				bcs .9

				jsr EXP.GetRSymSizeOf
				jsr CODE.PUSHAXI		...sizeof on stack...
				bcs .9

				ldx #FPU.wMUL
				jsr CODE.FPUCALL		...sizeof*int16...
				bcs .9

				ldx #FPU.wADD
				jsr CODE.FPUCALL		...add to base address
				bcs .9

.3				jsr CORE.GetNCharNB	skip ']'
				bcs .98

				cmp #'['
				bne .8

				jsr CORE.GetNCharNB	skip '['
				bcs .98

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.AAARRAY
				beq .99

				jsr EXP.array.getIdx	...int16 on stack...
				bcs .9

				ldy #SYM.A2+1
				lda (ZP.pRSymBuf),y
				tax
				dey
				lda (ZP.pRSymBuf),y
				jsr CODE.PUSHAXI		[][SIZE] on stack

				ldx #FPU.wMUL
				jsr CODE.FPUCALL		[][SIZE] * int16 on stack

				jsr EXP.GetRSymSizeOf
				jsr CODE.PUSHAXI		...sizeof on stack...
				bcs .9

				ldx #FPU.wMUL
				jsr CODE.FPUCALL		...sizeof*int16...

				ldx #FPU.wADD
				jsr CODE.FPUCALL		...add to base address
				bcs .9

				jsr CORE.GetNCharNB	skip ']'
				bcs .98


* TODO : [][][]

.8				lda #ExpState.AonStack
				sta ExpState

				clc
				rts

.98				lda #E.ESYN
				sec
				rts

.99				lda #E.TMISMATCH
				sec
.9				rts
*--------------------------------------
EXP.array.getIdx
				ldy #SYM.T.SINT
				lda #0

				jsr EXP.Eval
				bcs .9

				jsr CC.GetCharNB
				bcs .98

				cmp #']'
				bne .98

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				sec
				sbc #SYM.Q.ARRAY
				sta (ZP.pRSymBuf),y

				clc
				rts

.98				lda #E.ESYN
				sec
.9				rts
*--------------------------------------
EXP.SU			lda (ZP.pRSymBuf)
				cmp #SYM.T.SU
				bne .97

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.PPPOINTER
				bne .97

				jsr CC.GetCharNB
				bcs .98

				jsr CC.IsLetter
				bcs .98

				ldy #SYM.ScopeID
				lda (ZP.pRSymBuf),y
				pha
				iny
				lda (ZP.pRSymBuf),y
				ply

				jsr SYM.RLookupYA
				bcs .99

				ldy #SYM.Addr
				lda (ZP.pRSymBuf),y

				pha
				iny
				lda (ZP.pRSymBuf),y
				ply
				clc
				rts

.97				lda #E.TMISMATCH
				sec
				rts

.98				lda #E.ESYN
				sec
.99				rts
*--------------------------------------
EXP.pSU			lda #E.ESYN
				sec
				rts
*--------------------------------------
* PREOPS
*--------------------------------------
EXP.PREOPS		bmi .8

				jmp (J.CC.PREOPS,x)

.8				clc
				rts
*--------------------------------------
EXP.Ref			ldy #SYM.Q
				lda (ZP.pRSymBuf),y

				clc
				adc #SYM.Q.POINTER
				bcs .9					more than ***

*				and #%11001111
				sta (ZP.pRSymBuf),y

				bit ExpState
				bvs .8

				jsr EXP.PushAddr
				bcs .99

.8				lda #ExpState.VonStack
				sta ExpState

*				clc						Addr on stack
				rts

.9				lda #E.TMISMATCH
*				sec
.99				rts
*--------------------------------------
EXP.Deref		ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				bit #SYM.Q.PPPOINTER
				beq .9

				sec
				sbc #SYM.Q.POINTER
				sta (ZP.pRSymBuf),y

				jsr EXP.GetAddr2
				bcs .99

				>LDYA L.PCC.Deref2
				jsr CODE.EmitPCC
				bcs .99

				lda #ExpState.AinPTR
				sta ExpState

*				clc
				rts

.9				lda #E.TMISMATCH
				sec
.99				rts
*--------------------------------------
EXP.Abs

				clc

.99				rts
*--------------------------------------
EXP.Negate

				clc

.99				rts
*--------------------------------------
EXP.lNot

				clc

.99				rts
*--------------------------------------
EXP.bNot

				clc

.99				rts
*--------------------------------------
EXP.PreInc

				clc

.99				rts
*--------------------------------------
EXP.PreDec

				clc

.99				rts
*--------------------------------------
EXP.PushAddr	ldy #SYM.SC
				lda (ZP.pRSymBuf),y
				beq .1					SYM.SC.STATIC
* LOCAL

				>LDYA L.PCC.PushLAddrH
				jsr CODE.EmitPCC
				bcs .9

				ldy #SYM.Addr
				lda (ZP.pRSymBuf),y
				eor #$FF
				inc
				jsr CODE.LDAI
				bcs .9

				>LDYA L.PCC.PushLAddrL
				jmp CODE.EmitPCC

* GLOBAL

.1				ldy #SYM.Addr+1
				lda (ZP.pRSymBuf),y
				tax

				dey
				lda (ZP.pRSymBuf),y

				jsr CODE.LDAXI
				bcs .9

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.CONST
				beq .2

				>LDYA L.PCC.PushIAddr
				jmp CODE.EmitPCC

.2				>LDYA L.PCC.PushUAddr
				jmp CODE.EmitPCC

.9				rts
*--------------------------------------
EXP.GetAddr2	ldy #SYM.SC
				lda (ZP.pRSymBuf),y
				beq .1					SYM.SC.STATIC
* LOCAL
				ldy #SYM.Addr
				lda (ZP.pRSymBuf),y

				eor #$FF
				inc
				jsr CODE.LDAI
				bcs .9

				>LDYA L.PCC.GetLAddr2
				jmp CODE.EmitPCC
* GLOBAL

.1				ldy #SYM.Addr+1
				lda (ZP.pRSymBuf),y
				tax

				dey
				lda (ZP.pRSymBuf),y

				jsr CODE.LDAXI
				bcs .9

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #SYM.Q.CONST
				beq .2

				>LDYA L.PCC.GetIAddr2
				jmp CODE.EmitPCC

.2				>LDYA L.PCC.GetUAddr2
				jmp CODE.EmitPCC

.9				rts
*--------------------------------------
* out : A,X = size
*--------------------------------------
EXP.GetRSymSizeOf
				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				pha
				lda (ZP.pRSymBuf)	SYM.T
				tay
				pla

EXP.GetYASizeOfInAX

				bit #SYM.Q.PPPOINTER+SYM.Q.AAARRAY
				bne .1

				lda CC.TYPESIZE-1,y
				ldx #0

				clc
				rts

.1				lda #2					pointer
				ldx #0

				sec						+1 for hMem Storage
				rts
*--------------------------------------
* ZPPtr2 = target pLSymBuf
* ZP.pRSymBuf = Expression
*--------------------------------------
EXP.CheckType	lda ZPPtr2+1			any target type ?
				beq .8
				
				lda (ZPPtr2)
				cmp #SYM.T.VARIADIC
				beq .8					Variadic accepts anything

				lda (ZP.pRSymBuf)		SYM.T
				cmp #SYM.T.VOID
				beq .2
				
				cmp (ZPPtr2)
				bne .9

				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				and #$F8				ignore VOLATILE|RESTRICT|FUNCTION
				cmp (ZPPtr2),y
				bne .9

				clc
				rts

.2				ldy #SYM.Q
				lda (ZP.pRSymBuf),y
				eor (ZP.pRSymBuf),y
				and #$F8				ignore VOLATILE|RESTRICT|FUNCTION
				beq .8

				and #SYM.Q.AAARRAY		is mismatch about array ?
				beq .9					no...

				lda ZPPtr2+1			Q
				and #SYM.Q.AAARRAY
				bne .9

.8				clc
				rts

.9				lda #E.TMISMATCH
				sec
.99				rts
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s.exp
LOAD usr/src/bin/cc.s
ASM
