NEW
  AUTO 3,1
*--------------------------------------
KW.Lookup		>LDYA L.KEYWORDS
				>STYA ZPPtr1
				
				>LDYA ZPCLBufPtr
				>STYA ZPPtr2
				
				ldx #0

.1				ldy #$ff
				
.2				jsr .7					get next valid char in src text
				bcs .3

.20				jsr ToUpperCase
				eor (ZPPtr1),y			match table char ?
				asl						compare only 7 bits
				bne .4					no match...get next table keyword

				bcc .2					not last char in this keyword

				jsr .7					next char in text...
				bcc .4					valid....failed

.8				tya						Keyword Len

				clc			
				rts

.3				dey
				lda (ZPPtr1),y			was last char in this keyword ?
				bmi .8

				iny
.41				jsr IncPtr1				skip chars to next keyword

.4				lda (ZPPtr1)
				bpl .41
				jsr IncPtr1

.6				inx
				lda (ZPPtr1)			Array Ending 0, lookup failed
				bne .1

.9				sec
				rts

.7				iny
				lda (ZPPtr2),y			Get Src text char...
				beq .9					end of text
			
				jsr IsSpaceOrCR
				bcc .9					end of valid chars
				
				clc
				rts
*--------------------------------------
KW.DUP			lda pStack
				sec
				sbc #2
				bcc .9
				
				lda (pStack)
				tax
				ldy #1
				lda (pStack),y
				>PUSHA
				txa
				>PUSHA
				clc
				rts
				
.9				lda #E.STKOVERFLOW
				sec
				rts
*--------------------------------------
KW.DROP			lda pStack
				beq .9
				
				inc pStack
				beq .9
				inc pStack
				clc
				rts
				
.9				lda #E.STACKERROR
				sec
				rts
*--------------------------------------
KW.SWAP			ldy #3
				lda (pStack),y
				pha
				
				dey						#2
				lda (pStack),y
				pha
				
				lda (pStack)
				tax
				pla
				sta (pStack)
				
				txa
				sta (pStack),y			#2

				dey 					#1
				lda (pStack),y
				tax
				pla
				sta (pStack),y

				iny
				iny						#3
				txa
				sta (pStack),y
				clc
				rts
*--------------------------------------
KW.OVER			lda pStack
				sec
				sbc #2
				bcc .9
				
				ldy #3
				lda (pStack),y
				>PUSHA
				lda (pStack),y
				>PUSHA
				clc
				rts

.9				lda #E.STKOVERFLOW
				sec
				rts
*--------------------------------------
KW.ROT
*--------------------------------------
KW.mDUP
*--------------------------------------
KW.gR
*--------------------------------------
KW.Rg
*--------------------------------------
KW.R
				clc
				rts
*--------------------------------------
KW.Add			jsr CheckStackPop4
				bcs .9
				
				clc
				ldy #2
				lda (pStack),y
				adc (pStack)
				sta (pStack),y
				inc pStack

				lda (pStack),y
				adc (pStack)
				sta (pStack),y
				inc pStack

				clc
.9				rts
*--------------------------------------
KW.DAdd			>FPU ADD32
				clc
				rts
*--------------------------------------
KW.Sub			jsr CheckStackPop4
				bcs .9
				
				sec
				ldy #2
				lda (pStack),y
				sbc (pStack)
				sta (pStack),y
				inc pStack

				lda (pStack),y
				sbc (pStack)
				sta (pStack),y
				inc pStack

				clc
.9				rts
*--------------------------------------
KW.Mul
*--------------------------------------
KW.Div
*--------------------------------------
KW.Mod
*--------------------------------------
KW.DivMod
*--------------------------------------
KW.MulDivMod
*--------------------------------------
KW.MulDiv
*--------------------------------------
KW.MAX			jsr CheckStackPop4
				bcs .9
				
				lda (pStack)			LO
				ldy #2
				cmp (pStack),y	
				
				dey						#1

				lda (pStack),y			HI
				iny
				iny						#3
				sbc (pStack),y
				bcc .1
				
				jsr KW.SWAP
				
.1				jmp KW.DROP

.9				rts				
*--------------------------------------
KW.MIN			jsr CheckStackPop4
				bcs .9
				
				lda (pStack)			LO
				ldy #2
				cmp (pStack),y	
				
				dey						#1

				lda (pStack),y			HI
				iny
				iny						#3
				sbc (pStack),y
				bcs .1
				
				jsr KW.SWAP
				
.1				jmp KW.DROP

.9				rts				
*--------------------------------------
KW.ABS
*--------------------------------------
KW.DABS
				clc
				rts
*--------------------------------------
KW.MINUS		lda (pStack)			LO
				eor #$ff
				sec
				adc #0
				sta (pStack)

				ldy #1
				lda (pStack),y			HI
				eor #$ff
				adc #0
				sta (pStack),y

				clc
				rts
*--------------------------------------
KW.DMINUS		lda (pStack)			LO
				eor #$ff
				sec
				adc #0
				sta (pStack)

				ldy #1
				lda (pStack),y			HI
				eor #$ff
				adc #0
				sta (pStack),y

				iny
				lda (pStack),y
				eor #$ff
				adc #0
				sta (pStack),y

				iny
				lda (pStack),y
				eor #$ff
				adc #0
				sta (pStack),y

				clc
				rts
*--------------------------------------
KW.AND			jsr CheckStackPop4
				bcs .9
				
				ldy #2
				lda (pStack),y
				and (pStack)
				sta (pStack),y
				inc pStack

				lda (pStack),y
				and (pStack)
				sta (pStack),y
				inc pStack

				clc

.9				rts
*--------------------------------------
KW.OR			jsr CheckStackPop4
				bcs .9
				
				ldy #2
				lda (pStack),y
				ora (pStack)
				sta (pStack),y
				inc pStack

				lda (pStack),y
				ora (pStack)
				sta (pStack),y
				inc pStack

				clc

.9				rts
*--------------------------------------
KW.XOR			jsr CheckStackPop4
				bcs .9
				
				ldy #2
				lda (pStack),y
				eor (pStack)
				sta (pStack),y
				inc pStack

				lda (pStack),y
				eor (pStack)
				sta (pStack),y
				inc pStack

				clc

.9				rts
*--------------------------------------
KW.LWR			jsr CheckStackPop4
				bcs .9
				
				ldy #2
				lda (pStack),y
				cmp (pStack)
				inc pStack

				lda (pStack),y
				sbc (pStack),y
				inc pStack

				inc pStack
				
				rol
				sta (pStack)

				clc

.9				rts
*--------------------------------------
KW.GTR			jsr CheckStackPop4
				bcs .9
				
				ldy #2
				lda (pStack),y
				cmp (pStack)
				inc pStack

				lda (pStack),y
				sbc (pStack),y
				inc pStack

				inc pStack
				
				rol
				eor #$80
				sta (pStack)

				clc

.9				rts
*--------------------------------------
KW.EQ			jsr CheckStackPop4
				bcs .9
				
				ldy #2
				lda (pStack),y
				sec
				sbc (pStack)
				tax
				inc pStack

				lda (pStack),y
				sbc (pStack),y
				inc pStack

				inc pStack
				
				bcc .1
				
				txa
				bne .1
				
				sec
				.HS 90					BCC
.1				clc
				ror
				sta (pStack)

				clc
.9				rts
*--------------------------------------
KW.NEGATIVE		>PULLA
				>PULLA
				bpl .9

				sec
				.HS 90					BCC
.9				clc
				ror
				sta (pStack)

				clc
				rts
*--------------------------------------
KW.ZERO			>PULLA
				tax
				>PULLA
				bne .9
				
				txa
				bne .9
				
				sec
				.HS 90					BCC
.9				clc
				ror
				sta (pStack)
				
				clc
				rts
*--------------------------------------
KW..			jsr KW.DUP
				bcs .9

				ldy #2
				lda L.FMT.int16
				sta (pStack),y
				iny
				lda L.FMT.int16+1
				sta (pStack),y
				>PUSHBI 2
				>SYSCALL PrintF

*				clc

.9				rts
*--------------------------------------
KW..R
*--------------------------------------
KW.D.
*--------------------------------------
KW.D.R
				clc
				rts
*--------------------------------------
KW.CR			>PUSHW L.MSG.ECHOCRLF
				>PUSHBI 0 
				>SYSCALL PrintF
				rts
*--------------------------------------
KW.SPACE		lda #C.SPACE
				>SYSCALL PutChar
				rts
*--------------------------------------
KW.SPACES		>PULLA
				
				beq .8

.1				dec
				
				pha
				
				lda #C.SPACE
				>SYSCALL PutChar
				pla
				bne .1

.8				clc
				rts
*--------------------------------------
KW.PRINT		>LDYAI 256
				>SYSCALL GetMem
				bcs .9
				
				>STYA ZPPtr1
				phx

				ldy #$ff
				
				clc	
				
.1				iny
				lda (ZPCLBufPtr),y
				beq .2
				
				sta (ZPPtr1),y
				eor #'"
				bne .1
				
				sec
				
.2				sta (ZPPtr1),y
				tya 
				adc ZPCLBufPtr
				sta ZPCLBufPtr
				bcc .3

				inc ZPCLBufPtr+1
				
.3				>LDYA ZPPtr1
				>SYSCALL PutS
				
				pla
				>SYSCALL freemem
				
				jmp NextChar
				
.9				rts
*--------------------------------------
KW.DUMP
*--------------------------------------
KW.TYPE
*--------------------------------------
KW.COUNT
*--------------------------------------
KW.TERMINAL
				clc
				rts
*--------------------------------------
KW.KEY			>SYSCALL GetChar
				bcs .9
				
				>PUSHA
				
.9				rts				
*--------------------------------------
KW.EMIT			>PULLA
				>SYSCALL PutChar
				rts
*--------------------------------------
KW.EXPECT
*--------------------------------------
KW.WORD
*--------------------------------------
KW.NUMBER
*--------------------------------------
KW.STARTSTR
*--------------------------------------
KW.STRADD
*--------------------------------------
KW.STRDBL
*--------------------------------------
KW.SIGN
*--------------------------------------
KW.ENDSTR
*--------------------------------------
KW.HOLD
*--------------------------------------
KW.DECIMAL
*--------------------------------------
KW.HEX
*--------------------------------------
KW.OCTAL		clc
				rts
*--------------------------------------
KW.FETCHW		lda (pStack)
				sta ZPAddrPtr
				ldy #1
				lda (pStack),y
				sta ZPAddrPtr+1
				
				lda (ZPAddrPtr)
				sta (pStack)
				lda (ZPAddrPtr),y
				sta (pStack),y
				clc
				rts
*--------------------------------------
KW.STOREW		jsr CheckStackPop4
				bcs .9

				>PULLW ZPAddrPtr
				>PULLA
				sta (ZPAddrPtr)
				>PULLA
				ldy #1
				sta (ZPAddrPtr),y

*				clc

.9				rts
*--------------------------------------
KW.FETCHB		>PULLW ZPAddrPtr
				lda (ZPAddrPtr)
				>PUSHA
				clc
				rts
*--------------------------------------
KW.STOREB		>PULLW ZPAddrPtr
				>PULLA
				sta (ZPAddrPtr)
				clc
KW.STOREB.RTS	rts
*--------------------------------------
KW.FETCHPRINTW	jsr KW.FETCHW
				bcs KW.STOREB.RTS
				jmp KW..
*--------------------------------------
KW.ADDTOW		jsr KW.FETCHW
				bcs KW.STOREB.RTS
				jsr KW.Add
				bcs KW.STOREB.RTS
				jmp KW.STOREW
*--------------------------------------
KW.CMOVE
				clc
				rts
*--------------------------------------
KW.FILL			>PULLA
				bra KW.FILL2
				
KW.ERASE		lda #0
				bra KW.FILL2

KW.BLANKS		lda #C.SPACE

KW.FILL2		tax

				>PULLA
				tay

				>PULLW ZPAddrPtr
				
				txa
				
.1				dey
				sta (ZPAddrPtr),y
				cpy #0
				bne .1
				
				clc
				rts
*--------------------------------------
KW.HERE			>PUSHW ZPUsrBufPtr
				clc
				rts
*--------------------------------------
KW.PAD			>PUSHW ZPPadBuf
				clc
				rts
*--------------------------------------
KW.ALLOT
KW.nCOMPILE
KW.QUOTE
KW.FORGET
KW.DEFINITIONS
KW.VOCABULARY
KW.FORTH
KW.EDITOR
KW.ASSEMBLER
KW.VLIST
				clc
				rts
*--------------------------------------
KW.BCOLON

				clc
				rts
*--------------------------------------
KW.ECOLON

				clc
				rts
*--------------------------------------
KW.VARIABLE		>PUSHB.G hSList
				>PUSHW ZPCLBufPtr

				>SYSCALL SListNewKey
				bcs .9
				
				>STYA ZPKeyID
				
				txa
				jsr NextKW
				
				>LDYA L.PUSHADDR
				>STYA ZPUsrCodePtr
				
				>PUSHB.G hSList
				>PUSHW ZPKeyID
				>PUSHWI ZPUsrBufPtr
				>PUSHWI 4				BufPtr+CodePtr
				>SYSCALL SListAddData
				bcs .9
				
				>PULLA
				sta (ZPUsrBufPtr)
				>PULLA
				ldy #1
				sta (ZPUsrBufPtr),y
				
				lda ZPUsrBufPtr
				clc
				adc #2
				sta ZPUsrBufPtr
				bcc .9
	
				inc ZPUsrBufPtr+1
				
				clc
.9				rts
*--------------------------------------
KW.CONSTANT
*--------------------------------------
KW.ACODE
*--------------------------------------
KW.FCODE
*--------------------------------------
KW.DO
*--------------------------------------
KW.LOOP
*--------------------------------------
PW.pLOOP
*--------------------------------------
KW.I
*--------------------------------------
KW.LEAVE
*--------------------------------------
KW.IF
*--------------------------------------
KW.ELSE
*--------------------------------------
KW.ENDIF
*--------------------------------------
KW.BEGIN
*--------------------------------------
KW.UNTIL
*--------------------------------------
KW.REPEAT
*--------------------------------------
KW.WHILE

				clc
				rts
*--------------------------------------
KW.COMMENT		clc
				rts
*--------------------------------------
MAN
SAVE usr/src/bin/forth.s.kw
LOAD usr/src/bin/forth.s
ASM
