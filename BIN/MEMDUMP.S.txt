NEW
  AUTO 3,1
				.LIST OFF
				.OP	65C02
				.OR	$2000
				.TF bin/memdump
*--------------------------------------
				.INB inc/macros.i
				.INB inc/a2osx.i
*--------------------------------------
PAGE.LEN		.EQ 23
*--------------------------------------
				.DUMMY
				.OR ZPBIN
ZS.START
ZPPTR1			.BS 2
ZPPTR2			.BS 2
MEM.COUNT		.BS 1
USED.COUNT		.BS 1
LineCnt			.BS 1
bSTOP			.BS 1

ZS.END			.ED
*--------------------------------------
*			File Header (16 Bytes)
*--------------------------------------
CS.START		cld
				jmp (.1,x)
				.DA #$61				6502,Level 1 (65c02)
				.DA #2					BIN Layout Version 2
				.DA #0					S.PS.F.EVENT
				.DA #0
				.DA CS.END
				.DA ID.END
				.DA DS.END
				.DA #64					Stack Size
				.DA #ZS.END-ZS.START	Zero Page Size
*--------------------------------------
* Relocation Table
*--------------------------------------
.1				.DA CS.INIT
				.DA CS.RUN
				.DA CS.DOEVENT
				.DA	CS.QUIT
L.MSG0			.DA MSG0
L.MSG1.INV		.DA MSG1.INV
L.MSG1			.DA MSG1
L.MSG1.BIN		.DA MSG1.BIN
L.MSG1.STR		.DA MSG1.STR
L.MSG1.HEX		.DA MSG1.HEX
L.MSG.CRLF		.DA MSG.CRLF
				.DA 0
*--------------------------------------
CS.INIT			clc
CS.INIT.RTS		rts
*--------------------------------------
CS.RUN			>LEA.G MemStat
				>KAPI GetMemStat

				>LDYAI MEM.LoMem+S.MEM
				>STYA ZPPTR1

				>LDYA L.MSG0
				>LIBC PutS
				bcs CS.INIT.RTS
				
				jsr CS.RUN.IncLineCnt

				stz MEM.COUNT
				stz USED.COUNT
*--------------------------------------
CS.RUN.LOOP		inc MEM.COUNT			skip slot 0

				jsr CS.RUN.CheckStop
				bcs CS.INIT.RTS

.1				lda (ZPPTR1)
				bpl .2

				inc USED.COUNT

.2				jsr CS.RUN.PRINTMEM
				lda ZPPTR1
				clc
				adc #S.MEM
				sta ZPPTR1
				bcc .3

				inc ZPPTR1+1

.3				lda MEM.COUNT
*				>CMP.G MemStat+S.MSTAT.XLast

				cmp MEM.LastSlot
				bne CS.RUN.LOOP

				jsr CS.RUN.PrintCRLF

				lda #0
				sec
				rts
*--------------------------------------
CS.RUN.PRINTMEM	>SS
				>PUSHW L.MSG1

				>PUSHB MEM.COUNT

				lda (ZPPTR1)			Get flags
				ldy #MEM.FLAGS+7
				ldx #7

.20				lsr
				pha
				lda #'-'
				bcc .30

				lda MSG.FLAGS,x

.30				sta (pData),y
				pla
				dey
				dex
				bpl .20

				>PUSHEA.G MEM.FLAGS

				lda (ZPPTR1)			Get flags
				and #S.MEM.F.CODE
				eor #S.MEM.F.CODE
				tay
				beq .31
				
				ldy #S.MEM.OWNER
				lda (ZPPTR1),y
				pha
				iny
				lda (ZPPTR1),y
				ply

.31				>PUSHYA

				ldy #S.MEM.REFCNT
				lda (ZPPTR1),y
				>PUSHA

				ldy #S.MEM.PTR+1
				lda (ZPPTR1),y
				>PUSHA
				dey
				lda (ZPPTR1),y
				>PUSHA

				ldy #S.MEM.LEN+1
				lda (ZPPTR1),y
				>PUSHA
				dey
				lda (ZPPTR1),y
				>PUSHA

				lda (ZPPTR1)			Get flags
				bpl .12					free

				jsr CS.RUN.CHECKPS
				bcc .12

				jsr CS.RUN.PrintINV

.12				>PUSHBI 10

				>LIBC PrintF
				>SR

				lda (ZPPTR1)
				and #S.MEM.F.INUSE+S.MEM.F.CODE
				cmp #S.MEM.F.INUSE+S.MEM.F.CODE
				bne CS.RUN.PRINTMEM.DATA

				jmp CS.RUN.PRINTMEM.CODE
*--------------------------------------
CS.RUN.PRINTMEM.DATA

				ldy #S.MEM.PTR
				lda (ZPPTR1),y
				sta ZPPTR2
				iny
				lda (ZPPTR1),y
				sta ZPPTR2+1

				ldy #$ff

.1				iny
				lda (ZPPTR2),y			Check if it looks like a printable string
				beq .11

				bmi .2

				cmp #$20
				bcc .2					not printable....->hex

				cpy #$ff
				bne .1

.11				tya
				beq .2					Starting with 0...PrintHEX

				>SS
				>PUSHW L.MSG1.STR
				tya
				>PUSHA					len
				>PUSHW ZPPTR2			String
				>PUSHBI 3
				>LIBC PrintF
				>SR
				
				jmp CS.RUN.IncLineCnt
*--------------------------------------
.2				>SS
				>PUSHW L.MSG1.HEX

				ldy #0

.3				>PUSHB (ZPPTR2),y
				iny
				cpy #16
				bne .3

				>PUSHBI 16
				>LIBC PrintF
				>SR
				
				jmp CS.RUN.IncLineCnt
*--------------------------------------
CS.RUN.PRINTMEM.CODE
				>SS
				>PUSHW L.MSG1.BIN

				ldy #S.MEM.OWNER+1
				lda (ZPPTR1),y
				>PUSHA
				dey
				lda (ZPPTR1),y
				>PUSHA

				>PUSHBI 2
				>LIBC PrintF
				>SR
				
				jmp CS.RUN.IncLineCnt
*--------------------------------------
CS.RUN.CHECKPS	lda (ZPPTR1)			Get flags
				and #S.MEM.F.CODE
				bne .9
				
				ldy #S.MEM.OWNER
				lda (ZPPTR1),y
				pha
				iny
				lda (ZPPTR1),y
				ply
				
				bne .1
				
				cmp #0
				beq .8
				
.1				>LIBC GetPS
				bcs .9
				
				>LIBC Free

*				clc

				rts

.8				clc
.9				rts
*--------------------------------------
CS.RUN.CheckStop
				lda bSTOP
				beq .2

.1				>SLEEP

				>LIBC GetChar
				bcs .9

				cmp #3					Ctrl-C
				beq .9					CS

				stz bSTOP

				clc
				rts

.2				ldy #S.PS.pStdIn
				jsr A2osX.GetPSy
				pha
				iny
				jsr A2osX.GetPSy
				ply
				>LIBC FEOF
				bcs .9

				tay
				bne .8					no char

				>LIBC GetChar
				bcs .9

				cmp #3					Ctrl-C
				beq .9					CS

				cmp #$13				Ctrl-S
				bne .8

				dec bSTOP

.8				clc
.9				rts
*--------------------------------------
CS.RUN.PrintINV	>SS
				>PUSHW L.MSG1.INV
				>PUSHBI 0
				>LIBC PrintF
				>SR
				rts
*--------------------------------------
CS.RUN.PrintCRLF
				>SS
				>PUSHW L.MSG.CRLF
				>PUSHBI 0
				>LIBC PrintF
				>SR

CS.RUN.IncLineCnt
				inc LineCnt
				lda LineCnt
				cmp #PAGE.LEN
				bcc .8

				dec bSTOP
				stz LineCnt
				clc
.8
.9				rts
*--------------------------------------
CS.DOEVENT		sec
				rts
*--------------------------------------
CS.QUIT			clc
				rts
*--------------------------------------
CS.END			.EQ *
*--------------------------------------
MSG0			.CZ "hMem Flags    Owner REF PTR  LEN   BINPATH/DATA"
MSG1.INV		.CZ "\e[7m"
MSG1			.CZ " %h  %s %5D %3d %H %5D "
MSG1.BIN		.CZ "\e[7m%s\e[0m\r\n"
MSG1.STR		.CZ "[%03d:%s]\e[0m\r\n"
MSG1.HEX		.CZ "?HEX:%h%h.%h%h.%h%h.%h%h.%h%h.%h%h.%h%h.%h%h\e[0m\r\n"
MSG.CRLF		.CZ "\r\n"
MSG.FLAGS		.CS "UZXAbcds"
*--------------------------------------
ID.END			.EQ *
*--------------------------------------
				.DUMMY
				.OR 0

MemStat			.BS S.MSTAT
MEM.FLAGS		.BS 9
DS.END			.ED
*--------------------------------------
MAN
SAVE usr/src/bin/memdump.s
ASM
