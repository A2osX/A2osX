NEW
  AUTO 3,1
				.LIST OFF
				.OP	65C02
				.OR	$2000
				.TF bin/cc
*--------------------------------------
				.INB inc/macros.i
				.INB inc/a2osx.i
				.INB inc/mli.i
				.INB inc/mli.e.i
*--------------------------------------
_DBG_STK		.EQ 0
_DBG_SYM		.EQ 0
_DBG_SCOPE		.EQ 0
_DBG_OUT		.EQ 0
*--------------------------------------
FILES.MAX		.EQ 4
LIBS.MAX		.EQ 4
SCOPE.MAX		.EQ 16
*LOOKUP.MAX		.EQ 16
*--------------------------------------
SYM.T			.EQ 0
SYM.T.VOID			.EQ 1
SYM.T.UCHAR			.EQ 2
SYM.T.SCHAR			.EQ 3
SYM.T.UINT			.EQ 4
SYM.T.SINT			.EQ 5
SYM.T.ULONG			.EQ 6
SYM.T.SLONG			.EQ 7
SYM.T.FLOAT			.EQ 8
SYM.T.SU			.EQ 9
SYM.T.ENUM			.EQ 10
SYM.T.VARIADIC		.EQ $FF
SYM.Q			.EQ 1
SYM.Q.POINTER		.EQ %01000000
SYM.Q.PPOINTER		.EQ %10000000
SYM.Q.PPPOINTER		.EQ %11000000
SYM.Q.ARRAY			.EQ %00010000
SYM.Q.AARRAY 		.EQ %00100000
SYM.Q.AAARRAY		.EQ %00110000
SYM.Q.CONST			.EQ %00001000
SYM.Q.VOLATILE		.EQ %00000100
SYM.Q.RESTRICT		.EQ %00000010
SYM.Q.FUNCTION		.EQ %00000001
SYM.SC			.EQ 2
SYM.SC.STATIC		.EQ 0
SYM.SC.AUTO			.EQ 2
SYM.SC.REGISTER		.EQ 4
SYM.SC.EXTERN		.EQ 6
SYM.Cnt			.EQ 3					Array [] cnt / f param cnt
SYM.SizeOf		.EQ 4
SYM.Addr		.EQ 6
SYM.BitO		.EQ 8
SYM.BitW		.EQ 9

SYM.TypeID		.EQ 10
SYM.ScopeID		.EQ 12

SYM.A1			.EQ 14
SYM.A2			.EQ 16
SYM.A3			.EQ 18
*
SYM				.EQ 20
*--------------------------------------
SCOPE.ID		.EQ 0
SCOPE.LocalPtr	.EQ 2
SCOPE.ParamSize	.EQ 3
SCOPE.FrameSize	.EQ 4
SCOPE.State		.EQ 5
*
SCOPE			.EQ 6
*--------------------------------------
STMT.KW			.EQ 0
STMT.TERM		.EQ 1					'}' or ';'
STMT.MemPtr		.EQ 2
STMT.pMEM		.EQ 3					switch/case
*
STMT			.EQ 5
*--------------------------------------

*--------------------------------------
* Zero Page Segment, up to 32 bytes
*--------------------------------------
				.DUMMY
				.OR ZPBIN
ZS.START
ZPPtr1			.BS 2
ZPPtr2			.BS 2
ZPPtr3			.BS 2
ArgIndex		.BS 1
bPass2			.BS 1

ZPCCCode		.BS 2
ZPCCConst		.BS 2
ZPCCData		.BS 2

ScopePtr		.BS 1
ScopeStk		.BS 2

StmtPtr			.BS 1
StmtStk			.BS 2

ZP.pLineBuf		.BS 2
ZP.pLookup		.BS 2
ZP.pTypeBuf		.BS 2
ZP.pLSymBuf		.BS 2
ZP.pRSymBuf		.BS 2


StmtPreOp		.BS 1

ExpState		.BS 1
ExpState.VinReg		.EQ $10
ExpState.AonStack	.EQ $20
ExpState.AinPTR		.EQ $40
ExpState.VonStack	.EQ $80

ZS.END			.ED
*--------------------------------------
*			File Header (16 Bytes)
*--------------------------------------
CS.START		cld
				jmp (.1,x)
				.DA #$61				6502,Level 1 (65c02)
				.DA #2					BIN Layout Version 2
				.DA #0
				.DA #0
				.DA CS.END
				.DA ID.END
				.DA DS.END
				.DA #256				Stack Size
				.DA #ZS.END-ZS.START	Zero Page Size
*--------------------------------------
* Relocation Table
*--------------------------------------
.1				.DA CS.INIT
				.DA CS.RUN
				.DA CS.SIG
				.DA	CS.QUIT
*--------------------------------------
L.MSG.GREETINGS	.DA MSG.GREETINGS
L.MSG.USAGE		.DA MSG.USAGE
L.MSG.READING	.DA MSG.READING
L.MSG.LINKING	.DA MSG.LINKING
L.MSG.LINKING2	.DA MSG.LINKING2
L.MSG.GENERATING .DA MSG.GENERATING
				.DO _DBG_STK=1
L.MSG.DEBUG.STK	.DA MSG.DEBUG.STK
				.FIN
				.DO _DBG_SYM=1
L.MSG.DEBUG.SYMN	.DA MSG.DEBUG.SYMN
L.MSG.DEBUG.SYMU	.DA MSG.DEBUG.SYMU
L.MSG.DEBUG.SYMS	.DA MSG.DEBUG.SYMS
L.MSG.DEBUG.SYMG	.DA MSG.DEBUG.SYMG
L.MSG.DEBUG.SYML	.DA MSG.DEBUG.SYML
L.MSG.DEBUG.SYMR	.DA MSG.DEBUG.SYMR
L.MSG.DEBUG.LBLN	.DA MSG.DEBUG.LBLN
L.MSG.DEBUG.LBLS    .DA MSG.DEBUG.LBLS
				.FIN
				.DO _DBG_SCOPE=1
L.MSG.DEBUG.SCIN	.DA MSG.DEBUG.SCIN
L.MSG.DEBUG.SC		.DA MSG.DEBUG.SC
L.MSG.DEBUG.SCOUT	.DA MSG.DEBUG.SCOUT
				.FIN
				.DO _DBG_OUT=1
L.MSG.DEBUG.CSOUT	.DA MSG.DEBUG.CSOUT
L.MSG.DEBUG.OUT	.DA MSG.DEBUG.OUT
				.FIN
L.MSG.VERBOSE	.DA MSG.VERBOSE
L.MSG.RTSTK		.DA MSG.RTSTK
L.MSG.ERROR		.DA MSG.ERROR
L.MSG.SUMMARY	.DA MSG.SUMMARY
L.MSG.NOMAIN	.DA MSG.NOMAIN
L.MSG.ALLDONE	.DA MSG.ALLDONE
L.ENV.INCLUDE	.DA ENV.INCLUDE
L.ENV.LIB		.DA ENV.LIB
L.LIB.O			.DA LIB.O
*--------------------------------------
L.CC.AOPS		.DA CC.AOPS
L.CC.PREOPS		.DA CC.PREOPS
L.CC.POSTOPS	.DA CC.POSTOPS
L.CC.BOPS		.DA CC.BOPS
L.CC.DIRS		.DA CC.DIRS
L.CC.KW			.DA CC.KW
L.CC.KW2.IF		.DA CC.KW2.IF
L.CC.KW2.DO		.DA CC.KW2.DO
L.CC.SCSPEC		.DA CC.SCSPEC
L.CC.TYPEQUAL	.DA CC.TYPEQUAL
L.CC.TYPESPEC	.DA CC.TYPESPEC
L.CC.TYPES		.DA CC.TYPES
*--------------------------------------
J.CC.DIRS		.DA DIR.DEFINE
				.DA DIR.INCLUDE
				.DA DIR.IFDEF
				.DA DIR.IFNDEF
DIR.ELSE.ID		.EQ *-J.CC.DIRS
				.DA DIR.ELSE
				.DA DIR.ENDIF
*--------------------------------------
J.CC.PREOPS		.DA EXP.Ref
				.DA EXP.Deref
				.DA EXP.Abs
				.DA EXP.Negate
				.DA EXP.lNot
				.DA EXP.bNot
				.DA EXP.PreInc
				.DA EXP.PreDec
*--------------------------------------
J.CC.POSTOPS	.DA EXP.PostInc
				.DA EXP.PostDec
				.DA EXP.Idx
				.DA EXP.SU
				.DA EXP.pSU
*--------------------------------------
J.CC.KW			.DA KW.IF
				.DA KW.WHILE
KW.ELSE.ID		.EQ *-J.CC.KW
				.DA KW.ELSE
				.DA KW.DO
				.DA KW.FOR
KW.SWITCH.ID	.EQ *-J.CC.KW
				.DA KW.SWITCH
				.DA KW.CASE
				.DA KW.DEFAULT
				.DA KW.BREAK
				.DA KW.CONTINUE
				.DA KW.RETURN
				.DA KW.SIZEOF
*--------------------------------------
J.CC.KW.END		.DA KW.IF.END
				.DA KW.WHILE.END
				.DA KW.ELSE.END
				.DA KW.DO.END
				.DA KW.FOR.END
				.DA KW.SWITCH.END
*--------------------------------------
J.CC.SCSPEC		.DA DECL.AUTO
				.DA DECL.REGISTER
				.DA DECL.STATIC
				.DA DECL.EXTERN
				.DA DECL.TYPEDEF
*--------------------------------------
J.CC.TYPEQUAL	.DA TYPE.CONST
				.DA TYPE.VOLATILE
				.DA TYPE.RESTRICT
J.CC.TYPESPEC	.DA TYPE.STRUCT
				.DA TYPE.UNION
				.DA TYPE.ENUM
				.DA TYPE.SIGNED
				.DA TYPE.UNSIGNED
				.DA TYPE.SHORT
J.CC.TYPES		.DA TYPE.VOID
				.DA TYPE.CHAR
				.DA TYPE.INT
				.DA TYPE.LONG
				.DA TYPE.FLOAT
*--------------------------------------
J.CC.UTYPES		.DA TYPE.UCHAR
				.DA TYPE.UINT
				.DA TYPE.ULONG
J.CC.STYPES		.DA TYPE.SCHAR
				.DA TYPE.SINT
				.DA TYPE.SLONG
*--------------------------------------
L.CC.MAIN		.DA CC.MAIN
L.CC.LIBC		.DA CC.LIBC
*--------------------------------------
L.PCC.FH		.DA PCC.FH
L.PCC.DEBUG		.DA PCC.DEBUG
L.PCC.SLEEP		.DA PCC.SLEEP
L.PCC.SF		.DA PCC.SF
L.PCC.SL		.DA PCC.SL
L.PCC.SS		.DA PCC.SS
L.PCC.SR		.DA PCC.SR
L.PCC.BS		.DA PCC.BS
L.PCC.BR		.DA PCC.BR
L.PCC.ADDLOCAL	.DA PCC.ADDLOCAL
L.PCC.REMLOCAL	.DA PCC.REMLOCAL
L.PCC.SetRetValue	.DA PCC.SetRetValue
L.PCC.8to16		.DA PCC.8to16
L.PCC.JmpOnYA	.DA PCC.JmpOnYA
L.PCC.Pop16		.DA PCC.Pop16
L.PCC.TestZero1	.DA PCC.TestZero1
L.PCC.TestZero2	.DA PCC.TestZero2
L.PCC.TestZeroX	.DA PCC.TestZeroX
L.PCC.TestnZero1	.DA PCC.TestnZero1
L.PCC.TestnZero2	.DA PCC.TestnZero2
L.PCC.TestnZeroX	.DA PCC.TestnZeroX
L.PCC.PushLAddrH	.DA PCC.PushLAddrH
L.PCC.PushLAddrL	.DA PCC.PushLAddrL
L.PCC.GetIAddrY	.DA PCC.GetIAddrY
L.PCC.GetIAddrA .DA PCC.GetIAddrA
L.PCC.PushIAddr	.DA PCC.PushIAddr
L.PCC.PushUAddr	.DA PCC.PushUAddr
L.PCC.GetLAddr1	.DA PCC.GetLAddr1
L.PCC.GetIAddr1	.DA PCC.GetIAddr1
L.PCC.GetUAddr1	.DA PCC.GetUAddr1
L.PCC.PopAddr1	.DA PCC.PopAddr1
L.PCC.PopValue1	.DA PCC.PopValue1
L.PCC.PopValue2	.DA PCC.PopValue2
L.PCC.PopValueX	.DA PCC.PopValueX
L.PCC.GetLAddr2	.DA PCC.GetLAddr2
L.PCC.GetIAddr2	.DA PCC.GetIAddr2
L.PCC.GetUAddr2	.DA PCC.GetUAddr2
L.PCC.PopAddr2	.DA PCC.PopAddr2
L.PCC.Deref2	.DA PCC.Deref2
L.PCC.PushDeref2	.DA PCC.PushDeref2
L.PCC.GetValueA		.DA PCC.GetValueA
L.PCC.GetValueYA	.DA PCC.GetValueYA
L.PCC.PushValueY	.DA PCC.PushValueY
L.PCC.Inc1		.DA PCC.Inc1
L.PCC.Inc2		.DA PCC.Inc2
L.PCC.Inc4		.DA PCC.Inc4
L.PCC.Dec1		.DA PCC.Dec1
L.PCC.Dec2		.DA PCC.Dec2
L.PCC.Dec4		.DA PCC.Dec4
*--------------------------------------
L.PCC.bBOPS		.DA PCC.BOPS.bMUL
				.DA PCC.BOPS.bDIV
				.DA PCC.BOPS.bMOD
				.DA PCC.BOPS.ADD
				.DA PCC.BOPS.SUB
				.DA PCC.BOPS.SHL
				.DA PCC.BOPS.SHR
				.DA PCC.BOPS.L
				.DA PCC.BOPS.G
				.DA PCC.BOPS.LE
				.DA PCC.BOPS.GE
				.DA PCC.BOPS.EQ
				.DA PCC.BOPS.NE
				.DA PCC.BOPS.LAND
				.DA PCC.BOPS.AND
				.DA PCC.BOPS.LOR
				.DA PCC.BOPS.OR
				.DA PCC.BOPS.EOR
*--------------------------------------
L.PCC.cBOPS		.DA PCC.BOPS.cMUL
				.DA PCC.BOPS.cDIV
				.DA PCC.BOPS.cMOD
				.DA PCC.BOPS.ADD
				.DA PCC.BOPS.SUB
				.DA PCC.BOPS.SHL
				.DA PCC.BOPS.SHR
				.DA PCC.BOPS.L
				.DA PCC.BOPS.G
				.DA PCC.BOPS.LE
				.DA PCC.BOPS.GE
				.DA PCC.BOPS.EQ
				.DA PCC.BOPS.NE
				.DA PCC.BOPS.LAND
				.DA PCC.BOPS.AND
				.DA PCC.BOPS.LOR
				.DA PCC.BOPS.OR
				.DA PCC.BOPS.EOR
*--------------------------------------
				.DA 0
*--------------------------------------
* Called once at process creation
* Put code for loading LIB here
*--------------------------------------
CS.INIT			clc
CS.INIT.RTS		rts
*--------------------------------------
* Called until exit with CS
* if RUN exits with CC, RN entered again
*--------------------------------------
CS.RUN			>SS
				>PUSHW L.MSG.GREETINGS
				>PUSHW A2osX.KVER
				>PUSHBI 2
				>LIBC PrintF
				>SR
				bcs CS.INIT.RTS

				lda #CC.pInFiles
				>STA.G CC.pInFiles

				lda #CC.LineCnts
				>STA.G CC.LineCnts

				>LDYAI 256
				>LIBC Malloc
				bcs CS.INIT.RTS

				>STYA.G CC.pLineBuf

				jsr CS.RUN.ARGS
				bcs CS.INIT.RTS

				jsr CORE.Init
				bcs CS.INIT.RTS
*--------------------------------------
				jsr CODE.Init
				bcs CS.INIT.RTS

				jsr FIO.FOpen1st
				bcs CS.INIT.RTS

.1				jsr CORE.CompileFile

				cmp #MLI.E.EOF
				bne .9

				jsr FIO.FClose
				bne .1

				jsr PrintSummary
				bcs .99

				jsr CC.Link
				bcs .99

				jsr CC.Link.CheckMain
				bcs .99
*--------------------------------------
				dec bPass2

				jsr CORE.Reset
				bcs .99

				jsr FIO.FCreate
				bcs .99

				jsr CODE.Init
				bcs .99

				jsr FIO.FOpen1st
				bcs .99

.2				jsr CORE.CompileFile

				cmp #MLI.E.EOF
				bne .9

				jsr FIO.FClose
				bne .2

				jsr PrintSummary
				bcs .99
*--------------------------------------
				>LDYA L.MSG.ALLDONE
				>LIBC PutS

				lda #0					Exit Code = Success
				sec
				rts

.9				pha

				jsr PrintErrorMsg

				pla

				tay
				beq *

				sec
.99				rts
*--------------------------------------
CS.RUN.ARGS		inc ArgIndex

				lda ArgIndex
				>KAPI ArgV
				bcs .8

				>STYA ZPPtr1
				lda (ZPPtr1)
				cmp #'-'
				bne .4

				ldy #1
				lda (ZPPtr1),y
				beq .90

				ldx #OptionVars-OptionList-1

.1				cmp OptionList,x
				beq .2

				dex
				bpl .1

				bra .90

.2				cpx #2					LIB
				bcc .3

				inc ArgIndex

				lda ArgIndex
				>KAPI ArgV
				bcs .90

				jsr FIO.LoadLIB.o
				bcc CS.RUN.ARGS

				rts

.3				ldy OptionVars,x
				lda #$ff
				sta (pData),y
				bra CS.RUN.ARGS

.4				>LDA.G CC.pInFileName+1
				bne .5

				>LDYA ZPPtr1
				>STYA.G CC.pInFileName
				bra CS.RUN.ARGS

.5				>LDA.G CC.pOutFileName+1
				bne .90

				>LDYA ZPPtr1
				>STYA.G CC.pOutFileName
				bra CS.RUN.ARGS

.8				>LDA.G CC.pInFileName+1
				beq .90

				>LDA.G CC.pOutFileName+1
				beq .90

				clc
.9				rts

.90				>LDYA L.MSG.USAGE
				>LIBC PutS

				lda #E.SYN
				sec
				rts
*--------------------------------------
CS.SIG			sec
				rts
*--------------------------------------
CS.QUIT			jsr CODE.Quit
				jsr CORE.Quit

.1				>LDA.G LibCount
				beq .6

				dec
				sta (pData),y

				clc
				asl
				adc #pLibOs
				tay
				lda (pData),y
				pha
				iny
				lda (pData),y
				ply
				>LIBC Free
				bra .1

.6				>LDYA.G CC.pLineBuf
				cmp #0
				beq .8

				>LIBC Free

.8				clc
				rts
*--------------------------------------
PrintVerboseMsg
				.DO _DBG_STK=1
			jsr CC.DEBUGSTK
				.FIN

				.DO _DBG_SCOPE=1
			>SS
			>PUSHW L.MSG.DEBUG.SC
			jsr SCOPE.Push

			lda ScopePtr
			>PUSHA

			tay
			iny
			iny
			>PUSHB (ScopeStk),y
			iny
			>PUSHB (ScopeStk),y

			>PUSHBI 5
			>LIBC PrintF
			>SR

				.FIN

				>SS
*				ldy #S.PS.pStdOut+1
*				jsr A2osX.GetPSy
*				>PUSHA
*				dey
*				jsr A2osX.GetPSy
*				>PUSHA

				>PUSHW L.MSG.VERBOSE

				>LDA.G CC.LineCnts
				tay
				iny
				lda (pData),y
				>PUSHA
				dey
				lda (pData),y
				>PUSHA
				>PUSHW.G CC.pLineBuf
				>PUSHBI 4
				>LIBC PrintF
				>SR

				rts
*--------------------------------------
PrintErrorMsg	>LDYA.G CC.pDefineBuf

				cmp #0
				beq .10

				>LDYA.G CC.SaveDefine
				>STYA ZP.pLineBuf

.10				>LDA.G bVerbose
				bmi .1

				jsr PrintVerboseMsg

.1				lda ZP.pLineBuf

				sec
				>SBC.G CC.pLineBuf
				tax

				>LDYA.G CC.pLineBuf
				>STYA ZP.pLineBuf

				txa
				beq .3

				ldy #0
				lda #'-'

.2				sta (ZP.pLineBuf),y
				iny
				dex
				bne .2

				txa

.3				sta (ZP.pLineBuf),y

.8				>SS
*				ldy #S.PS.pStdErr+1
*				ldy #S.PS.pStdOut+1
*				jsr A2osX.GetPSy
*				>PUSHA
*				dey
*				jsr A2osX.GetPSy
*				>PUSHA

				>PUSHW L.MSG.ERROR
				>PUSHW ZP.pLineBuf
				>PUSHBI 2
				>LIBC PrintF
				>SR
				rts
*--------------------------------------
PrintSummary	>SS
				>PUSHW L.MSG.SUMMARY
				lda ZPCCCode+1
				sec
				sbc #$20
				>PUSHA
				>PUSHB ZPCCCode
				>PUSHW ZPCCConst
				>PUSHW ZPCCData
				>PUSHBI 6
				>LIBC PrintF
				>SR
				rts
*--------------------------------------
				.DO _DBG_STK=1
CC.DEBUGSTK	php
			pha
			phx
			phy
			>SS
			>PUSHW L.MSG.DEBUG.STK
			>PUSHB pStack+1
			txa
			>PUSHA
			>PUSHW pBase
			>PUSHBI 4
			>LIBC PrintF
			>SR
			ply
			plx
			pla
			plp
			rts
				.FIN
*--------------------------------------
				.INB usr/src/bin/cc.s.code
				.INB usr/src/bin/cc.s.core
				.INB usr/src/bin/cc.s.decl
				.INB usr/src/bin/cc.s.dir
				.INB usr/src/bin/cc.s.exp
				.INB usr/src/bin/cc.s.f
				.INB usr/src/bin/cc.s.fio
				.INB usr/src/bin/cc.s.kw
				.INB usr/src/bin/cc.s.link
				.INB usr/src/bin/cc.s.scope
				.INB usr/src/bin/cc.s.stmt
				.INB usr/src/bin/cc.s.sym
				.INB usr/src/bin/cc.s.tag
				.INB usr/src/bin/cc.s.type
*--------------------------------------
CS.END			.EQ *
*--------------------------------------
* Initialized DATA
*--------------------------------------
MSG.GREETINGS	.CZ "\r\nA2osX C Compiler %d.%02d\r\n\r\n"
MSG.USAGE		.CS "Usage : CC <option> srcfile.c dstfile\r\n"
				.CS "   -V : Verbose output\r\n"
				.CZ "   -L Libname1 -L Libname2 ...\r\n"
MSG.READING		.CZ "*** Reading file: %s\r\n"
MSG.LINKING		.CZ "*** Linking..."
MSG.LINKING2	.CZ "*** %H:%H:%18s T/Q=%h/%h, SC=%h, Def=%h, SizeOf=%H, @=%H\r\n"
MSG.GENERATING	.CZ "*** Generating: %s\r\n"
				.DO _DBG_STK=1
MSG.DEBUG.STK	.CZ "pStack=%H, pBase=%H\r\n"
				.FIN
				.DO _DBG_SYM=1
MSG.DEBUG.SYMN	.CZ "New ID=%H,T=%h,Q=%b,SC=%h,Cnt=%h,SizeOf=%H,ScopeID=%H,@=%H\r\n"
MSG.DEBUG.SYMU	.CZ "Upd ID=%H,T=%h,Q=%b,SC=%h,Cnt=%h,SizeOf=%H,ScopeID=%H,@=%H\r\n"
MSG.DEBUG.SYMS	.CZ "Sto ID=%H,T=%h,Q=%b,SC=%h,Cnt=%h,SizeOf=%H,ScopeID=%H,@=%H\r\n"
MSG.DEBUG.SYMG	.CZ "Get ID=%H,T=%h,Q=%b,SC=%h,Cnt=%h,SizeOf=%H,ScopeID=%H,@=%H\r\n"
MSG.DEBUG.SYML	.CZ "Llk ID=%H,T=%h,Q=%b,SC=%h,Cnt=%h,SizeOf=%H,ScopeID=%H,@=%H\r\n"

MSG.DEBUG.SYMR	.CZ "Rlk ID=%H,T=%h,Q=%b,SC=%h,Cnt=%h,SizeOf=%H,ScopeID=%H,@=%H\r\n"

MSG.DEBUG.LBLN	.CZ "New (%s) ID=%H[%H],T=%h,Q=%b,SC=%h\r\n"
MSG.DEBUG.LBLS	.CZ "Sto ID=%H[%H],T=%h,Q=%b,SC=%h\r\n"
				.FIN
				.DO _DBG_SCOPE=1
MSG.DEBUG.SCIN	.CZ "Scope { %H (%h:%h:%h)\r\n"
MSG.DEBUG.SC	.CZ "Scope = %H (%h:%h:%h)\r\n"
MSG.DEBUG.SCOUT	.CZ "Scope } %H (%h:%h:%h) -> "
				.FIN
				.DO _DBG_OUT=1
MSG.DEBUG.CSOUT	.CZ "\r\n%H-"
MSG.DEBUG.OUT	.CZ "%h"
				.FIN
MSG.VERBOSE		.CZ "%5D> %s\r\n"
MSG.RTSTK		.CZ "<pBase=%H, pVar=%H, (pVar)=%H, pStack=%H>\r\n"
MSG.ERROR		.CZ "       %s^\r\n"
MSG.SUMMARY		.CZ "*** Compilation OK : Code size=%5D, Const size=%5D, Data size=%5D\r\n"
MSG.NOMAIN		.CZ "*** No 'main()' function defined."
MSG.ALLDONE		.CZ "*** All Done."
*--------------------------------------
OptionList		.AS "VvLl"
OptionVars		.DA #bVerbose,#bVerbose
*--------------------------------------
ENV.INCLUDE		.AZ "INCLUDE"
ENV.LIB			.AZ "LIB"
LIB.O			.AZ ".o"
*--------------------------------------
CC.EscChars		.AS "abefnrtv"
				.HS 5C27223F			\'"?
CC.EscChars.Cnt	.EQ *-CC.EscChars
CC.EscCodes		.HS 07081B0C0A0D090B
				.HS 5C27223F
*--------------------------------------
CC.OPChars		.AS "!~+-*/%=&|^<>["
CC.OPChars.Cnt	.EQ *-CC.OPChars
*--------------------------------------
* Assignment Operators: = += -= *= /= %= <<= >>= &= ^= |=
*--------------------------------------
CC.AOPS			.PS "="
				.PS "+="
				.PS "-="
				.PS "*="
				.PS "/="
				.PS "%="
				.PS "<<="
				.PS ">>="
				.PS "&="
				.PS "^="
				.PS "!="
				.HS 00
*--------------------------------------
* Pre Operators:  & * + - ! ~ ++ --
*--------------------------------------
CC.PREOPS		.PS "&"					ref
				.PS "*"					deref
				.PS "+"					abs
				.PS "-"					negate
				.PS "!"					logical not
				.PS "~"					bitwise not
				.PS "++"				pre increase
				.PS "--"				pre decrease
				.HS 00
*--------------------------------------
* Post Operators: ++ --
*--------------------------------------
CC.POSTOPS		.PS "++"
				.PS "--"
				.PS "["
				.PS "."
				.PS "->"
				.HS 00
*-- Binary ---- H to L precedence -----
* Arithmetic Operators: * / %
* Arithmetic Operators: + -
* Shift Operators: << >>
* Relational Operators: < > >= < >= == !=
* Bitwise Operators: & | ^ ~
* Logical Operators: && ||
*--------------------------------------
CC.BOPS			.PS "*"
				.PS "/"
				.PS "%"
				.PS "+"
				.PS "-"
				.PS "<<"
				.PS ">>"
				.PS "<"
				.PS "<="
				.PS ">"
				.PS ">="
				.PS "=="
				.PS "!="
				.PS "&"
				.PS "|"
				.PS "^"
				.PS "&&"
				.PS "||"
				.HS 00
*--------------------------------------
* Reserved Directives:
*--------------------------------------
CC.DIRS			.PS "define"
				.PS "include"
				.PS "ifdef"
				.PS "ifndef"
				.PS "else"
				.PS "endif"
				.HS 00
*--------------------------------------
* Reserved Keywords:
*--------------------------------------
CC.KW			.PS "if"
				.PS "while"
				.PS "else"
				.PS "do"
				.PS "for"
				.PS "switch"
				.PS "case"
				.PS "default"
				.PS "break"
				.PS "continue"
				.PS "return"
				.PS "sizeof"
				.HS 00
CC.KW2.IF		.PS "else"
				.HS 00
CC.KW2.DO		.PS "while"
				.HS 00
*--------------------------------------
CC.SCSPEC		.PS "auto"
				.PS "register"
				.PS "static"
				.PS "extern"
				.PS "typedef"
				.HS 00
*--------------------------------------
CC.TYPEQUAL		.PS "const"				ALL
				.PS "volatile"
				.PS "restrict"
CC.TYPESPEC		.PS "struct"
				.PS "union"
				.PS "enum"
				.PS "signed"			char,int,long
				.PS "unsigned"			char,int,long
				.PS "short"				int
CC.TYPES		.PS "void"
				.PS "char"
				.PS "int"
				.PS "long"
				.PS "float"
				.HS 00
*--------------------------------------
CC.Type2FPU		.DA #FPU.wMUL,#FPU.iMUL,#FPU.uMUL,#FPU.lMUL,#FPU.fMUL
*--------------------------------------
CC.TYPESIZE		.HS 0001010202040405
CC.TYPESIGN		.HS 0000FF00FF00FFFF
*--------------------------------------
CC.MAIN			.AZ "main"
CC.MAIN.DEF		.DA #SYM.T.SINT,#0,#SYM.T.SINT,#0,#SYM.T.UCHAR,#SYM.Q.PPOINTER,0
CC.MAIN.DEF.LEN	.EQ *-CC.MAIN.DEF
*--------------------------------------
CC.LIBC			.PS "chtyp"
				.DA #_ChTyp
				.PS "chmod"
				.DA #_ChMod
				.PS "fstat"
				.DA #_FStat
				.PS "stat"
				.DA #_Stat
				.PS "mkdir"
				.DA #_MKDir
				.PS "mknod"
				.DA #_MKNod
				.PS "mkfifo"
				.DA #_MKFIFO
				.PS "pipe"
				.DA #_Pipe
				.PS "opendir"
				.DA #_OpenDir
				.PS "readdir"
				.DA #_ReadDir
				.PS "closedir"
				.DA #_CloseDir
				.PS "open"
				.DA #_Open
				.PS "close"
				.DA #_Close
				.PS "read"
				.DA #_Read
				.PS "write"
				.DA #_Write
				.PS "chown"
				.DA #_ChOwn
				.PS "fputc"
				.DA #_FPutC
				.PS "putchar"
				.DA #_PutChar
				.PS "getc"
				.DA #_GetC
				.PS "getchar"
				.DA #_GetChar
				.PS "fputs"
				.DA #_FPutS
				.PS "puts"
				.DA #_PutS
				.PS "fgets"
				.DA #_FGetS
				.PS "ungetc"
				.DA #_UngetC
				.PS "fopen"
				.DA #_FOpen
				.PS "fclose"
				.DA #_FClose
				.PS "fread"
				.DA #_FRead
				.PS "fwrite"
				.DA #_FWrite
				.PS "fflush"
				.DA #_FFlush
				.PS "fseek"
				.DA #_FSeek
				.PS "ftell"
				.DA #_FTell
				.PS "feof"
				.DA #_FEOF
				.PS "remove"
				.DA #_Remove
				.PS "rename"
				.DA #_Rename
				.PS "printf"
				.DA #_PrintF
				.PS "fprintf"
				.DA #_FPrintF
				.PS "sprintf"
				.DA #_SPrintF
				.PS "scanf"
				.DA #_ScanF
				.PS "fscanf"
				.DA #_FScanF
				.PS "sscanf"
				.DA #_SScanF
*				.PS "$50"
*				.DA #0
*				.PS "$52"
*				.DA #0
*				.PS "$54"
*				.DA #0
*				.PS "$56"
*				.DA #0
*				.PS "$58"
*				.DA #0
*				.PS "$5A"
*				.DA #0
*				.PS "$5C"
*				.DA #0
				.PS "setattr"
				.DA #_SetAttr
*				.PS "mount"
*				.DA #0
*				.PS "umount"
*				.DA #0
*				.PS "loadstkobj"
*				.DA #0
*				.PS "getstkobj"
*				.DA #0
*				.PS "shift"
*				.DA #0
*				.PS "argv"
*				.DA #0
*				.PS "argvDup"
*				.DA #0
*				.PS "geterrmsg"
*				.DA #0
				.PS "atof"
				.DA #_AToF
				.PS "atoi"
				.DA #_AToI
				.PS "atol"
				.DA #_AToL
				.PS "strtof"
				.DA #_StrToF
				.PS "strtol"
				.DA #_StrToL
				.PS "strtoul"
				.DA #_StrToUL
				.PS "realpath"
				.DA #_RealPath
				.PS "expand"
				.DA #_Expand
				.PS "strlen"
				.DA #_StrLen
				.PS "strcpy"
				.DA #_StrCpy
				.PS "strcat"
				.DA #_StrCat
				.PS "strdup"
				.DA #_StrDup
				.PS "strupr"
				.DA #_StrUpr
				.PS "strlwr"
				.DA #_StrLwr
				.PS "strcmp"
				.DA #_StrCmp
				.PS "strcasecmp"
				.DA #_StrCaseCmp
*				.PS "getdevbyname"
*				.DA #0
*				.PS "getdevstatus"
*				.DA #0
*				.PS "mkdev"
*				.DA #0
*				.PS "ioctl"
*				.DA #0
*				.PS "loadlib"
*				.DA #0
*				.PS "unloadlib"
*				.DA #0
*				.PS "loaddrv"
*				.DA #0
*				.PS "insdrv"
*				.DA #0
				.PS "execl"
				.DA #_ExecL
*				.PS "execv"
*				.DA #0
				.PS "fork"
				.DA #_Fork
				.PS "kill"
				.DA #_Kill
*				.PS "loadfile"
*				.DA #0
*				.PS "loadtxtfile"
*				.DA #0
*				.PS "filesearch"
*				.DA #0
*				.PS "getmemstat"
*				.DA #0
*				.PS "strvnew"
*				.DA #0
*				.PS "strvset"
*				.DA #0
*				.PS "strvget"
*				.DA #0
*				.PS "strvfree"
*				.DA #0
				.PS "putenv"
				.DA #_PutEnv
				.PS "setenv"
				.DA #_SetEnv
				.PS "getenv"
				.DA #_GetEnv
				.PS "unsetenv"
				.DA #_UnsetEnv
				.PS "time"
				.DA #_Time
				.PS "strftime"
				.DA #_StrFTime
				.PS "ptime2time"
				.DA #_PTime2Time
				.PS "ctime2time"
				.DA #_CTime2Time
				.PS "md5"
				.DA #_MD5
				.PS "md5init"
				.DA #_MD5Init
				.PS "md5update"
				.DA #_MD5Update
				.PS "md5finalize"
				.DA #_MD5Finalize
				.PS "getpwuid"
				.DA #_GetPWUID
				.PS "getpwname"
				.DA #_GetPWName
				.PS "putpw"
				.DA #_PutPW
				.PS "getgrpgid"
				.DA #_GetGRGID
				.PS "getgrpname"
				.DA #_GetGRName
				.PS "putgr"
				.DA #_PutGR
				.PS "malloc"
				.DA #_Malloc
				.PS "realloc"
				.DA #_Realloc
				.PS "free"
				.DA #_Free
*--------------------------------------
				.PS "logf"
				.DA #_LogF
				.PS "sqrtf"
				.DA #_SqrtF
				.PS "expf"
				.DA #_ExpF
				.PS "cosf"
				.DA #_CosF
				.PS "sinf"
				.DA #_SinF
				.PS "tanf"
				.DA #_TanF
				.PS "atanf"
				.DA #_AtanF
				.PS "powf"
				.DA #_PowF
				.PS "lrintf"
				.DA #_lrintf
				.DA #0
*--------------------------------------
				.INB usr/src/bin/cc.s.pcc
*--------------------------------------
ID.END			.EQ *
*--------------------------------------
				.DUMMY
				.OR 0

PathBuf			.BS MLI.MAXPATH+1

bVerbose		.BS 1

LibCount		.BS 1
hLibNs			.BS LIBS.MAX
pLibOs			.BS LIBS.MAX*2

CC.pInFileName	.BS 2

CC.pInFiles		.BS 1
				.BS 1					for inc inc
				.BS FILES.MAX*2

CC.LineCnts		.BS 1
				.BS 1					for inc inc
				.BS FILES.MAX*2

CC.pOutFileName	.BS 2
CC.pOutFile		.BS 2

CC.pLineBuf		.BS 2

CC.CmdSave		.BS 1

CC.pDefineBuf	.BS 2

CC.pDefines		.BS 2
CC.SaveDefine	.BS 2

CC.DirState		.BS 1
CC.DirDepth		.BS 1

CC.pSyms		.BS 2
CC.pTags		.BS 2
CC.pTypes		.BS 2

CC.TypeID		.BS 2
CC.ScopeID		.BS 2

CC.bInitCode	.BS 1
*--------------------------------------
CC.pLSymBuf		.BS 2
CC.LSymID		.BS 2
CC.LSymIDSave	.BS 2
CC.ArgBuf		.BS SYM

CC.Label		.BS 3					_X\0
CC.LabelID		.BS 2
CC.LabelBuf		.BS SYM

DS.pRSymBuf		.BS 2
DS.RSymID		.BS 2

DS.END			.ED
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s
ASM
