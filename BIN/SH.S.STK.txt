NEW
  AUTO 3,1
*--------------------------------------
* stack+8  		old InputBuf
* stack+6  		old InputBufPtr
* stack+5  		old ARGC
* stack+3       old pARGV
* stack+1  		new pCode
* stack			CMD
*--------------------------------------
STK.PushCode	jsr CORE.ArgVDup		Y,A = ArgV
				bcs .9
				
				lda #10					ZPTmpW = new ArgV, X = Arg Count
				jsr STK.CheckA
				bcs .9

				>LDYA ZPInputBuf
				jsr STK.PushYA

				jsr STK.PushInputBufPtr

				ldy #S.PS.ARGC
				jsr A2osX.GetPSy
				jsr STK.PushA			old ARGC

				ldy #S.PS.pARGV
				jsr A2osX.GetPSy
				jsr STK.PushA			old ARGV

				ldy #S.PS.pARGV+1
				jsr A2osX.GetPSy
				jsr STK.PushA

				ldy #S.PS.ARGC
				txa						X = Arg Count
				dec 					Skip ARG0 in count
				jsr A2osX.SetPSy

				lda ZPTmpW
				ldy	#S.PS.pARGV
				jsr A2osX.SetPSy		new pARGV
				lda ZPTmpW+1
				iny
				jsr A2osX.SetPSy

				>LDYA.G CORE.pNewCode
				>STYA ZPInputBuf
				>STYA ZPInputBufPtr

				jmp STK.PushYA

.9				rts
*--------------------------------------
STK.PopCode		jsr STK.PopFree			Code buffer

				jsr GetArgV
				>LIBC Free			ArgV buffer

				jsr STK.PopA
				ldy #S.PS.pARGV+1
				jsr A2osX.SetPSy

				jsr STK.PopA
				ldy #S.PS.pARGV
				jsr A2osX.SetPSy

				jsr STK.PopA
				ldy #S.PS.ARGC
				jsr A2osX.SetPSy

				jsr STK.PopYA
				>STYA ZPInputBufPtr

				jsr STK.PopYA
				>STYA ZPInputBuf

				ldy #S.PS.ERRNO
				jsr A2osX.GetPSy

				cmp #1

				rts
*--------------------------------------
STK.PopCtx		jsr STK.PopA

STK.PopCtxA		and #$3F
				cmp #C.IF
				beq .8					IF : Nothing

				ldx #2
				cmp #C.WHILE			WHILE : One Ptr = 2 bytes
				beq STK.PopX

				cmp #C.SWITCH			SWITCH : pValue
				beq .2

				ldx #1
				cmp #C.CASE				CASE : C.CASE + pValue
				beq .1

				cmp #C.FOR
				beq .3

				cmp #C.DEFAULT			DEFAULT : C.DEFAULT + pValue
				bne .9

.1				jsr STK.PopX

.2				jsr STK.PopFree

.8				clc
				rts
*--------------------------------------
.3				jsr STK.PopA			Get FOR sub cmd
				beq .4					FOR List

				jsr STK.PopFree			pVARNAME

				jsr STK.PopFClose		pFILE/pPIPE

				ldx #2					CmdPtr
				bra STK.PopX
*--------------------------------------
.4				jsr STK.PopFree			pVARNAME

				jsr STK.PopFClose		pFILE/pPIPE

				ldx #4					ListPtr,CmdPtr
				bra STK.PopX

.9				lda #E.STACKERROR
				sec
				rts
*--------------------------------------
STK.PopX		txa
				clc
				adc StkPtr
				sta StkPtr

				rts
*--------------------------------------
STK.CheckA		ldy StkPtr
				beq .8

				cmp StkPtr
				bcs .9

.8				clc
				rts

.9				lda #E.STKOVERFLOW
*				sec
				rts
*--------------------------------------
CORE.PushVarName
				>LDYA ZPVarNamePtr
				>LIBC StrDup
				bcc STK.PushYA

				rts
*--------------------------------------
STK.PushInputBufPtr
				>LDYA ZPInputBufPtr
*--------------------------------------
STK.PushYA		phy
				jsr STK.PushA
				bcc .1

				ply
				rts

.1				pla
*--------------------------------------
STK.PushA		ldy StkPtr
				dey
				beq .9

				sty StkPtr
				sta (pStk),y

				clc
				rts

.9				lda #E.STKOVERFLOW
				sec
				rts
*--------------------------------------
STK.GetCtx		jsr STK.Get
				tax
				bcs .1					no context...

				cmp #$C0+C..			in a call...
				beq .1					CS

				cmp #$C0+C.CALL
				beq .1					CS

				cmp #$C0+C.CLEXEC
				beq .1					CS

				and #$80				get current..
				lsr						becomes parent
				bra .8

.1				lda #$40				...set Parent = true

.8				sta CORE.TestResult

				txa
				rts
*--------------------------------------
STK.PopFClose	jsr STK.PopYA
				bcs .9

				>LIBC FClose

.9				rts
*--------------------------------------
STK.PopFree		jsr STK.PopYA
				bcs .9

				>LIBC Free

.9				rts
*--------------------------------------
STK.PopYA		ldy StkPtr
				beq STK.Error

				lda (pStk),y

				iny
				beq STK.Error

				pha

				lda (pStk),y

				iny
				sty StkPtr
				
				ply

				clc

				rts
*--------------------------------------
STK.PopA		ldy StkPtr
				beq STK.Error

				lda (pStk),y
				inc StkPtr

				clc
				rts
*--------------------------------------
STK.Get			ldy StkPtr
				beq STK.Error

				lda (pStk),y

				clc
				rts

STK.Error		lda #E.STACKERROR
				sec
				rts
*--------------------------------------
STK.GetWAtA		clc
				adc StkPtr
				tay

				lda (pStk),y
				pha
				iny
				lda (pStk),y
				ply
				rts
*--------------------------------------
MAN
SAVE usr/src/bin/sh.s.stk
LOAD usr/src/bin/sh.s
ASM
