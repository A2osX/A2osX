NEW
  AUTO 3,1
*--------------------------------------
STMT.Get		jsr CC.GetCharNB
				jsr CC.IsLetter
				ldx #$ff
				bcc .10

				>LDYA L.CC.PREOPS		++var ?
				jsr CC.LookupOP
				bcs .90

.10				stx StmtPreOp

				jsr SYM.LLookup			var or func() ?
				bcs .99

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				bit #SYM.Q.FUNCTION
				beq .20

				bit StmtPreOp
				bpl .90					++func ????????

				jmp F.CallNoRetV		func( ... );
*--------------------------------------
.20				stz ExpState

				jsr EXP.POSTOPS			var++, var[0]... ?
				bcs .99

				ldx StmtPreOp
				jsr EXP.PREOPS			apply ++var, ....
				bcs .99

				jsr CC.GetCharNB
				bcs .90

				jsr CC.IsEndArg			var++; or ++var; ?
				bcc .8

				jsr CC.LookupAOP		var=, var+= ... ?
				bcs .90

			cpx #0						TOTO : all AOPS
			bne *
*			jsr CODE.DEBUG
				>LDYA ZP.pLSymBuf
				jsr EXP.Eval
				bcs .99

				jsr SYM.GetAddr1
				bcs .99

				jmp SYM.PopValue

.8				clc
				rts

.90				lda #E.CSYN
				sec

.99				rts
*--------------------------------------
STMT.Stmt.END	ldy StmtPtr
				beq STMT.End.8			Global context

				lda (StmtStk),y
				bmi STMT.End.8			local F context
* in an instruction ...
				iny 					STMT.TERM
				lda (StmtStk),y
				cmp #'}'
				beq STMT.End.8			in a STMT...

				cmp #';'				must be ';' on stack....
				bne STMT.End.9
				
				jsr STMT.End
				bcc STMT.Stmt.END

				rts

STMT.End.9		lda #E.STACKERROR
				sec
				rts

STMT.End.8		clc
				rts
*--------------------------------------
STMT.CPStmt.END	ldy StmtPtr
				beq STMT.End.9

				lda (StmtStk),y
				bpl .1

				jmp F.Def.END			local F context

.1				iny
				lda (StmtStk),y			STMT.TERM

				cmp #'}'				must be '}' on stack....
				bne STMT.End.9
*--------------------------------------
STMT.End		ldy StmtPtr				STMT.KW
				lda (StmtStk),y
				tax
				jmp (J.CC.KW.END,x)
*--------------------------------------
STMT.New00		lda #0
				jsr CC.Push				STMT.pMEM
				bcs STMT.New.RTS

*				lda #0
				jsr CC.Push
				bcs STMT.New.RTS

*				lda #0
				jsr CC.Push				STMT.MemPtr
				bcs STMT.New.RTS

STMT.New		lda #';'				STMT.TERM
				jsr CC.Push
				bcs .99

				>LDA.G CC.CmdSave		STMT.KW
				jmp CC.Push

.99
STMT.New.RTS	rts
*--------------------------------------
STMT.SetType	jsr CORE.GetNCharNBNL
				bcs STMT.SetType.9

				ldx #';'

				cmp #'{'
				bne STMT.SetType.1

STMT.SetTypeCP	jsr SCOPE.New
				bcs STMT.New.RTS

				ldx #'}'

STMT.SetType.1	txa
				ldy StmtPtr
				iny						STMT.TERM
				sta (StmtStk),y

				clc
				rts

STMT.SetType.9	lda #E.CSYN
				sec
				rts
*--------------------------------------
STMT.Close		lda StmtPtr
				clc
				adc #STMT.pMEM
				tay
				lda (StmtStk),y
				beq .1
				
				pha
				iny
				lda (StmtStk),y
				ply

				>LIBC Free

.1				ldy StmtPtr				STMT.KW
				iny						STMT.TERM
				lda (StmtStk),y
				cmp #'}'
				bne .2

				jsr SCOPE.Close			{};
				bcs .99

.2				lda StmtPtr
				clc
				adc #STMT
				sta StmtPtr

				clc

.99				rts
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s.stmt
LOAD usr/src/bin/cc.s
ASM
