NEW
  AUTO 3,1
				.LIST OFF
				.OP	65C02
				.OR $2000
				.TF	bin/asm
*---------------------------------------
ASMDBG			.EQ 0
SYMDBG			.EQ 0
EXPDBG			.EQ 0
*---------------------------------------
PAGE.LEN		.EQ 23
DO.MAXDEPTH		.EQ 8
IN.MAXDEPTH		.EQ 4
MA.MAXDEPTH		.EQ 8
*---------------------------------------
				.INB inc/macros.i
				.INB inc/a2osx.i
				.INB inc/mli.i
				.INB inc/mli.e.i
*---------------------------------------
				.DUMMY
				.OR ZPBIN
ZS.START
ZPTmpBuf		.BS 2
ZPLineBuf		.BS 2
ZPLinePtr		.BS 2
ZPSymbolBuf		.BS 2

ZPAMPtr			.BS 2
ZPRegPtr		.BS 2
ZPOpsPtr		.BS 2
ZPOpDefPtr		.BS 2

ZPMacroBuf		.BS 2
ZPMacroBufPtr	.BS 2
ZPMacroArgBuf	.BS 2
ZPMacroArgCnt	.BS 1
ZPMacroCtxID	.BS 1

ZPMacroNextID	.BS 1

DIR.Byte		.BS 1

DIR.Word		.BS 2

*				.BS 2
*				.BS 2

ZS.END			.ED
*---------------------------------------
* Symbols
*---------------------------------------
SYMG.F			.EQ 0
SYMG.F.RW			.EQ %10000000
SYMG.F.EQU			.EQ %01000000
SYMG.F.LOCALS		.EQ %00100000
SYMG.F.FWREF		.EQ %00010000
SYMG.V			.EQ 1 					DWORD
*
SYMG			.EQ 5
*---------------------------------------
SYML.ID			.EQ 0					1..255
SYML.CtxID		.EQ 1					0 if local, !0 if private
SYML.O			.EQ 2					WORD
*
SYML			.EQ 4
*---------------------------------------
ASM.T.AM		.EQ 0
ASM.T.R			.EQ 2
ASM.T.O			.EQ 4
*---------------------------------------
E.SYNTAX.ERROR	.EQ $A0
E.SYM.TOO.LONG	.EQ $A1
E.VAL.TOO.BIG	.EQ $A2
E.LINE.TOO.LONG	.EQ $A3
E.INV.LABEL		.EQ $A4
E.INV.DIR		.EQ $A5
E.ILLEGAL.DIR	.EQ $A6
E.INV.OPCODE	.EQ $A7
E.INV.AM.SYN	.EQ $A8
E.INV.AM		.EQ $A9
E.INV.AM.4.OC	.EQ $AA
E.RANGE			.EQ $AB
E.UNDEF.SYMBOL	.EQ $AC
E.SYMBOL.REDEF	.EQ $AD
E.TOO.MANY.DO	.EQ $AE
E.ELSE.WITHOUT.DO	.EQ $AF
E.TOO.MANY.LOCAL	.EQ $B0
E.MISSING.EXP	.EQ $B1
E.EXP.SYN.ERROR	.EQ $B2
E.MACRO.INV.DEF	.EQ $B3
E.MACRO.TOO.BIG	.EQ $B4
E.MACRO.INV		.EQ $B5
E.MACRO.TOO.MANY	.EQ $B6
*
E.OUT.OF.SYNC	.EQ $B8
E.INV.SYM		.EQ $B9
E.INV.ARGS		.EQ $BA
E.INV.CPU.FILE	.EQ $BC
E.SRC.INV.TYPE	.EQ $BD
E.SRC.TOO.MANY.IN	.EQ $BE
E.SRC.UNEXP.EOF	.EQ $BF
*--------------------------------------
*			File Header (16 Bytes)
*--------------------------------------
CS.START		cld
				jmp (.1,x)
				.DA #$61				6502,Level 1 (65c02)
				.DA #2					BIN Layout Version 2
				.DA #0
				.DA #0
				.DA CS.END
				.DA ID.END
				.DA DS.END
				.DA #0					Stack Size
				.DA #ZS.END-ZS.START	Zero Page Size
*--------------------------------------
* Relocation Table
*--------------------------------------
.1				.DA CS.INIT
				.DA CS.RUN
				.DA CS.SIG
				.DA	CS.QUIT
L.MSG.START		.DA MSG.START
L.MSG.HELP		.DA MSG.HELP
L.MSG.CRLF		.DA MSG.CRLF
L.MSG.OUT0		.DA MSG.OUT0
				.DA MSG.OUT1
				.DA MSG.OUT2
				.DA MSG.OUT3
				.DA MSG.OUT4
L.MSG.EQU0		.DA MSG.EQU0
				.DA MSG.EQU1
				.DA MSG.EQU2
				.DA MSG.EQU3
				.DA MSG.EQU4
L.MSG.PASS		.DA MSG.PASS
L.MSG.LINENUM	.DA MSG.LINENUM
L.MSG.ERROR		.DA MSG.ERROR
L.MSG.SYMBOLS	.DA MSG.SYMBOLS
L.MSG.LSYMBOL	.DA MSG.LSYMBOL
L.MSG.PSYMBOL	.DA MSG.PSYMBOL
L.MSG.SUMMARY	.DA MSG.SUMMARY
L.MSG.STATS		.DA MSG.STATS
L.MSG.END		.DA MSG.END
L.MSG.WARN1		.DA MSG.WARN1
				.DO ASMDBG=1
L.MSG.ASMDBG	.DA MSG.ASMDBG
				.FIN
				.DO SYMDBG=1
L.MSG.SYMDBGN	.DA MSG.SYMDBGN
L.MSG.SYMDBGG	.DA MSG.SYMDBGG
L.MSG.SYMDBGS	.DA MSG.SYMDBGS
L.MSG.SYMDBGU	.DA MSG.SYMDBGU
L.MSG.SYMDBGL	.DA MSG.SYMDBGL
L.MSG.SYMDBGP	.DA MSG.SYMDBGP
L.MSG.SYMDBGAL	.DA MSG.SYMDBGAL
L.MSG.SYMDBGGL	.DA MSG.SYMDBGGL
				.FIN
				.DO EXPDBG=1
L.MSG.EXPDBG	.DA MSG.EXPDBG
				.FIN
L.MSG.SRC.FILE	.DA MSG.SRC.FILE
L.MSG.OBJ.FILE	.DA MSG.OBJ.FILE
L.MSG.CPU.FILE	.DA MSG.CPU.FILE
L.ASM.6502		.DA ASM.6502
L.ASM.CPU.FILE	.DA ASM.CPU.FILE
L.SRC.ACC.F		.DA SRC.ACC.F
L.T.DIRECTIVES	.DA T.DIRECTIVES
J.DIRECTIVES	.DA DIR.AC
				.DA DIR.AS
				.DA DIR.AT
				.DA DIR.AZ
				.DA DIR.BS
				.DA DIR.CS
				.DA DIR.CZ
				.DA DIR.DA
DIR.DO.ID	.EQ *-J.DIRECTIVES
				.DA DIR.DO
				.DA DIR.DU
				.DA DIR.DU
				.DA DIR.ED
DIR.EL.ID	.EQ *-J.DIRECTIVES
				.DA DIR.EL
				.DA DIR.EM
				.DA DIR.EN
				.DA DIR.EP
				.DA DIR.EQ
DIR.FI.ID	.EQ *-J.DIRECTIVES
				.DA DIR.FI
				.DA DIR.HS
				.DA DIR.HX
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.IN
				.DA DIR.LI
				.DA DIR.LI
				.DA DIR.MA
				.DA DIR.OP
				.DA DIR.OR
				.DA DIR.PG
				.DA DIR.PH
				.DA DIR.PS
				.DA DIR.SE
				.DA DIR.TA
				.DA DIR.TF
				.DA DIR.TI
				.DA DIR.US
L.T.LI			.DA T.LI
J.LI			.DA DIR.LI.ON
				.DA DIR.LI.OFF
				.DA DIR.LI.CON
				.DA DIR.LI.COFF
				.DA DIR.LI.MON
				.DA DIR.LI.MOFF
				.DA DIR.LI.XON
				.DA DIR.LI.XOFF
L.T.MODS		.DA T.MODS
J.MODS			.DA EXP.MOD.8.1		#/^<>
				.DA EXP.MOD.8.2
				.DA EXP.MOD.8.3
				.DA EXP.MOD.16.1
				.DA EXP.MOD.16.2
				.DA EXP.MOD.16.3
				.DA EXP.MOD.24.1
				.DA EXP.MOD.24.2
				.DA EXP.MOD.32
J.EXP.OP		.DA EXP.OP.EOR 		^!|&<=>+-*/
				.DA EXP.OP.ORA
				.DA EXP.OP.ORA
				.DA EXP.OP.AND
				.DA EXP.OP.LWR
				.DA EXP.OP.EQU
				.DA EXP.OP.GRT
				.DA EXP.OP.ADD
				.DA EXP.OP.SUB
				.DA EXP.OP.MUL
				.DA EXP.OP.DIV
				.DA 0
*---------------------------------------
CS.INIT			clc
				rts
*--------------------------------------
CS.RUN			>SS
				>PUSHW L.MSG.START
				>PUSHW A2osX.KVER
				>PUSHBI 2
				>LIBC PrintF
				>SR
				
				jsr CS.RUN.ARGS
				bcs .99

				jsr FIO.Init
				bcs .99

				jsr SYM.Init
				bcs .99

				jsr MAC.Init
				bcs .99

				jsr OUT.Init
				bcs .99
*--------------------------------------
				jsr CORE.Pass1Init
				bcs .99

				jsr CORE.ASMFile
				bcs .9

				jsr OUT.PrintStats
				
				jsr CORE.Pass2Init
				bcs .99

				jsr CORE.ASMFile
				bcs .9
				
				jsr SYM.Dump
				bcs .99

				jsr OUT.PrintStats

				>LDYA L.MSG.END
				>LIBC PutS
				lda #0					End of assembly, exit with no error
				sec
				rts

.9				pha
				jsr OUT.PrintLineErr
				pla
				sec
.99				rts
*--------------------------------------
CS.RUN.ARGS		ldy #S.PS.ARGC
				jsr A2osX.GetPSy
				beq .90

.1				inc R1

				lda R1
				>KAPI ArgV
				bcs .8

				>STYA R2

				lda (R2)
				cmp #'-'
				beq .2

				>SS
				>PUSHW R2
				>PUSHWZ				Allocate
				>LIBC RealPath
				>SR
				bcs .99
				
				>STYA.G SRC.pFILENAME
				bra .1

.2				ldy #2
				lda (R2),y
				bne .90

				dey
				lda (R2),y

				jsr SRC.ToUpperCase
				
				cmp #'L'
				bne .3

				lda #$ff
				>STA.G bListAll
				bra .1

.8				>LDA.G SRC.pFILENAME+1
				beq .90

				clc
				rts
				
.90				>LDYA L.MSG.HELP
				>LIBC PutS

				lda #E.INV.ARGS
				sec
.99				rts

.3				cmp #'T'
				bne .90

				inc R1
				lda R1
				>KAPI ArgV
				bcs .90

				>STYA.G DST.pFILENAME
				jmp .1
*--------------------------------------
CS.SIG			sec
				rts
*--------------------------------------
CS.QUIT			jsr MAC.Quit

				jsr SYM.Quit
				
				jsr FIO.Quit

				clc
				rts
*---------------------------------------
				.INB usr/src/bin/asm.s.core
				.INB usr/src/bin/asm.s.dir
				.INB usr/src/bin/asm.s.exp
				.INB usr/src/bin/asm.s.fio
				.INB usr/src/bin/asm.s.mac
				.INB usr/src/bin/asm.s.out
				.INB usr/src/bin/asm.s.src
				.INB usr/src/bin/asm.s.sym
*--------------------------------------
CS.END			.EQ *
*---------------------------------------
T.DIRECTIVES	.PS "AC"
				.PS "AS"
				.PS "AT"
				.PS "AZ"
				.PS "BS"
				.PS "CS"
				.PS "CZ"
				.PS "DA"
				.PS "DO"
				.PS "DU"
				.PS "DUMMY"
				.PS "ED"
				.PS "ELSE"
				.PS "EM"
				.PS "EN"
				.PS "EP"
				.PS "EQ"
				.PS "FIN"
				.PS "HS"
				.PS "HX"
				.PS "IN"
				.PS "INB"
				.PS "INB1"
				.PS "INB2"
				.PS "INB3"
				.PS "INB4"
				.PS "INB5"
				.PS "INB6"
				.PS "INB7"
				.PS "INB8"
				.PS "INB9"
				.PS "LI"
				.PS "LIST"
				.PS "MA"
				.PS "OP"
				.PS "OR"
				.PS "PG"
				.PS "PH"
				.PS "PS"
				.PS "SE"
				.PS "TA"
				.PS "TF"
				.PS "TI"
				.PS "US"
				.HS 00
*---------------------------------------
T.LI			.PS "ON"
				.PS "OFF"
				.PS "CON"				Conditional (DO) listed even if FALSE
				.PS "COFF"
				.PS "MON"				Macro expanded whie Exec
				.PS "MOFF"
				.PS "XON"				eXtra bytes listed if output > 3
				.PS "XOFF"
				.HS 00
*--------------------------------------
T.MODS			.PS "#"
				.PS "/"
				.PS "^"
				.PS "##"
				.PS "//"
				.PS "^^"
				.PS "<"
				.PS "<<"
				.PS ">"
				.HS 00
*--------------------------------------
T.MODS.LEN		.HS 01010102020200000000
*--------------------------------------
DIR.EscChars	.AS "abefnrtv"
				.HS 5C27223F25			\'"?%
DIR.EscChars.L	.EQ *-DIR.EscChars
DIR.EscCodes	.HS 07081B0C0A0D090B
				.HS 5C27223F25
*---------------------------------------
SRC.MOD.RESERVED	.PS "#/^<>"
SRC.EXP.RESERVED	.PS "^!|&<=>+-*/"
SRC.AM.RESERVED		.PS "[](),"
*---------------------------------------
DIR.SYS			.AZ "SYS"
ASM.6502		.AZ "6502"
*---------------------------------------
MSG.START		.CZ "\r\nA2osX-%d.%02d Macro Assembler (S-C MASM 3.1 Dialect)\r\n\r\n"
MSG.HELP		.CS "Usage : ASM <src file> [type TXT ($04) or S-C/BAS ($FA)]\r\n"
				.CS "   -L : Override .LIST (C,M,X)OFF\r\n"
				.CS "   -T <target file> : Override .TF directive"
MSG.CRLF		.CZ "\r\n"
MSG.PASS		.CZ "**** Pass:#%d"
MSG.SRC.FILE	.CZ "**** Reading SRC File:%s"
MSG.OBJ.FILE	.CZ "**** Writing OBJ File:%s, Type=%02x"
MSG.CPU.FILE	.CZ "**** Loading CPU File:%s"
MSG.OUT0		.CZ "%H-           "
MSG.OUT1		.CZ "%H-%h         "
MSG.OUT2		.CZ "%H-%h %h      "
MSG.OUT3		.CZ "%H-%h %h %h   "
MSG.OUT4		.CZ "%H-%h %h %h %h"
MSG.EQU0		.CZ "     [      00] "
MSG.EQU1		.CZ "     [      %h] "
MSG.EQU2		.CZ "     [    %h%h] "
MSG.EQU3		.CZ "     [  %h%h%h] "
MSG.EQU4		.CZ "     [%h%h%h%h] "
MSG.LINENUM		.CZ " %05D "
MSG.ERROR		.CZ "**** Fatal Error [%h] "
MSG.SYMBOLS		.CZ "**** Symbol Table:"
MSG.LSYMBOL		.CZ " .%d=%h%h%h%h"
MSG.PSYMBOL		.CZ " :%d(%d)=%h%h%h%h"
MSG.SUMMARY		.CZ "**** Symbol Table Size : %5D Bytes.\r\n"
MSG.STATS		.CZ "**** Total lines : %u, Code lines : %u\r\n"
MSG.END			.CZ "**** End Of Assembly.\r\n"
MSG.WARN1		.CZ "WARN:Unoptimized adressing mode due to forward reference."
				.DO ASMDBG=1
MSG.ASMDBG		.CZ "\r\nCtxID=%d, ARG=%H%H <op> ACC=%H%H -> ACC %b [%h]\r\n"
				.FIN
				.DO SYMDBG=1
MSG.SYMDBGN		.CZ "SymNew:%H(%02d),%b,V=%H%H"
MSG.SYMDBGG		.CZ "SymGet:%H(%02d),%b,V=%H%H"
MSG.SYMDBGS		.CZ "SymSto:%H(%02d),%b,V=%H%H"
MSG.SYMDBGU		.CZ "SymUpd:%H(%02d),%b,V=%H%H"
MSG.SYMDBGAL	.CZ "Sym++L:%H(%02d),%b,V=%H%H"
MSG.SYMDBGGL	.CZ "Sym??L:%H(%02d),%b,V=%H%H"
MSG.SYMDBGL		.CZ " .%d=%I"
MSG.SYMDBGP		.CZ " %h:%d=%I"
				.FIN
				.DO EXPDBG=1
MSG.EXPDBG		.CZ "ARG=%L, ACC=%L\r\n"
				.FIN
*---------------------------------------
ASM.CPU.FILE	.BS 65

SRC.ACC.SIZE	.BS 1

SRC.ACC.F		.BS 1
SRC.ACC			.BS 4
SRC.ARG.F		.BS 1
SRC.ARG			.BS 4

SRC.ACCTMP		.BS 4
SRC.AM.StrBuf	.BS 32
*--------------------------------------
ID.END			.EQ *
*--------------------------------------
				.DUMMY
				.OR 0

bPause			.BS 1
bListAll		.BS 1

SRC.pFILENAME	.BS 2

SRC.Depth		.BS 1
SRC.FILETYPES	.BS IN.MAXDEPTH
SRC.pFILES		.BS IN.MAXDEPTH*2

SRC.LINENUM		.BS 2
SRC.AMID		.BS 1

DST.pFILENAME	.BS 2
DST.pFILE		.BS 2
DST.AUXTYPE		.BS 2

ASM.pCPUDEF		.BS 2

ASM.StartTime	.BS 4
ASM.EndTime		.BS 4
ASM.TotalLines	.BS 4
ASM.CodeLines	.BS 4

ASM.PASS		.BS 1

ASM.DO.StackPtr	.BS 1
ASM.DO.Stack	.BS DO.MAXDEPTH

ASM.DU.ON		.BS 1
ASM.PH.ON		.BS 1

ASM.LI.ON		.BS 1
ASM.LI.CON		.BS 1
ASM.LI.MON		.BS 1
ASM.LI.XON		.BS 1

ASM.PC			.BS 4
ASM.PC.PH		.BS 4
ASM.PC.DU		.BS 4

SYM.pList		.BS 2
SYM.ID			.BS 2
SYM.BufPtr		.BS 1
SYM.bDirty		.BS 1

FWR.pList		.BS 2
FWR.ID			.BS 2

EXP.Modifier	.BS 1
EXP.Operator	.BS	1

MAC.pList		.BS 2
MAC.pBuf		.BS 2
MAC.BufPtr		.BS 1
MAC.ID			.BS 2
MAC.bLearning	.BS 1

MAC.pStack		.BS 2
MAC.StkPtr		.BS 1

OUT.Byte		.BS 1
OUT.PC			.BS 4
OUT.BufCnt		.BS 1
OUT.Buf			.BS 4
OUT.bEquate		.BS 1
OUT.LineCnt		.BS 1

DS.END			.ED
*---------------------------------------
				.DO DS.END>$FF
				ERROR:DS too big
				.FIN
*---------------------------------------
MAN
SAVE usr/src/bin/asm.s
ASM
