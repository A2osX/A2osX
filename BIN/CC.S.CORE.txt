NEW
  AUTO 3,1
*--------------------------------------
CORE.Init		lda #SL._
				>KAPI SListNew
				bcs .99

				>STYA.G CC.pDefines

				lda #SL._
				>KAPI SListNew
				bcs .99

				>STYA.G CC.pTags

				lda #SL._
				>KAPI SListNew
				bcs .99

				>STYA.G CC.pTypes

				lda #SL._+SL.Scoped
				>KAPI SListNew
.99				bcs .9

				>STYA.G CC.pSyms

				>LDYAI 256
				>LIBC Malloc
				bcs .9

				>STYA ZP.pTypeBuf

				>LDYAI 256
				>LIBC Malloc
				bcs .9

				>STYA ZP.pLSymBuf
				>STYA.G CC.pLSymBuf

				>LDYAI 256
				>LIBC Malloc
				bcs .9

				>STYA ZP.pRSymBuf
				>STYA.G DS.pRSymBuf
				
				>LDYAI 256
				>LIBC Malloc
				bcs .9

				>STYA ScopeStk

				>LDYAI 256
				>LIBC Malloc
				bcs .9

				>STYA StmtStk

				lda #'_'
				>STA.G CC.Label

*				clc
.9				rts
*--------------------------------------
CORE.Reset		>LDYA.G CC.pDefines

				>KAPI SListFree

				>STZ.G CC.pDefines+1

				lda #SL._
				>KAPI SListNew
				bcs .99

				>STYA.G CC.pDefines

				>LDYA.G CC.pTags

				>KAPI SListFree

				>STZ.G CC.pTags+1

				lda #SL._
				>KAPI SListNew
				bcs .99

				>STYA.G CC.pTags

				>LDYA.G CC.pTypes

				>KAPI SListFree

				>STZ.G CC.pTypes+1

				lda #SL._
				>KAPI SListNew
				bcs .99

				>STYA.G CC.pTypes

.99				rts
*--------------------------------------
CORE.Quit		jsr FIO.FClose
				bne CORE.Quit

				>LDYA.G CC.pSyms
				cmp #0
				beq .1

				>KAPI SListFree

.1				>LDYA.G CC.pTags
				cmp #0
				beq .2

				>KAPI SListFree

.2				>LDYA.G CC.pTypes
				cmp #0
				beq .3

				>KAPI SListFree

.3				>LDYA.G CC.pDefines
				cmp #0
				beq .4

				>KAPI SListFree

.4				>LDYA.G CC.pDefineBuf
				jsr .7

				>LDYA.G CC.pLSymBuf
				jsr .7

				>LDYA.G DS.pRSymBuf
				jsr .7

				>LDYA ZP.pTypeBuf
				jsr .7

				>LDYA ScopeStk
				jsr .7

				>LDYA StmtStk

.7				cmp #0
				beq .8

				>LIBC Free

.8				rts
*--------------------------------------
CORE.CompileFile
				>SLEEP

				ldy #S.PS.pStdIn
				jsr A2osX.GetPSy
				pha
				iny
				jsr A2osX.GetPSy
				ply
				>LIBC FEOF
				bcs .9

				tay
				bne .1

				>LIBC GetChar
				bcs .9					I/O err

				cmp #3					Ctrl-C
				beq .9

.1				jsr FIO.FGetS
				bcs .9

				jsr CORE.CompileLine
				bcc CORE.CompileFile

.9				rts
*--------------------------------------
CORE.CompileLine
				jsr CC.GetCharNB
				bcs .99

				cmp #C.CR				EOL....
				beq .8

				cmp #'#'				directive ?
				bne .1

				jmp DIR

.1				tax

				>LDA.G CC.DirState
				bmi .8					FALSE

				txa

				cmp #'/'
				bne .2					comments ...

				jmp CORE.Comments
*--------------------------------------
.2				cmp #'}'				End of CPStmt ?
				beq .5

				jsr CORE.CompileStmt
				bcs .99

				jsr CC.GetCharNB
				bcs .98

				cmp #'{'
				bne .3

				jsr CORE.GetNCharNBNL	Skip '{'
				bcc CORE.CompileLine

.3				cmp #';'				End of Stmt ?
				bne .4

				jsr CORE.GetNCharNBNL	Skip ';'

				jsr STMT.Stmt.END
				bcs .99

				jsr CC.GetCharNB

.4				cmp #'}'				End of CPStmt ?
				bne CORE.CompileLine

.5				jsr CORE.GetNCharNBNL	Skip '}'

				jsr STMT.CPStmt.END
				bcs .99

				jsr CC.GetCharNB
				bcc .3

.98				lda #E.CSYN
				sec
.99				rts

.8				clc
				rts
*--------------------------------------
* keyword : for, while ....
*--------------------------------------
CORE.CompileStmt
				>LDYA L.CC.KW
				jsr CC.LookupID
				bcs .1					not an internal CC keyword....

				txa
				>STA.G CC.CmdSave
				jmp (J.CC.KW,x)
*--------------------------------------
* Declaration : typedef type ..., type var,..., type func()
*--------------------------------------
.1				>LDYA L.CC.SCSPEC
				jsr CC.LookupID
				bcs .2

				jmp (J.CC.SCSPEC,x)

.2				jsr DECL.GetType		type ....
				bcs .7

				jmp DECL.AddSym
*--------------------------------------
* Statement : ++var, var=, func();
*--------------------------------------
.7				jmp STMT.Get
*--------------------------------------
.99				lda #E.CSYN
				sec
.9				rts
*--------------------------------------
CORE.Comments	jsr CC.GetNextChar

				cmp #'/'
				beq .8					// skip line.....

				cmp #'*'
				bne .9					/* ....

.1 				jsr CORE.GetNCharNBNL
				bcs .9

				cmp #'*'				....*/
				bne .1

				jsr CC.GetNextChar
				bcs .9

				cmp #'/'
				bne .1

				jmp CC.GetNextChar

.8				clc
				rts

.9				lda #E.CSYN
				sec
				rts
*--------------------------------------
CORE.SkipLine	jsr CC.GetNextChar
				bcs .9

				cmp #C.CR
				bne CORE.SkipLine

				clc

.9				rts
*--------------------------------------
CC.LookupID		>STYA ZP.pLookup
				jsr CC.GetIDLen
				bra CC.Lookup

CC.LookupAOP	>LDYA L.CC.AOPS
				>STYA ZP.pLookup

				ldy #$ff

.1				iny
				lda (ZP.pLineBuf),y
				sec
				beq .9

				jsr CC.IsOPChar
				bcs .9

				cmp #'='
				bne .1

				iny

.8				tya
				bra CC.Lookup

.9				rts

CC.LookupOP		>STYA ZP.pLookup
				jsr CC.GetOPLen

CC.Lookup		phy						Y = len
				ldx #0

.1				lda (ZP.pLookup)
				beq .9					Ending 0, not found....

				pla
				pha						Get Back Len
				cmp (ZP.pLookup)		Same Len ?
				bne .4

				tay
.2				lda (ZP.pLookup),y

.3				dey
				cmp (ZP.pLineBuf),y
				bne .4

				tya
				bne .2

				pla						Found keyword...
				jsr CC.SkipA			..advance Ptr to char after it..

				lda ZP.pLookup
				sec
				adc (ZP.pLookup)
				tay
				lda ZP.pLookup+1
				adc #0
				clc						Y,A = F() def, X = F() index
				rts

.4				inx
				inx
				lda (ZP.pLookup)
				jsr CC.ZPLookupPtrAddAp1
				bra .1

.9				ldx #$FF
				pla
				sec
				rts
*--------------------------------------
CC.ZPLookupPtrAddAp1
				sec
				adc ZP.pLookup
				sta ZP.pLookup
				bcc .1

				inc ZP.pLookup+1
.1				rts
*--------------------------------------
CC.GetDefine	>SS
				>PUSHW.G CC.pDefines
				>PUSHW ZP.pLineBuf
				>PUSHWI 0				ScopeID
				>PUSHWI	ZP.pLineBuf	NextPtr
				>KAPI SListLookup
				>SR
				bcs .9

				>STYA ZPPtr1			KeyID

				>LDYA ZP.pLineBuf
				>STYA.G CC.SaveDefine

				>SS
				>PUSHW.G CC.pDefines
				>PUSHW ZPPtr1
				>PUSHWZ					allocate
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR
				bcs .9

				>STYA ZP.pLineBuf
				>STYA.G CC.pDefineBuf

.9				rts
*--------------------------------------
* CT Stack
*--------------------------------------
CC.Push			ldy StmtPtr
				dey
				beq .9

				sty StmtPtr

				sta (StmtStk),y
				clc
				rts

.9				lda #E.STKOVERFLOW
				sec
				rts
*--------------------------------------
* ZP.pLineBuf related Subs.....
*--------------------------------------
CC.SkipSym
*--------------------------------------
CC.SkipX		txa
CC.SkipA		clc
				adc ZP.pLineBuf
				sta ZP.pLineBuf
				bcc .8

				inc ZP.pLineBuf+1

.8				rts
*--------------------------------------
CC.GetOPLen		ldy #0

.1				iny
				lda (ZP.pLineBuf),y
				beq .8

				jsr CC.IsOPChar
				bcc .1

.8				tya
				rts
*--------------------------------------
CC.GetIDLen		ldy #0

.1				iny
				lda (ZP.pLineBuf),y
				beq .8

				jsr CC.IsLetterOrDigit
				bcc .1

.8				tya
				rts
*--------------------------------------
CC.GetCharNB	jsr CC.GetChar
				bcs CORE.GetNCharNB.RTS

				jsr CC.CheckCharNB
				bcc CORE.GetNCharNB.RTS
*--------------------------------------
CORE.GetNCharNB	jsr CC.GetNextChar
				bcs CORE.GetNCharNB.RTS

				jsr CC.CheckCharNB
				bcs CORE.GetNCharNB

CORE.GetNCharNB.RTS
				rts
*--------------------------------------
CORE.GetCharNBNL
				jsr CC.GetChar
				bcs CORE.GetNCharNB.RTS

				jsr CC.CheckCharNB
				bcs CORE.GetNCharNBNL

				cmp #C.CR
				clc
				bne CORE.GetNCharNB.RTS

				jsr FIO.FGetS
				bcc CORE.GetCharNBNL

				rts
*--------------------------------------
CORE.GetNCharNBNL
				jsr CC.GetChar
				bcs .9

				cmp #C.CR
				beq .1

				jsr CORE.GetNCharNB
				bcs .9

				cmp #C.CR
				clc
				bne .9

.1				jsr FIO.FGetS
				bcc CORE.GetCharNBNL

.9				rts
*--------------------------------------
CC.CheckSpace	jsr CC.GetChar
				bcs .90

				cmp #C.SPACE
				bne .90

				jsr CORE.GetNCharNB
				bcc .99

.90				lda #E.CSYN
				sec
.99				rts
*--------------------------------------
CC.CheckCharNB	cmp #C.SPACE
				beq .9

				cmp #C.TAB
				beq .9

				clc
.9				rts
*--------------------------------------
* https://riptutorial.com/c/example/16255/character-literals
* 'c', '\abefnrtv', '\123', '\xFF'
*--------------------------------------
CC.GetNextCharEsc
				jsr CC.GetNextChar
				bcs .9

				cmp #'\'
				bne .8

				jsr CC.GetNextChar
				bcs .8

				ldx #CC.EscChars.Cnt-1

.1				cmp CC.EscChars,x
				beq .6

				dex
				bpl .1

* TODO : \123, \xFF

				sec
				rts

.6				lda CC.EscCodes,x
				bit .9
				clc
				rts

.8				clc
				clv
.9				rts
*--------------------------------------
CC.GetNextChar	inc ZP.pLineBuf
				bne CC.GetChar

				inc ZP.pLineBuf+1
*--------------------------------------
CC.GetChar		lda (ZP.pLineBuf)
				bne .8

				phy

				>LDYA.G CC.pDefineBuf
				cmp #0
				beq .1

				phx

				>LIBC Free

				>STZ.G CC.pDefineBuf+1

				>LDYA.G CC.SaveDefine
				>STYA ZP.pLineBuf

				plx
				ply
				bra CC.GetChar

.1				ply
				lda #C.CR

.8				clc
				rts
*---------------------------------------
CC.IsEndArg		cmp #']'
				beq .8

				cmp #','
				beq .8

				cmp #';'
				beq .8

				cmp #':'
				beq .8

				cmp #')'
				beq .8

				sec
				rts

.8				clc
				rts
*---------------------------------------
CC.IsOPChar		ldx #CC.OPChars.Cnt-1

.1				cmp CC.OPChars,x
				beq .8

				dex
				bpl .1

				sec
				rts

.8				clc
				rts
*---------------------------------------
CC.IsLetterOrDigit
				jsr CC.IsDigit10
				bcc CC.IsLetterRTS
*---------------------------------------
CC.IsLetter		cmp #'_'
				bne .1

				clc
				rts

.1				cmp #'A'
				bcc .9

				cmp #'Z'+1
				bcc CC.IsLetterRTS

				cmp #'a'
				bcc .9

				cmp #'z'+1

				rts						CC if lowercase

.9				sec
CC.IsLetterRTS	rts
*---------------------------------------
CC.IsDigit10	cmp #'0'
				bcc .9

				cmp #'9'+1
				rts						cc if ok, cs if not

.9				sec
				rts
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s.core
LOAD usr/src/bin/cc.s
ASM
