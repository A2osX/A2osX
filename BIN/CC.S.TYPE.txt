NEW
  AUTO 3,1
*--------------------------------------
* Type Declaration keywords
*--------------------------------------
TYPE.CONST		lda #SYM.Q.CONST
				bra TYPE.VOLATILE.1
*--------------------------------------
TYPE.VOLATILE	lda #SYM.Q.VOLATILE
TYPE.VOLATILE.1	ldy #SYM.Q
				ora (ZP.pTypeBuf),y
				sta (ZP.pTypeBuf),y

				jsr CC.CheckSpace
				bcs .9

				>LDYA L.CC.TYPESPEC
				jsr CC.LookupID
				bcs .9

				jmp (J.CC.TYPESPEC,x)

.9				lda #E.CSYN
				sec
				rts
*--------------------------------------
TYPE.RESTRICT
				lda #E.CSYN
				sec
				rts
*--------------------------------------
TYPE.STRUCT		clc
				.HS B0					BCS
*--------------------------------------
TYPE.UNION		sec
				ror ZPPtr2+1			bStrucUnion

				stz ZPPtr2				bNewTagDef
			bra TYPE.SU.Pass1
				bit bPass2
				bpl TYPE.SU.Pass1		Pass 1: create def
*--------------------------------------
TYPE.SU.Pass2	jsr CORE.GetCharNBNL
				bcs .98

				cmp #'{'
				beq .1					no TAG

				jsr TAG.Lookup
				bcs .99

				jsr CORE.GetNCharNBNL
				bcs .98

				cmp #'{'
				bne .8

.1				jsr CORE.GetNCharNBNL	skip '{'

				cmp #'}'
				bne .1					skip definition

				jsr CORE.GetNCharNB	skip '}'

.8				lda #SYM.T.SU
				jsr TYPE.SetT
	
				rts

.98				lda #E.CSYN
				sec
.99				rts
*--------------------------------------
TYPE.SU.Pass1	jsr CORE.GetCharNBNL
				bcs .97

				cmp #'{'
				beq .30					no TAG

				jsr TAG.Lookup
				bcs .20
				
				jmp TYPE.SetQ
*--------------------------------------
.20				jsr TAG.New
				bcs .99

				sec
				ror ZPPtr2				bNewTagDef

				jsr CORE.GetCharNBNL
				bcs .98

				cmp #'{'
				bne .98
*--------------------------------------
.30				lda #SYM.T.SU
				sta (ZP.pTypeBuf)		#SYM.T
				
				jsr SCOPE.New
				bcs .99
				
				jsr TYPE.SetScope
				
.31				jsr CORE.GetNCharNBNL	skip '{' of ';'

.97				bcs .98

				cmp #'}'
				beq .37

				jsr TYPE.NextBuf

				jsr DECL.GetType
				bcs .99

				ldy #SYM.Q				no const nor volatile
				lda (ZP.pTypeBuf),y
				and #SYM.Q.CONST+SYM.Q.VOLATILE+SYM.Q.FUNCTION
				bne .98

				jsr SYM.NewAuto
				bcs .99

*				TODO: bitO & bitW
*				bcs .99

				jsr SYM.Store
				bcs .99

				jsr TYPE.PrevBuf

				jsr CC.GetCharNB
				cmp #';'
				bne .98

				bra .31
*--------------------------------------
.37				jsr CORE.GetNCharNB	skip '}'
				bcs .98

				jsr SCOPE.Close			Close SU definition
				bcs .99

				bit ZPPtr2				bNewTagDef
				bpl .38

				jsr TAG.Store
				bcs .99
*--------------------------------------
.38				jsr TYPE.SetQ

				rts		

.98				lda #E.CSYN
				sec
.99				rts
*--------------------------------------
TYPE.ENUM
				lda #E.CSYN
				sec
				rts
*--------------------------------------
TYPE.SIGNED		sec
				.HS 90					BCC
*--------------------------------------
TYPE.UNSIGNED	clc
				php

				jsr CC.CheckSpace
				bcs .9

				>LDYA L.CC.TYPES
				jsr CC.LookupID
				bcs .9

				cpx #SYM.T.UCHAR
				bcc .9					void

				cpx #SYM.T.SLONG+1		only char int long allowed
				bcs .9

				plp
				bcs .8

				jmp (J.CC.UTYPES-2,x)

.8				jmp (J.CC.STYPES-2,x)

.9				plp

				lda #E.CSYN
				sec
				rts
*--------------------------------------
TYPE.SHORT		jsr CC.CheckSpace
				bcs .9

				>LDYA L.CC.TYPES
				jsr CC.LookupID

				bcs TYPE.UCHAR

				cpx #4					only int allowed
				beq TYPE.SCHAR

.9				lda #E.CSYN
				sec
				rts
*--------------------------------------
TYPE.VOID		lda #SYM.T.VOID
				bra TYPE.SetT

TYPE.CHAR
TYPE.UCHAR		lda #SYM.T.UCHAR
				bra TYPE.SetT

TYPE.SCHAR		lda #SYM.T.SCHAR
				bra TYPE.SetT

TYPE.UINT		lda #SYM.T.UINT
				bra TYPE.SetT

TYPE.INT
TYPE.SINT		lda #SYM.T.SINT
				bra TYPE.SetT

TYPE.ULONG		lda #SYM.T.ULONG
				bra TYPE.SetT

TYPE.LONG
TYPE.SLONG		lda #SYM.T.SLONG
				bra TYPE.SetT

TYPE.FLOAT		lda #SYM.T.FLOAT

TYPE.SetT		sta (ZP.pTypeBuf)		T

TYPE.SetQ		jsr CC.GetCharNB
				bcs .9

.1				cmp #'*'
				bne .8

				ldy #SYM.Q
				lda (ZP.pTypeBuf),y
				clc
				adc #SYM.Q.POINTER
				bcs .9					more than ***

				sta (ZP.pTypeBuf),y

				jsr CORE.GetNCharNB
				bcc .1

.9				lda #E.CSYN
				sec
.99				rts

.8				clc
				rts
*--------------------------------------
* in : Y,A = type/qual
* out : X = size
*--------------------------------------
TYPE.SizeOf		bit #SYM.Q.PPPOINTER
				bne .2

				ldx CC.TYPESIZE-1,y

				clc
				rts

.2				ldx #2					pointer
				sec						+1 for hMem Storage
				rts
*--------------------------------------
TYPE.Lookup		>STZW.G CC.TypeID

				>SS
				>PUSHW.G CC.pTypes
				>PUSHW ZP.pLineBuf
				>PUSHWI 0				ScopeID
				>PUSHWI	ZP.pLineBuf	NextPtr
				>KAPI SListLookup
				>SR
				bcs .9

				>STYA.G CC.TypeID

				>SS
				>PUSHW.G CC.pTypes
				>PUSHW.G CC.TypeID
				>PUSHW ZP.pTypeBuf
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR

.9				rts
*--------------------------------------
TYPE.Reset		ldy #SYM-1

				lda #0
				
.1				sta (ZP.pTypeBuf),y
				dey
				bpl .1
				
				rts
*--------------------------------------
TYPE.New		>SS
				>PUSHW.G CC.pTypes
				>PUSHW ZP.pLineBuf
				>PUSHWI 0				ScopeID
				>PUSHWI	ZP.pLineBuf		NextPtr
				>KAPI SListNewKey
				>SR
				bcs .9

				>STYA.G CC.TypeID

.9				rts
*--------------------------------------
TYPE.Store		>SS
				>PUSHW.G CC.pTypes
				>PUSHW.G CC.TypeID
				>PUSHW ZP.pTypeBuf
				>PUSHWI SYM
				>KAPI SListAddData
				>SR

.9				rts
*--------------------------------------
TYPE.SetScope	>LDA.G CC.ScopeID
				ldy #SYM.ScopeID
				sta (ZP.pTypeBuf),y
				
				>LDA.G CC.ScopeID+1
				ldy #SYM.ScopeID+1
				sta (ZP.pTypeBuf),y
				rts
*--------------------------------------
TYPE.IsVoid		ldy #SYM.TypeID
				lda (ZP.pTypeBuf),y
				iny
				ora (ZP.pTypeBuf),y
				bne .9

				ldy #SYM.Q
				lda (ZP.pTypeBuf),y
				and #SYM.Q.PPPOINTER+SYM.Q.AAARRAY
				bne .9

				lda (ZP.pTypeBuf)		#SYM.T
				cmp #SYM.T.VOID

*				bne .9

.9				rts				
*--------------------------------------
TYPE.NextBuf	clc
				lda ZP.pTypeBuf
				adc #SYM
				sta ZP.pTypeBuf
				
				lda ZP.pTypeBuf+1
				adc /SYM
				sta ZP.pTypeBuf+1
				
				rts
*--------------------------------------
TYPE.PrevBuf	sec
				lda ZP.pTypeBuf
				sbc #SYM
				sta ZP.pTypeBuf
				
				lda ZP.pTypeBuf+1
				sbc /SYM
				sta ZP.pTypeBuf+1
				
				rts
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s.type
LOAD usr/src/bin/cc.s
ASM
