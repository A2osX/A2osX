NEW
  AUTO 3,1
*--------------------------------------
F.Decl			ldy #SYM.Cnt
				lda #$ff
				sta (ZP.pLSymBuf),y		func() : unknown arg count

				jsr CORE.GetNCharNBNL	Skip (
				bcs .9

				cmp #')'				func()
				bne F.DeclArgs

				jsr CORE.GetNCharNBNL	Skip ')'
				bcs .9

				cmp #';'
				bne .9

				jmp SYM.Update			Store this declaration & exit
				
.9				lda #E.CSYN
				sec
.99				rts				
*--------------------------------------
F.DeclArgs		jsr SCOPE.New			function (type.....
				bcs .99
			
				lda ScopePtr
				clc
				adc #SCOPE.State
				tay
				lda #$FF				add args
				sta (ScopeStk),y

				lda #'P'
				jsr SYM.LookupLabelA
				bcs .99
				
				lda ScopePtr
				clc
				adc #SCOPE.ParamSize
				tay
				txa
				sta (ScopeStk),y
				
				jsr SYM.AddScope
				
				jsr SYM.IncCnt			$FF -> 0

				jsr TYPE.IsVoid
				beq .1					void function(....

				ldy #SYM.SizeOf+1
				lda (ZP.pLSymBuf),y
				bne .10
				
				dey
				lda (ZP.pLSymBuf),y
				cmp #2+1
				bcc .1					R in Y,A

.10				lda #'R'
				jsr SYM.NewLabelA
				bcs .99
*--------------------------------------
.1				jsr F.DeclGetType		function (type.... ?
				bcs .99
			
				jsr TYPE.IsVoid
				beq .5					function (void)

.2				jsr F.NewArg
				bcs .99

				jsr SYM.IncCnt

				lda (ZP.pTypeBuf)
				cmp #SYM.T.VARIADIC
				beq .5					function ( , ...)

				jsr CC.GetCharNB
				bcs .9

				cmp #')'
				beq .6

				cmp #','
				bne .9

				jsr CORE.GetNCharNBNL	Skip ,
				bcs .9
				
				jsr F.DeclGetType
				bcs .99

				jsr TYPE.IsVoid
				bne .2

.9				lda #E.CSYN
				sec
.99				rts
*--------------------------------------
.5				jsr CC.GetCharNB
				bcs .9

				cmp #')'
				bne .9

.6				lda ScopePtr
				clc
				adc #SCOPE.ParamSize
				tay
				lda (ScopeStk),y
				tax

				lda #'P'				define PARAM SIZE
				jsr SYM.NewLabelA
				bcs .99

				jsr CORE.GetNCharNBNL	Skip ')'
				bcs .9

				cmp #';'
				bne .7

				jsr SCOPE.Close			function ();
				bcs .99

				jmp SYM.Update			Store this declaration & exit
*--------------------------------------
.7				cmp #'{'
				bne .9
*--------------------------------------
F.Def			>LDA.G CC.bInitCode
				bmi .1

				lda #$60				RTS
				jsr CODE.EmitByte		Close INIT code
				bcs .99

				lda #$FF
				>STA.G CC.bInitCode
*--------------------------------------
.1				jsr SYM.SetAddrCCode	f() Code starts HERE

				jsr SYM.Update			Store f() Declaration
				bcs .99

				>LDYA L.PCC.BS
				jsr CODE.EmitPCC 
				bcs .99

				lda ScopePtr
				clc
				adc #SCOPE.State
				tay
				lda #0
				sta (ScopeStk),y

				lda #$ff
				>STA.G CC.CmdSave

				jsr STMT.New00
				bcs .99

				jsr STMT.SetTypeCP		type = {}
				bcs .99

				lda #'F'
				jsr SYM.LookupLabelA
				bcs .99

				txa

				jmp CODE.AddLocal

.99				rts
*--------------------------------------
F.Def.END		lda #'X'				define EXIT Label
				jsr SYM.NewLabelA
				bcs .99

				lda #'F'				define FRAME SIZE
				jsr SYM.NewLabelA
				bcs .99

				lda ScopePtr
*				clc
				adc	#SCOPE.FrameSize
				tay
				lda (ScopeStk),y

				jsr CODE.RemLocal
				bcs .99

				jsr STMT.Close
				bcs .99

				jsr SCOPE.Close			function () {};
				bcs .99

*			jsr CODE.DEBUG	

				>LDYA L.PCC.BR
				jsr CODE.EmitPCC 
				bcs .99

				lda #$60				RTS
				jsr CODE.EmitByte

.99				rts
*--------------------------------------
* ZP.pLSymBuf = f() declaration
* ZP.pTypeBuf = arg type
* update SCOPE.LocalPtr, SCOPE.FrameSize
*--------------------------------------
F.NewArg		ldy #SYM.Cnt
				lda (ZP.pLSymBuf),y
				ora #$30
				>STA.G CC.Label+1		add "_1,_2...."

				>LDYA.G CC.LSymID
				>STYA.G CC.LSymIDSave

				>LEA.G CC.ArgBuf
				>STYA ZP.pLSymBuf

				jsr CC.GetCharNB
				bcs .9

				jsr CC.IsLetter			function (type name... ?
				bcc .2

				ldx ZP.pLineBuf
				phx
				ldx ZP.pLineBuf+1
				phx

				>LEA.G CC.Label
				>STYA ZP.pLineBuf

				jsr SYM.NewAuto

				plx
				stx ZP.pLineBuf+1
				plx
				stx ZP.pLineBuf
				bcs .99




				bra .8

.2				jsr SYM.NewAuto
				bcs .99

.8				jsr SYM.Store
				bcs .99

				>LDYA.G CC.pLSymBuf
				>STYA ZP.pLSymBuf

				>LDYA.G CC.LSymIDSave
				>STYA.G CC.LSymID

*				clc
				rts

.9				lda #E.CSYN
				sec

.99				rts
*--------------------------------------
F.DeclGetType	lda (ZP.pLineBuf)
				cmp #'.'
				bne .5

				ldx #2

.1				jsr CC.GetNextChar
				bcs .9

				cmp #'.'
				bne .9

				dex
				bne .1

				jsr CORE.GetNCharNB
				bcs .9

				eor #')'
				bne .9

				lda #SYM.T.VARIADIC
				sta (ZP.pTypeBuf)

*				clc
				rts
*--------------------------------------
.5				jsr DECL.GetType
				bcs .9

				rts

.9				lda #E.CSYN
				sec
				rts
*--------------------------------------
* in :
*  f() in ZP.pRSymBuf
*  Y,A = pLSymBuf
*--------------------------------------
F.CallNoRetV	ldy #SYM-1

.1				lda (ZP.pLSymBuf),y
				sta (ZP.pRSymBuf),y
				dey
				bpl .1

				ldy #0					no target pLSym
				tya
				
F.CallRetV		ldx ZPPtr1				local : variadic size
				phx
				ldx ZPPtr1+1			local : bFastCall
				phx

				ldx ZPPtr2				local : target pLSym
				phx
				ldx ZPPtr2+1
				phx

				>STYA ZPPtr2
				
				stz ZPPtr1				Reset VARIADIC byte count
				stz ZPPtr1+1			Reset StackInit Status

				jsr CORE.GetNCharNB		skip '('
				bcs .90

				ldy #SYM.Cnt
				lda (ZP.pRSymBuf),y
				bpl .1
				
				lda #E.FUNDEF			should be at least f(void)
				bra .98

.1				jsr F.StackReturn		Add room for RET value if required
				bcs .99
				
				jsr F.GetArg0			get First Arg in pLSymBuf
				bcs .7
				
				jsr F.StackSave
				bcs .99

.3				jsr SYM.NextRBuf

				>LDYA ZP.pLSymBuf
				jsr EXP.Eval
				bcs .99

				jsr F.StackPushV
				bcs .99
				
				jsr F.NextArg
				
				jsr SYM.PrevRBuf
				jsr SYM.PrevLBuf

				jsr CC.GetCharNB
				bcs .90

				cmp #','
				bne .6

				jsr CORE.GetNCharNBNL	Skip ','
				bcs .90

				jsr F.GetArg
				bcc .3					Another ARG....

				bra .99					extra args....error

.6				cmp #')'
				bne .90

				jsr F.GetArg
				bcs .8					no more arg after ')', exit

				lda (ZP.pLSymBuf)		#SYM.T
				cmp #SYM.T.VARIADIC
				bne .90					missing arg
				
				jsr SYM.PrevLBuf

				lda ZPPtr1				push VARIADIC byte count
				jsr CODE.PUSHI

.7				jsr CC.GetCharNB
				bcs .90

				cmp #')'
				bne .90

.8				jsr CORE.GetNCharNB		Skip )

				jsr F.Call2
				bcs .99
				
				jsr F.StackRestore
				bra .99

.90				lda #E.CSYN

.98				sec

.99				plx
				stx ZPPtr2+1
				plx
				stx ZPPtr2

				plx
				stx ZPPtr1+1
				plx
				stx ZPPtr1

				rts
*--------------------------------------
F.Call2			ldy #SYM.Addr+1

				lda (ZP.pRSymBuf),y
				beq .9

				pha

				dey
				lda (ZP.pRSymBuf),y
				tax

				ply						Y=HI,X=LO

				cpy #1
				bne .1

				jsr CODE.LIBC
				bcs .99
				
				bra .8

.1				cpy #3+LIBS.MAX
				bcs .3

				jsr CODE.LIBCALL
				bcs .99
				
				bra .8

.3				lda #$EA				NOP
				jsr CODE.EmitByte
				bcs .99

				lda #$EA				NOP
				jsr CODE.EmitByte
				bcs .99

				lda #$20				JSR abs
				jsr CODE.TOABSYX
				bcs .99

.9				bit bPass2
				bmi .91

				lda #5					leave room for LDX #imm, JSR abs
				clc
				adc ZPCCCode
				sta ZPCCCode
				bcc .8

				inc ZPCCCode+1

.8				lda ZPPtr2
				ora ZPPtr2+1
				bne .80

				ldy #SYM.SizeOf
				lda (ZP.pRSymBuf),y
	
				tax
				beq .80					void

				cmp #3
				bcc .80

.81				jsr CODE.INCPSTACK
				dex
				bne .81

.80				clc
				rts

.91				lda #E.FUNDEF
				sec
.99				rts
*--------------------------------------
F.GetArg0		lda #$30				arg "_0, _1, ...."
				>STA.G CC.Label+1

F.GetArg		>SS
				>PUSHW.G CC.pSyms
				>PUSHEA.G CC.Label

				ldy #SYM.ScopeID+1
				lda (ZP.pRSymBuf),y
				>PUSHA
				dey
				lda (ZP.pRSymBuf),y
				>PUSHA

				>PUSHWI	0				NextPtr
				>KAPI SListLookup
				>SR
				bcs .9

				>STYA ZP.pLookup
				jsr SYM.NextLBuf
				
				>SS
				>PUSHW.G CC.pSyms
				>PUSHW ZP.pLookup
				>PUSHW ZP.pLSymBuf
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR

.9				rts
*--------------------------------------
F.NextArg		lda (ZP.pLSymBuf)		#SYM.T
				cmp #SYM.T.VARIADIC
				bne .1					if VARIADIC, don't advance to next arg

				jsr EXP.GetRSymSizeOf

				clc						make sure pointer only 2 bytes
				adc ZPPtr1
				sta ZPPtr1				Add to byte count
				rts

.1				>INC.G CC.Label+1
				rts
*--------------------------------------
F.StackReturn	ldy #SYM.SizeOf
				lda (ZP.pRSymBuf),y
				cmp #3
				bcc .8					RetV in Y,A

				cmp #4
				bne .1
				
				>LDYA L.PCC.SL
				jmp CODE.EmitPCC 

.1				cmp #5
				bne *

				>LDYA L.PCC.SF
				jmp CODE.EmitPCC 
				
.8				rts
*--------------------------------------
F.StackSave		ldy #SYM.Cnt
				lda (ZP.pRSymBuf),y
				cmp #2
				bcs .3					more than 1 arg
				
				ldy #SYM.SizeOf
				lda (ZP.pLSymBuf),y		First Arg
				cmp #3
				bcc .9					only 1 or 2 bytes in Y,A
				
.3				dec ZPPtr1+1			for F.StackRestore
				
				>LDYA L.PCC.SS
				jmp CODE.EmitPCC 

.9				rts
*--------------------------------------
F.StackPushV	bit ZPPtr1+1
				bpl .8
				
				lda ExpState
			beq *

				bit #ExpState.VinReg
				beq .8
				
				jmp CODE.PUSHYA
				
.8				clc
				rts				
*--------------------------------------
F.StackRestore	bit ZPPtr1+1
				bpl .8
				
				>LDYA L.PCC.SR
				jmp CODE.EmitPCC

.8				clc
				rts
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s.f
LOAD usr/src/bin/cc.s
ASM
