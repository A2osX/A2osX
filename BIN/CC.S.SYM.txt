NEW
  AUTO 3,1
*--------------------------------------
* Input : ZP.pLineBuf, ZP.pTypeBuf, X = SC
*	 CS : Reset Buffer
*	 CC : Reuse Buffer
* Output : Y,A = VarID
*--------------------------------------
SYM.NewAuto		ldx #SYM.SC.AUTO
*--------------------------------------
SYM.NewX		ldy #SYM-1

.1				lda (ZP.pTypeBuf),y
				sta (ZP.pLSymBuf),y
				dey
				bpl .1

				txa
				ldy #SYM.SC
				sta (ZP.pLSymBuf),y

				bit bPass2
				bmi SYM.New.Pass2
*--------------------------------------
SYM.New.Pass1	jsr SYM.Get
				bcs .1

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #SYM.Q.FUNCTION
				beq .90

				ldy #SYM.Addr+1
				lda (ZP.pLSymBuf),y
				bne .90

				jmp F.Def
*--------------------------------------
.1				>SS
				>PUSHW.G CC.pSyms
				>PUSHW ZP.pLineBuf
				jsr SCOPE.Push
				>PUSHWI	ZP.pLineBuf		NextPtr
				>KAPI SListNewKey
				>SR
				bcs SYM.New.9

				>STYA.G CC.LSymID		Y,A = KeyID

				.DO _DBG_SYM=1
			jsr DEBUG.SYMN
				.FIN

				bra SYM.New.2

.90				lda #E.REDEF
				sec

SYM.New.9		rts
*--------------------------------------
SYM.New.Pass2	jsr SYM.Get
				bcs	SYM.New.9
*--------------------------------------
SYM.New.2		jsr CC.GetCharNB
				bcs .98

				cmp #';'
				bne .1

				jmp SYM.SetAddr

.1				cmp #'('
				bne SYM.NewV

				jsr SYM.GetLSymSizeOf
				jsr SYM.SetSizeOf

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				ora #SYM.Q.FUNCTION
				sta (ZP.pLSymBuf),y

				jsr SYM.Store			Store this f() with no prototype...
				bcs .99

				jsr F.Decl
				rts

.98				lda #E.CSYN
				sec
.99				rts
*--------------------------------------
SYM.NewV		cmp #'['
				bne SYM.SetAddr

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #%11001111
				sta (ZP.pLSymBuf),y

				ldy #SYM.Q

.1				lda (ZP.pLSymBuf),y
				clc
				adc #SYM.Q.ARRAY
				sta (ZP.pLSymBuf),y

				jsr CORE.GetNCharNB	Skip [
				bcs .98

				cmp #']'
				bne .2

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #SYM.Q.PPPOINTER
				beq .98					[] only allowed for *

				bra .3

.2				jsr EXP.IntConst
				bcs .98

				jsr SYM.IncCnt


				jsr CC.GetCharNB
				bcs .98

				cmp #']'
				bne .98

.3				jsr CORE.GetNCharNB	Skip ]
				bcs SYM.SetAddr

				cmp #'['
				bne SYM.SetAddr

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #SYM.Q.AAARRAY
				cmp #SYM.Q.AAARRAY
				bne .1					already [][][] ?

.98				lda #E.CSYN
				sec
.99				rts
*--------------------------------------
SYM.SetAddr		ldy #SYM.SizeOf
				lda (ZP.pLSymBuf),y
				iny
				ora (ZP.pLSymBuf),y
				bne .1

				jsr SYM.GetLSymSizeOf
				jsr SYM.SetSizeOf

.1				ldy #SYM.SC
				lda (ZP.pLSymBuf),y
				beq SYM.SetAddrG		SYM.SC.STATIC

				cmp #SYM.SC.AUTO
				beq SYM.SetAddrL

.9				lda #E.TMISMATCH
				sec
				rts
*--------------------------------------
SYM.SetAddrG	ldy #SYM.Addr

				lda ZPCCData
				sta (ZP.pLSymBuf),y

				iny

				lda ZPCCData+1
				sta (ZP.pLSymBuf),y

				ldy #SYM.SizeOf
				lda (ZP.pLSymBuf),y
				clc
				adc ZPCCData
				sta ZPCCData

				iny
				lda (ZP.pLSymBuf),y
				adc ZPCCData+1
				sta ZPCCData+1

				clc
				rts
*--------------------------------------
SYM.SetAddrL	ldy #SYM.SizeOf+1

				lda (ZP.pLSymBuf),y
				bne .9

				dey						#SYM.SizeOf
				lda (ZP.pLSymBuf),y

				ldy ScopePtr
				iny
				iny						#SCOPE.LocalPtr

				clc
				adc (ScopeStk),y
				bcs .9

				sta (ScopeStk),y

				ldy #SYM.SizeOf
				lda (ZP.pLSymBuf),y

				ldy ScopePtr
				iny
				iny
				iny
				iny						#SCOPE.FrameSize
				clc
				adc (ScopeStk),y
				sta (ScopeStk),y

				ldy #SYM.Addr
				sta (ZP.pLSymBuf),y

				clc
				rts

.9				lda #E.BUF
				sec
				rts
*--------------------------------------
SYM.IncCnt		ldy #SYM.Cnt
				lda (ZP.pLSymBuf),y
				inc
				sta (ZP.pLSymBuf),y
				rts
*--------------------------------------
SYM.PushAddr	ldy #SYM.SC
				lda (ZP.pLSymBuf),y
				beq .1					SYM.SC.STATIC
* LOCAL
				>LDYA L.PCC.PushLAddrH
				jsr CODE.EmitPCC
				bcs .9

				ldy #SYM.Addr
				lda (ZP.pLSymBuf),y
				eor #$FF
				inc
				jsr CODE.LDAI
				bcs .9

				>LDYA L.PCC.PushLAddrL
				jmp CODE.EmitPCC

* GLOBAL

.1				ldy #SYM.Addr+1
				lda (ZP.pLSymBuf),y
				tax

				dey
				lda (ZP.pLSymBuf),y

				jsr CODE.LDAXI
				bcs .9

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #SYM.Q.CONST
				beq .2

				>LDYA L.PCC.PushIAddr
				jmp CODE.EmitPCC

.2				>LDYA L.PCC.PushUAddr
				jmp CODE.EmitPCC

.9				rts
*--------------------------------------
SYM.GetAddr1	ldy #SYM.SC
				lda (ZP.pLSymBuf),y
				beq .1					SYM.SC.STATIC
* LOCAL
				ldy #SYM.Addr
				lda (ZP.pLSymBuf),y
				eor #$FF
				inc
				jsr CODE.LDAI
				bcs .9

				>LDYA L.PCC.GetLAddr1
				jmp CODE.EmitPCC
* GLOBAL

.1				ldy #SYM.Addr+1
				lda (ZP.pLSymBuf),y
				tax

				dey
				lda (ZP.pLSymBuf),y

				jsr CODE.LDAXI
				bcs .9

				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #SYM.Q.CONST
				beq .2

				>LDYA L.PCC.GetIAddr1
				jmp CODE.EmitPCC

.2				>LDYA L.PCC.GetUAddr1
				jmp CODE.EmitPCC

.9				rts
*--------------------------------------
SYM.AddScope	>LDYA.G CC.ScopeID

				phy
				ldy #SYM.ScopeID+1
				sta (ZP.pLSymBuf),y
				dey
				pla
				sta (ZP.pLSymBuf),y

				rts
*--------------------------------------
SYM.Get			>SS
				>PUSHW.G CC.pSyms
				>PUSHW ZP.pLineBuf
				jsr SCOPE.Push
				>PUSHWI	ZP.pLineBuf		NextPtr
				>KAPI SListLookup
				>SR
				bcs .9

				>STYA.G CC.LSymID		Y,A = KeyID

				>SS
				>PUSHW.G CC.pSyms
				>PUSHW.G CC.LSymID
				>PUSHW ZP.pLSymBuf
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR
				.DO _DBG_SYM=1
			bcs	*
			jsr DEBUG.SYMG
			bcs *
				.FIN
.9				rts
*--------------------------------------
SYM.Update		sec
				.HS 90					BCC
*--------------------------------------
SYM.Store		clc
				bit bPass2
				bmi .8

				>SS

				php

				>PUSHW.G CC.pSyms
				>PUSHW.G CC.LSymID
				>PUSHW ZP.pLSymBuf
				>PUSHWI SYM

				plp
				bcs .3

				>KAPI SListAddData
				>SR

				.DO _DBG_SYM=1
			jsr DEBUG.SYMS
				.FIN

				rts

.3				>KAPI SListSetData
				>SR

				.DO _DBG_SYM=1
			jsr DEBUG.SYMU
				.FIN
				
				rts
				
.8				clc
				rts
*--------------------------------------
SYM.LLookup		lda ScopePtr

.1				pha
				>SS
				tax
				>PUSHW.G CC.pSyms
				>PUSHW ZP.pLineBuf
				txa
				jsr SCOPE.PushA
				>PUSHWI	ZP.pLineBuf		NextPtr
				>KAPI SListLookup
				>SR
				bcc .8

				pla
				beq .9

*				sec
				sbc #SCOPE
				bra .1

.9				lda #E.NOKEY
				sec
				rts

.8				plx						discard ScopePtr

				>SS
				>STYA.G CC.LSymID
				>PUSHW.G CC.pSyms
				>PUSHW.G CC.LSymID
				>PUSHW ZP.pLSymBuf
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR

				.DO _DBG_SYM=1
			bcs *
			jsr DEBUG.SYML
				.FIN

*				clc
				rts
*--------------------------------------
SYM.RLookupYA	>SS
				phy
				pha
				>PUSHW.G CC.pSyms
				>PUSHW ZP.pLineBuf
				pla
				>PUSHA
				pla
				>PUSHA
				>PUSHWI	ZP.pLineBuf		NextPtr
				>KAPI SListLookup
				>SR
				bcc SYM.GetDataYA

				rts
*--------------------------------------
SYM.RLookup		lda ScopePtr

.1				pha
				>SS
				tax
				>PUSHW.G CC.pSyms
				>PUSHW ZP.pLineBuf
				txa
				jsr SCOPE.PushA
				>PUSHWI	ZP.pLineBuf		NextPtr
				>KAPI SListLookup
				>SR
				bcc .8

				pla
				beq .9

*				sec
				sbc #SCOPE
				bra .1

.9				lda #E.NOKEY
				sec
				rts

.8				plx						discard ScopePtr
*--------------------------------------
SYM.GetDataYA	>SS
				>STYA.G DS.RSymID
				>PUSHW.G CC.pSyms
				>PUSHW.G DS.RSymID
				>PUSHW ZP.pRSymBuf
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR

				.DO _DBG_SYM=1
			bcs *
			jsr DEBUG.SYMR
				.FIN

*				clc
				rts
*--------------------------------------
* "_B"reak
* "_C"ontinue
* "_D"efault
* "_E"lse
* "_F"rame Size
* "_J"umpTable
* "_L"oop
* "_P"aram Size
* "_R"eturn value
* "_S"statement
* e"_X"it
*--------------------------------------
SYM.NewLabelA	bit bPass2
				bpl .10

				clc
.98				rts

.10				>STA.G CC.Label+1

				>SS
				>PUSHW.G CC.pSyms
				>PUSHEA.G CC.Label
				jsr SCOPE.Push
				>PUSHWI	0				NextPtr
				>KAPI SListNewKey
				>SR
				bcs .98

				>STYA.G CC.LabelID

				>LDA.G CC.Label+1
				cmp #'F'
				bne .1

				jsr SYM.NewLabelF
				bra .7

.1				cmp #'P'
				bne .2

				jsr SYM.NewLabelP
				bra .7

.2				cmp #'R'
				bne .6

				jsr SYM.NewLabelR
				bra .7

.6				lda #SYM.T.VOID
				>STA.G CC.LabelBuf
				lda #SYM.Q.POINTER
				iny
				sta (pData),y

				iny
				lda #SYM.SC.STATIC
				sta (pData),y

				ldy #CC.LabelBuf+SYM.Addr
				lda ZPCCCode
				sta (pData),y
				iny
				lda ZPCCCode+1
				sta (pData),y

.7				.DO _DBG_SYM=1
			jsr DEBUG.LBLN
				.FIN

				>SS
				>PUSHW.G CC.pSyms
				>PUSHW.G CC.LabelID
				>PUSHEA.G CC.LabelBuf
				>PUSHWI SYM
				>KAPI SListAddData
				>SR

				.DO _DBG_SYM=1
			bcs .99
			jsr DEBUG.LBLS
				.FIN
.99				rts
*--------------------------------------
SYM.NewLabelF	lda #SYM.T.UCHAR
				>STA.G CC.LabelBuf
				lda #0
				iny
				sta (pData),y

				iny
				lda #SYM.SC.AUTO
				sta (pData),y

				ldy ScopePtr
				iny
				iny
				iny
				iny
				lda (ScopeStk),y		#SCOPE.FrameSize

				ldy #CC.LabelBuf+SYM.Addr
				sta (pData),y
				rts
*--------------------------------------
SYM.NewLabelP	lda #SYM.T.UCHAR
				>STA.G CC.LabelBuf
				lda #0
				iny
				sta (pData),y

				iny
				lda #SYM.SC.AUTO
				sta (pData),y

				ldy ScopePtr
				iny
				iny
				iny
				lda (ScopeStk),y		#SCOPE.ParamSize

				ldy #CC.LabelBuf+SYM.Addr
				sta (pData),y
				rts
*--------------------------------------
SYM.NewLabelR	ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				and #$F8				strip off SYM.Q.FUNCTION...
				pha

				lda (ZP.pLSymBuf)
				>STA.G CC.LabelBuf
				pla
				iny
				sta (pData),y

				iny
				lda #SYM.SC.AUTO
				sta (pData),y
				rts
*--------------------------------------
* _R : Y,A = T/Q
* others : X,Y = SYM.Addr
*--------------------------------------
SYM.LookupLabelA
				bit bPass2
				bmi .1

				ldx #0
				ldy #0
				clc
				rts

.1				>STA.G CC.Label+1		A = "B"reak, "C"ontinue...

				lda ScopePtr

.2				pha
				>SS
				tax
				>PUSHW.G CC.pSyms
				>PUSHEA.G CC.Label
				txa
				jsr SCOPE.PushA
				>PUSHWI	0				NextPtr
				>KAPI SListLookup
				>SR
				bcc .3

				pla
				beq .9

*				sec
				sbc #SCOPE
				bra .2

.9				lda #E.NOKEY
				sec
				rts
*--------------------------------------
.3				plx						discard ScopePtr

				>STYA ZPPtr1			KeyID

				>SS
				>PUSHW.G CC.pSyms
				>PUSHw ZPPtr1
				>PUSHWZ					allocate
				>PUSHWI 65535			all
				>PUSHWZ					From Start
				>KAPI SListGetData
				>SR
				bcs .99

				>STYA ZP.pLookup

				>LDA.G CC.Label+1
				cmp #'R'
				beq .4

				ldy #SYM.Addr

				lda (ZP.pLookup),y

				pha

				iny
				lda (ZP.pLookup),y
				pha

				>LDYA ZP.pLookup
				>LIBC Free

				ply
				plx

*				clc

				rts

.4 				ldy #SYM.T				return T/Q

				lda (ZP.pLookup),y

				pha

				iny						#SYM.Q
				lda (ZP.pLookup),y
				pha

				>LDYA ZP.pLookup
				>LIBC Free

				pla
				ply

*				clc


.99				rts
*--------------------------------------
SYM.NextLBuf	clc
				lda ZP.pLSymBuf
				adc #SYM
				sta ZP.pLSymBuf

				lda ZP.pLSymBuf+1
				adc /SYM
				sta ZP.pLSymBuf+1

				rts
*--------------------------------------
SYM.PrevLBuf	sec
				lda ZP.pLSymBuf
				sbc #SYM
				sta ZP.pLSymBuf

				lda ZP.pLSymBuf+1
				sbc /SYM
				sta ZP.pLSymBuf+1

				rts
*--------------------------------------
SYM.NextRBuf	clc
				lda ZP.pRSymBuf
				adc #SYM
				sta ZP.pRSymBuf

				lda ZP.pRSymBuf+1
				adc /SYM
				sta ZP.pRSymBuf+1

				rts
*--------------------------------------
SYM.PrevRBuf	sec
				lda ZP.pRSymBuf
				sbc #SYM
				sta ZP.pRSymBuf

				lda ZP.pRSymBuf+1
				sbc /SYM
				sta ZP.pRSymBuf+1

				rts
*--------------------------------------
* on RT stack : Addr,value
*--------------------------------------
SYM.PopValue	jsr SYM.GetLSymSizeOf
				tax
				dex
				bne .1

				>LDYA L.PCC.PopValue1
				jmp CODE.EmitPCC

.1				cpx #1
				bne .2

				>LDYA L.PCC.PopValue2
				jmp CODE.EmitPCC

.2				jsr CODE.LDXI
				bcs .9

				>LDYA L.PCC.PopValueX
				jmp CODE.EmitPCC

.9				rts
*--------------------------------------
* out : A,X = size
*--------------------------------------
SYM.GetLSymSizeOf
				ldy #SYM.Q
				lda (ZP.pLSymBuf),y
				pha
				lda (ZP.pLSymBuf)		SYM.T
				tay
				pla

SYM.GetYASizeOfInAX

				bit #SYM.Q.PPPOINTER
				beq .1

				lda #2					pointer
				ldx #0

				sec						+1 for hMem Storage
				rts

.1				bit #SYM.Q.AAARRAY
				bne .2

				lda CC.TYPESIZE-1,y
				ldx #0

				clc
				rts

.2				ldx CC.TYPESIZE-1,y

				ldy #SYM.A1
				lda (ZP.pLSymBuf),y
				>PUSHA
				iny
				lda (ZP.pLSymBuf),y
				>PUSHA

				ldy #1

.3				dex
				beq .5

.4				lda (pStack),y
				clc
				adc (pStack),y
				sta (pStack),y

				lda (pStack)
				adc (pStack)
				sta (pStack)
				dex
				bne .4

.5				lda (pStack)
				inc pStack
				tax
				lda (pStack)
				inc pStack

				clc
				rts
*--------------------------------------
* in/out : A,X = size
*--------------------------------------
SYM.SetSizeOf	ldy #SYM.SizeOf
				sta (ZP.pLSymBuf),y

				pha

				iny
				txa
				sta (ZP.pLSymBuf),y

				pla
				rts
*--------------------------------------
SYM.SetAddrCCode
				lda ZPCCCode
				ldy #SYM.Addr
				sta (ZP.pLSymBuf),y

				lda ZPCCCode+1
				iny
				sta (ZP.pLSymBuf),y

				rts
*--------------------------------------
			.DO _DBG_SYM=1
DEBUG.SYMN	>SS
			>PUSHW L.MSG.DEBUG.SYMN
			bra DEBUG.SYM

DEBUG.SYMU	>SS
			>PUSHW L.MSG.DEBUG.SYMU
			bra DEBUG.SYM

DEBUG.SYMS	>SS
			>PUSHW L.MSG.DEBUG.SYMS
			bra DEBUG.SYM

DEBUG.SYMG	>SS
			>PUSHW L.MSG.DEBUG.SYMG
			bra DEBUG.SYM

DEBUG.SYML	>SS
			>PUSHW L.MSG.DEBUG.SYML

DEBUG.SYM	>PUSHW.G CC.LSymID

			lda (ZP.pLSymBuf)			T
			>PUSHA
			ldy #1						Q
			lda (ZP.pLSymBuf),y
			>PUSHA
			iny							SC
			lda (ZP.pLSymBuf),y
			>PUSHA
			iny
			lda (ZP.pLSymBuf),y			Cnt
			>PUSHA

			ldy #SYM.SizeOf+1
			lda (ZP.pLSymBuf),y
			>PUSHA
			dey
			lda (ZP.pLSymBuf),y
			>PUSHA

			ldy #SYM.ScopeID+1
			lda (ZP.pLSymBuf),y
			>PUSHA
			dey
			lda (ZP.pLSymBuf),y
			>PUSHA

			ldy #SYM.Addr+1
			lda (ZP.pLSymBuf),y
			>PUSHA
			dey
			lda (ZP.pLSymBuf),y
			>PUSHA

			>PUSHBI 12
			>LIBC Printf
			>SR
		bcs *	
*		>DEBUG
			rts
*--------------------------------------
DEBUG.SYMR	>SS
			>PUSHW L.MSG.DEBUG.SYMR
			>PUSHW.G DS.RSymID
			lda (ZP.pRSymBuf)		T
			>PUSHA

			ldy #1
			lda (ZP.pRSymBuf),y		Q
			>PUSHA

			iny
			lda (ZP.pRSymBuf),y		SC
			>PUSHA

			iny
			lda (ZP.pRSymBuf),y		Cnt
			>PUSHA

			ldy #SYM.SizeOf+1
			lda (ZP.pRSymBuf),y
			>PUSHA
			dey
			lda (ZP.pRSymBuf),y
			>PUSHA

			ldy #SYM.ScopeID+1
			lda (ZP.pRSymBuf),y
			>PUSHA
			dey
			lda (ZP.pRSymBuf),y
			>PUSHA

			ldy #SYM.Addr+1
			lda (ZP.pRSymBuf),y
			>PUSHA
			dey
			lda (ZP.pRSymBuf),y
			>PUSHA

			>PUSHBI 12
			>LIBC Printf
			>SR
		>DEBUG
		bcs *
			rts
*--------------------------------------
DEBUG.LBLN	>SS
			>PUSHW L.MSG.DEBUG.LBLN
			>PUSHEA.G CC.Label
			>PUSHW.G CC.LabelID
			jsr SCOPE.Push
			ldy #CC.LabelBuf
			lda (pData),y
			>PUSHA
			iny
			lda (pData),y
			>PUSHA
			iny
			lda (pData),y
			>PUSHA
			>PUSHBI 9
			>LIBC Printf
			>SR
			rts
*--------------------------------------
DEBUG.LBLS	>SS
			>PUSHW L.MSG.DEBUG.LBLS
			>PUSHW.G CC.LabelID
			jsr SCOPE.Push
			ldy #CC.LabelBuf
			lda (pData),y
			>PUSHA
			iny
			lda (pData),y
			>PUSHA
			iny
			lda (pData),y
			>PUSHA
			>PUSHBI 7
			>LIBC Printf
			>SR
			rts
			.FIN
*--------------------------------------
MAN
SAVE usr/src/bin/cc.s.sym
LOAD usr/src/bin/cc.s
ASM
