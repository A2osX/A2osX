NEW
  AUTO 3,1
*--------------------------------------
CMD.ALIAS		lda (ZPArgVBufPtr)
				beq .10

				jmp CMD.ALIAS.ADD

.8				clc
				rts

.10				>LDA.G pAliases+1
				beq .8

				ldy #0
				lda #2

.1				>STYA ZPTmpW			Save KeyID

				>SS
				>PUSHW.G pAliases
				>PUSHW ZPTmpW			KeyID
				>PUSHW ZPCLBuf
				>KAPI SListGetByID
				>SR
				bcs .8

				>STYA R1			NextID

				ldy #pAliases
				jsr CORE.SListGetData
				bcs .9

				>STYA ZPTmpW

				>SS
				>PUSHW L.MSG.ALIAS
				>PUSHW ZPCLBuf
				>PUSHW ZPTmpW
				>PUSHBI 4
				>LIBC PrintF
				>SR
				bcs .9

				>LDYA ZPTmpW

				>LIBC Free

				>LDYA R1
				jmp .1

.9				rts

CMD.ALIAS.CSYN	lda #E.CSYN
				sec
				rts
*--------------------------------------
CMD.ALIAS.ADD	>LDYA ZPArgVBufPtr
				>STYA ZPVarNamePtr

				jsr CORE.ArgV.Next
				beq CMD.ALIAS.CSYN

				cmp #'='
				bne CMD.ALIAS.CSYN

				jsr CORE.ArgV.Next
				beq CMD.ALIAS.CSYN

				>LDA.G pAliases+1
				bne .1

*				lda #0
				>KAPI SListNew
				bcs .98

				>STYA.G pAliases

.1				>SS
				>PUSHW.G pAliases
				>PUSHW ZPVarNamePtr
				>PUSHWZ					ScopeID
				>PUSHWZ					NextPtr
				>KAPI SListNewKey
				>SR
.98				bcs .99

				>STYA ZPTmpW			Save KeyID

				>SS
				>PUSHW.G pAliases
				>PUSHW ZPTmpW			KeyID
				>PUSHW ZPArgVBufPtr		DataPtr
				>PUSHWZ					String Mode
				>KAPI SListAddData
				>SR

.99				rts
*--------------------------------------
CMD..			lda (ZPArgVBufPtr)
				beq CMD...9

				>LDYA ZPArgVBufPtr
				>LIBC LoadTxtFile
				bcs CMD.SHIFTA.RTS

				>STYA.G CORE.pNewCode

				>LDYA ZPArgVBufPtr		Exec . file

CMD..RunNewCode	jsr STK.PushCode		Y,A = Args
				bcs CMD.SHIFTA.RTS

				lda #$C0+C..
				jmp STK.PushA

CMD...9			jmp CMD.E.CSYN
*--------------------------------------
CMD.NOHUP		lda (ZPArgVBufPtr)
				beq CMD...9

				lda #S.PS.F.NOHUP
				tsb CORE.PSFlags

				jmp CORE.ExecExtCmd
*--------------------------------------
CMD.SHIFT		lda (ZPArgVBufPtr)
				beq CMD.SHIFT.1

				jsr EXP.GetInt8Exp
				bcs CMD.SHIFTA.RTS
				.HS B0					BCS

CMD.SHIFT.1		inc

CMD.SHIFTA		>KAPI Shift

CMD.SHIFTA.RTS	rts
*--------------------------------------
CMD.PUSHD		>LDA.G PUSHD.STACK
				cmp #PUSHD.STACK.MAX*2+PUSHD.STACK+1
				beq CMD.POPD.CSYN

				>LIBC GetCWD
				>LIBC StrDup
				bcs CMD.POPD.CSYN

				phy
				pha

				>INC.G PUSHD.STACK
				tay
				pla
				sta (pData),y
				iny
				pla
				sta (pData),y
				tya
				>STA.G PUSHD.STACK

				lda (ZPArgVBufPtr)
				bne CMD.CD.0

*				clc
.9				rts
*--------------------------------------
CMD.POPD		>LDA.G PUSHD.STACK
				cmp #PUSHD.STACK
				beq CMD.POPD.CSYN

				tay
				lda (pData),y
				pha
				dey
				lda (pData),y
				ply
				>LIBC ChDir
				bcs .9

				>LDA.G PUSHD.STACK
				dec
				dec
				sta (pData),y

*				clc

.9				rts

CMD.POPD.CSYN	jmp CMD.E.CSYN
*--------------------------------------
CMD...			lda (ZPArgVBufPtr)
				bne CMD.POPD.CSYN

				>LDYA L.CD..
				bra CMD.CD.YA
*--------------------------------------
CMD.CD			lda (ZPArgVBufPtr)
				beq CMD.CD.HOME

CMD.CD.0		>LDYA ZPArgVBufPtr
				bra CMD.CD.YA

CMD.CD.HOME 	>LDYA L.HOME

CMD.CD.YA		>SS
				>PUSHYA
				>PUSHWZ					Allocate
				>LIBC RealPath
				>SR
				bcc .10

				lda #MLI.E.INVPATH		RealPath() returns NULL/ERRNO
*				sec
				rts

.10				>STYA R1

				ldy #1
				lda (R1),y
				beq .14					we have '/'

.12				>LDYA R1
				jsr IO.StatYA
				bcs .19

				cmp /S.STAT.MODE.DIR
				beq .11

				lda #MLI.E.INVPATH

.19				pha
				>LDYA R1
				>LIBC Free
				pla
				sec
				rts

.11				jsr GetPtr1LenY
				dey
				lda #'/'
				cmp (R1),y
				beq .14

				iny
				sta (R1),y
				iny
				lda #0
				sta (R1),y

.14				>LDYA R1
				>LIBC ChDir
.9				rts
*--------------------------------------
CMD.SET			lda (ZPArgVBufPtr)
				bne CMD.SET.1

* No arg, print all ENV

				>LDYAI 0
				>LIBC GetEnv
				>STYA R1

.1				lda (R1)
				beq .8					Ending 0 ?

				>LDYA R1
				>LIBC PutS
				bcs .9

				jsr GetPtr1LenY
				tya
				sec

				adc R1
				sta R1
				bcc .1

				inc R1+1
				bra .1

.8				clc

.9				rts
*--------------------------------------
* SET +X VAR = VALUE1 op VALUE2 op VALUE3 ...
*--------------------------------------
CMD.SET.1
.1				jsr CMD.IsSwitch
				bcs .6

				ldx #SET.VARS-SET.FLAGS-1

.2				cmp SET.FLAGS,x
				bne .3

				lda SET.VARS,x

				eor bState
				sta bState
				bra .5

.3				dex
				bpl .2

.4				cmp #'F'
				bne .99

				jsr CORE.FUNCRESET

.5				jsr CORE.ArgV.Next
				bne .1

				clc
				rts
*--------------------------------------
.6				>LDYA ZPArgVBufPtr
				>STYA ZPVarNamePtr

				jsr CORE.ArgV.Next
				beq CMD.SET.GET

				cmp #'='
				bne .99

				ldy #1
				lda (ZPArgVBufPtr),y
				bne .99

				jsr CORE.ArgV.Next
				beq CMD.SET.UNSET

				cmp #'`'
				beq CMD.SET.EXEC

				jsr EXP.GET
				bcc CMD.SET.YA

				rts

.99				jmp CMD.E.CSYN

CMD.SET.YA		>SS
				pha
				>PUSHW ZPVarNamePtr
				pla
				>PUSHYA
				>PUSHWZ
				>LIBC SetEnv
				>SR
				rts

CMD.SET.UNSET	>LDYA ZPVarNamePtr
				>LIBC UnsetEnv
				rts

CMD.SET.GET		>LDYA ZPVarNamePtr
				>LIBC GetEnv
				bcs .8

				>LIBC PutS

				rts

.8				clc
CMD.SET.RTS		rts
*--------------------------------------
CMD.SET.EXEC	jsr CORE.ArgV.NextChar	skip "`"

				jsr IO.Pipe.Out
				bcs CMD.SET.RTS

				jsr IO.Exec
				bcs CMD.SET.RTS

				jsr IO.Pop.Out			Restore OUT (NO close)

				jsr IO.Pipe.In
				bcs CMD.SET.RTS

*				clc						Silent Mode
				jsr CL.ReadReset

				jmp CMD.READ.VAR
*--------------------------------------
CMD.DATE		>LEA.G TimeBuf
				>LIBC Time

				>SS
				>PUSHW ZPCLBuf

				lda (ZPArgVBufPtr)
				beq .1

				>LDYA ZPArgVBufPtr
				bra .2

.1				>LDYA L.FMT.DATE

.2				>PUSHYA
				>PUSHEA.G TimeBuf
				>LIBC StrFTime
				>SR
				bcs .9

				>LDYA ZPCLBuf
				>LIBC PutS
.9				rts
*--------------------------------------
CMD.ECHO		stz R1				echo -E
				stz R1+1			echo -N

				stz R2				index in buffer

				lda (ZPArgVBufPtr)
				beq .7

.1				jsr CMD.IsSwitch
				bcs .3

				ldx #0
				cmp #'E'
				beq .2

				inx

				cmp #'N'
				bne CMD.ECHO.CSYN

.2				ror R1,x
				bra .6

.3				ldy R2
				beq .4

				lda #C.SPACE
				sta (ZPCLBuf),y
				inc R2

.4				ldy #$ff

.5				iny
				lda (ZPArgVBufPtr),y
				beq .6

				phy
				ldy R2
				sta (ZPCLBuf),y
				inc R2
				ply
				bra .5

.6				jsr CORE.ArgV.Next
				bne .1

.7				ldy R2

				bit R1+1			-N
				bmi .8

				lda #C.CR
				sta (ZPCLBuf),y
				iny
				lda #C.LF
				sta (ZPCLBuf),y
				iny

.8				lda #0
				sta (ZPCLBuf),y

				>LDYA ZPCLBuf
				bit R1
				bmi .80

				jmp IO.OutYA

.80				jmp IO.EscOutYA

.9				rts

CMD.ECHO.CSYN	lda #E.CSYN
				sec

CMD.ECHO.RTS	rts
*--------------------------------------
CMD.READ		lda (ZPArgVBufPtr)
				beq CMD.ECHO.CSYN

				stz ZPVarNamePtr+1

				jsr CL.ReadResetV

.1				jsr CMD.IsSwitch
				bcs .4

				cmp #'S'
				bne .2

				lda #$ff
				>STA.G CL.bSilent
				bra .5

.2				cmp #'P'
				bne .3

				jsr CORE.ArgV.Next
				beq CMD.ECHO.CSYN

				>LDYA ZPArgVBufPtr
				jsr IO.OutYA
				bcs CMD.ECHO.RTS
				bra .5

.3				cmp #'N'
				bne CMD.ECHO.CSYN

				jsr CORE.ArgV.Next
				beq CMD.ECHO.CSYN

				jsr EXP.GetInt8Arg
				bcs CMD.ECHO.RTS

				>STA.G CL.MaxCnt
				bra .5

.4				>LDYA ZPArgVBufPtr
				>STYA ZPVarNamePtr

.5				jsr CORE.ArgV.Next
				bne .1

				lda ZPVarNamePtr+1
				beq CMD.ECHO.CSYN
*--------------------------------------
CMD.READ.VAR	jsr CL.Reset

.1				>LIBC GetChar
				bcs CMD.SLEEP.RTS

				jsr CL.CHARIN

				>LDA.G CL.bReady
				bpl .1

				lda (ZPCLBuf)
				bne .2

				jmp CMD.SET.UNSET

.2				>LDYA ZPCLBuf
				jmp CMD.SET.YA
*--------------------------------------
CMD.SLEEP		lda (ZPArgVBufPtr)
				beq CMD.REN.CSYN

				jsr EXP.GetInt32Arg
				bcs CMD.SLEEP.RTS

				>PULLL.G Sleep

				clc

CMD.SLEEP.RTS	rts
*--------------------------------------
CMD.PAUSE		lda #bState.Pause
				tsb bState

				clc
				rts
*--------------------------------------
CMD.MD			lda (ZPArgVBufPtr)
				beq CMD.REN.CSYN

				>SS
				>PUSHW ZPArgVBufPtr
				>PUSHWI S.STAT.MODE.FO+S.STAT.MODE.FG+S.STAT.MODE.FU
				>LIBC MKDir
				>SR
				rts
*--------------------------------------
CMD.PWD			>LIBC GetCWD

				>LIBC PutS
				rts
*--------------------------------------
CMD.RD			lda (ZPArgVBufPtr)
				beq CMD.REN.CSYN

				jsr IO.StatArgVBufPtr
				bcs .99

				cmp /S.STAT.MODE.DIR
				bne CMD.REN.CSYN

				>LDYA ZPArgVBufPtr
				>LIBC Remove
.99				rts
*--------------------------------------
CMD.REN.CSYN	jmp CMD.E.CSYN
*--------------------------------------
CMD.REN			lda (ZPArgVBufPtr)
				beq CMD.REN.CSYN

				jsr CORE.ArgV.Next
				lda (ZPArgVBufPtr)
				beq CMD.REN.CSYN

				stz R1+1
				stz R2+1

				>SS
				>PUSHW ZPArgVBufPrev	old path
				>PUSHWZ					Allocate
				>LIBC RealPath
				>SR
				bcs CMD.REN.CSYN

				>STYA R1

				ldy #$ff

.1				iny
				lda (R1),y
				beq .2

				cmp #'/'
				bne .1

				tya
				tax
				bra .1

.2				ldy #$ff

.3				iny
				inx
				lda (ZPArgVBufPtr),y
				bne .3

				txa
				tay
				lda #0

				>LIBC Malloc
				bcs .90

				>STYA R2

				ldy #$ff

.4				iny
				lda (R1),y
				beq .5

				sta (R2),y
				cmp #'/'
				bne .4

				tya
				inc
				tax
				bra .4

.5				txa
				tay
				lda #0
				sta (R2),y

				>SS
				>PUSHW R2
				>PUSHW ZPArgVBufPtr
				>LIBC StrCat
				>SR

				>SS
				>PUSHW R1
				>PUSHW R2
				>LIBC Rename
				>SR

.90				php
				pha

				>LDYA R1
				beq .91

				>LIBC Free

.91				>LDYA R2
				beq .92

				>LIBC Free

.92				pla
				plp
				rts
*--------------------------------------
CMD.FUNCTION	lda (ZPArgVBufPtr)
				beq .9
				jsr STK.GetCtx
				bcc .9					No context allowed

				>LDA.G pFunctions+1
				bne .1

				lda #SL..+SL._
				>KAPI SListNew
				bcs .99

				>STYA.G pFunctions

.1				>SS
				>PUSHW.G pFunctions
				>PUSHW ZPArgVBufPtr
				>PUSHWZ					ScopeID
				>PUSHWZ					NextPtr
				>KAPI SListNewKey
				>SR
				bcs .99

				>STYA ZPTmpW			Save KeyID

				jsr CORE.ArgV.Next		nothing after function name
				beq .10

				cmp #'{'
				bne .9

				ldy #1
				lda (ZPArgVBufPtr),y
				beq .11

.9				jmp CMD.E.CSYN

.99				rts
*--------------------------------------
.10				jsr CORE.GetCharNB
				bcs .9

				cmp #'{'
				bne .9

				jsr CORE.GetNextCharNB
				bcs .9

.11				>LDYA ZPInputBufPtr
				>STYA R1

				stz R2
				stz R2+1				DataLen

				ldx #0					'{' counter

				lda (ZPInputBufPtr)
				beq .6

.12				cmp #'{'
				bne .13

				inx
				bra .14

.13				cmp #'}'
				bne .14

				dex
				bmi .7

.14				inc R2
				bne .15

				inc R2+1

.15				jsr CORE.GetNextChar
				bcc .12

.6				txa
				bpl .9

.7				jsr CORE.GetNextChar	skip ending '}'

				>SS
				>PUSHW.G pFunctions
				>PUSHW ZPTmpW			KeyID
				>PUSHW R1				DataPtr
				>PUSHW R2				DataLen
				>KAPI SListAddData
				>SR
				bcs .99

				>SS
				>PUSHW.G pFunctions
				>PUSHW ZPTmpW			KeyID
				>PUSHW L.PtrZero		DataPtr
				>PUSHWI 1				DataLen
				>KAPI SListAddData	Add Ending \0
				>SR
				rts
*--------------------------------------
CMD.CALL		jsr CMD.CALL.GETFUNC
				bcs CMD.CALL.RTS

				>STYA ZPTmpW			KeyID

				ldy #pFunctions
				jsr CORE.SListGetData
				bcs CMD.CALL.RTS

				>STYA.G CORE.pNewCode

				>LDYA ZPArgVBufPtr		FUNC PARAM1 PARAM2...
				jsr STK.PushCode		Exec FUNC
				bcs CMD.CALL.RTS

				lda #$C0+C.CALL
				jmp STK.PushA
*--------------------------------------
CMD.CALL.GETFUNC
				>LDA.G pFunctions+1
				beq .9

				>SS
				>PUSHW.G pFunctions
				>PUSHW ZPArgVBufPtr
				>PUSHWZ					ScopeID
				>PUSHWZ					NextPtr
				>KAPI SListLookup
				>SR
				bcc CMD.CALL.RTS

.9				lda #E.FUNDEF
				sec
CMD.CALL.RTS	rts
*--------------------------------------
CMD.EXIT		lda (ZPArgVBufPtr)
				beq .1					no arg, exit 0

				jsr EXP.GetInt8Exp
				bcs .9

.1				ldy #S.PS.ERRNO
				jsr A2osX.SetPSy

.2				jsr STK.PopA			POP everything until CALL . CL...
				bcs .9

				cmp #$C0+C..			in CALL, "." or CL context ?
				beq .8

				cmp #$C0+C.CALL
				beq .8

				cmp #$C0+C.CLEXEC
				beq .7

				jsr STK.PopCtxA
				bcc .2

.9				rts

.7				lda #bState.ExitOnEOF
				tsb bState

.8				jmp STK.PopCode
*--------------------------------------
CMD.BREAK		jsr STK.GetCtx			Get context in CORE.TestResult
				bcs .9

				tax
				and #$3F

				cmp #C.CASE
				bne .1

				txa
				bpl .8					already FALSE

				jsr STK.PopA			remove C.CASE
				jsr STK.Get				get SWITCH
				bra .7
*--------------------------------------
.1				cmp #C.IF
				bne .2

				sta (pStk),y			IF=false to skip until FI

				iny						get parent context
				beq .9

				lda (pStk),y
				and #$3F

.2				cmp #C.WHILE
				beq .6

.3				cmp #C.FOR
				bne .9

.6				lda (pStk),y

.7				and #%01111111
				sta (pStk),y			WHILE/FOR=false, Parent=unchanged

.8				clc
				rts

.9				jmp CMD.E.CSYN
*--------------------------------------
* stack+1		pVALUE
* stack			SWITCH TOKEN
*--------------------------------------
CMD.SWITCH		jsr STK.GetCtx

				lda #3
				jsr STK.CheckA
				bcs .9

				jsr EXP.GET
				bcs .9

				>LIBC StrDup
				bcs .9

				jsr STK.PushYA			Push EXP VALUE

				lda CORE.TestResult
				beq .1

				ora #$80

.1				ora #C.SWITCH
				jmp STK.PushA

.9				rts
*--------------------------------------
CMD.CASE		jsr STK.GetCtx			Get context in CORE.TestResult
				bcs .9

				tax
				and #$3F
				cmp #C.SWITCH
				beq .1

				cmp #C.CASE
				bne .9

				txa						previous case was true ?
				bpl .10

				jsr EXP.GET				skip expression
				bcs .9

				rts						keep existing context
*--------------------------------------
.10				jsr STK.PopA			remove previous C.CASE
				bra CMD.CASE
*--------------------------------------
.1				jsr EXP.GET
				bcs .9

				>SS
				>PUSHYA
				lda #1					pVALUE
				jsr STK.GetWAtA
				>LIBC StrCmp
				>SR
				ror						CS if !=
				and #$80
				eor #$80
				ora CORE.TestResult
				ora #C.CASE
				jmp STK.PushA
.9
CMD.E.CSYN		lda #E.CSYN
				sec
				rts
*--------------------------------------
CMD.DEFAULT		jsr STK.GetCtx			Get context in CORE.TestResult
				bcs CMD.E.CSYN

				and #$3F

				cmp #C.SWITCH
				beq .1

				cmp #C.CASE
				bne CMD.E.CSYN

				jsr STK.PopA			remove C.CASE

.1				jsr STK.Get
				and #$C0
				ora #C.DEFAULT
				jmp STK.PushA
*--------------------------------------
CMD.END			jsr STK.GetCtx			Get context in CORE.TestResult
				bcs CMD.E.CSYN

				and #$3F

				cmp #C.SWITCH
				beq .8

				cmp #C.CASE
				beq .8

				cmp #C.DEFAULT
				bne CMD.E.CSYN

.8				jmp STK.PopCtx
*--------------------------------------
CMD.FOR			jsr STK.GetCtx

				lda (ZPArgVBufPtr)
				beq CMD.E.CSYN

				>LDYA ZPArgVBufPtr
				>STYA ZPVarNamePtr

				jsr CORE.ArgV.Next
				beq CMD.E.CSYN

				>SS
				>PUSHW L.IN
				>PUSHW ZPArgVBufPtr
				>LIBC StrCaseCmp
				>SR
				bcs CMD.E.CSYN

				jsr CORE.ArgV.Next
				beq CMD.E.CSYN

				lda #10					Make sure 10 bytes free on stack
				jsr STK.CheckA
				bcs FOR.FILE.9

				lda (ZPArgVBufPtr)
				cmp #'('
				beq CMD.FOR.FILE

				cmp #'`'
				beq CMD.FOR.EXEC
*--------------------------------------
CMD.FOR.LIST	>LDYA ZPArgVBufPtr
				>LIBC StrDup
				bcs .9

				>STYA ZPTmpW

				jsr STK.PushInputBufPtr Push CmdPtr AFTER FOR

				>LDYA ZPTmpW
				jsr STK.PushYA			Push pListPtr

				>LDYA ZPTmpW
				jsr STK.PushYA			Push pList for free

				jsr CORE.PushVarName	Push pVARNAME

				lda #C.FOR.LIST
				jsr STK.PushA

				lda #C.FOR
				jsr STK.PushA

				jsr CMD.NEXT.LIST.TOKEN
				bcc CMD.FOR.LOOP

.9				rts
*--------------------------------------
CMD.FOR.FILE	jsr CORE.ArgV.NextChar	skip "("

				>LDYA ZPArgVBufPtr
				ldx	#O.RDONLY+O.TEXT
				jsr IO.FOpenYAX
				bcc CMD.FOR.PUSH

FOR.FILE.9		rts
*--------------------------------------
CMD.FOR.EXEC	jsr CORE.ArgV.NextChar	skip "`"

				jsr IO.Pipe.Out
				bcs FOR.FILE.9

				jsr IO.Exec
				bcs FOR.FILE.9

				jsr IO.Pop.Out			Restore OUT (NO close)

				ldx #O.RDONLY+O.TEXT
				jsr IO.Pipe.Open

				bcs FOR.FILE.9

CMD.FOR.PUSH	pha						save pFILE/pPIPE
				phy

				jsr STK.PushInputBufPtr		Push CmdPtr AFTER FOR

				ply
				pla

				jsr STK.PushYA			push pPIPE for read

				jsr CORE.PushVarName	Push pVARNAME
				bcs FOR.FILE.9

				lda #C.FOR.FILEEXEC
				jsr STK.PushA
				lda #C.FOR
				jsr STK.PushA

				jsr CMD.NEXT.LINE
				bcs FOR.FILE.9

CMD.FOR.LOOP	ora CORE.TestResult
				ora #C.FOR				Push FOR
				ldy StkPtr
				sta (pStk),y

*				clc
				rts
*--------------------------------------
CMD.NEXT		jsr STK.Get				Y = StkPtr
				bcs .9

				and #$3F
				cmp #C.FOR
				bne .9

				iny						FOR SUB TOKEN
				lda (pStk),y
				dey

				tax
				beq CMD.NEXT.LIST

				jmp CMD.NEXT.FILEEXEC

.9				lda #E.NOFOR
				sec
				rts
*--------------------------------------
* stack+8		CmdPtr
* stack+6		ListPtr
* stack+4		pLIST
* stack+2       pVARNAME
* stack+1		FOR SUB TOKEN
* stack			FOR TOKEN
*--------------------------------------
CMD.NEXT.LIST	lda (pStk),y			Y = StkPtr
				bpl .1

				jsr CMD.NEXT.LIST.TOKEN
				bcs .9

				bpl .1

				lda #8
				jsr STK.GetWAtA
				>STYA ZPInputBufPtr

				clc
				rts
*--------------------------------------
.1				lda #2					pVARNAME
				jsr STK.GetWAtA
				>LIBC Free

				lda #4					pLIST
				jsr STK.GetWAtA
				>LIBC Free

				lda StkPtr
				clc
				adc #10
				sta StkPtr

				clc
.9				rts
*--------------------------------------
CMD.NEXT.LIST.TOKEN
				lda #2					pVARNAME
				jsr STK.GetWAtA
				>STYA ZPVarNamePtr

				lda #6					ListPtr
				jsr STK.GetWAtA
				>STYA R1

				ldy #0

.10				jsr GetPtr1NextChar
				beq .3

				cmp #C.SPACE
				beq .10

				sta (ZPCLBuf),y
				iny

.1				jsr GetPtr1NextChar
				beq .3

				cmp #C.SPACE
				beq .3

				sta (ZPCLBuf),y
				iny
				bra .1

.3				lda #0
				sta (ZPCLBuf),y

				tya
				beq .8

				>LDYA ZPCLBuf
				jsr CMD.SET.YA
				bcs .9

				lda StkPtr
				clc
				adc #6					ListPtr
				tay
				lda R1
				sta (pStk),y
				iny
				lda R1+1
				sta (pStk),y

				lda #$80
				clc
.9				rts

.8				jmp CMD.NEXT.END
*--------------------------------------
* stack+6		CmdPtr
* stack+4		pFILE/pPIPE
* stack+2       pVARNAME
* stack+1		FOR SUB TOKEN
* stack			FOR TOKEN
*--------------------------------------
CMD.NEXT.FILEEXEC
				lda (pStk),y			Y = StkPtr
				bpl .8

				jsr CMD.NEXT.LINE
				bcs .9

				bpl .8					end of file/pipe

				lda #6
				jsr STK.GetWAtA
				>STYA ZPInputBufPtr

				clc

.9				rts

.8				lda #2					pVARNAME
				jsr STK.GetWAtA
				>LIBC Free
				bcs .9

				lda #4					pFILE/pPIPE
				jsr STK.GetWAtA
				>LIBC FClose
				bcs .9

				ldx #8
				jmp STK.PopX
*--------------------------------------
CMD.NEXT.LINE	lda #2					pVARNAME
				jsr STK.GetWAtA
				>STYA ZPVarNamePtr

				>SS
				>PUSHW ZPCLBuf
				>PUSHWI 256
				lda #4					pFILE/pPIPE
				jsr STK.GetWAtA
				>PUSHYA
				>LIBC FGetS
				>SR
				bcs CMD.NEXT.END

				>LDYA ZPCLBuf
				jsr CMD.SET.YA
				bcs .9

				lda #$80
*				clc
.9				rts

CMD.NEXT.END	jsr CMD.SET.UNSET
				bcs .9

				lda #0
				clc						keep this CLC for CMD.NEXT.LIST.TOKEN
.9
CMD.NEXT.LINE.RTS
				rts
*--------------------------------------
CMD.WHILE
CMD.IF			jsr STK.GetCtx

				bit #$40				Parent is true ?
				beq .3

				jsr EXP.TEST
				bcs CMD.NEXT.LINE.RTS

.3				lda CORE.IntCmd
				cmp #C.WHILE
				bne .8

				lda #3
				jsr STK.CheckA
				bcs CMD.NEXT.LINE.RTS

				>LDYA ZPInputCmdPtr
				jsr STK.PushYA			Push BEFORE WHILE/IF

.8				lda CORE.TestResult
				ora CORE.IntCmd
				jmp STK.PushA
*--------------------------------------
CMD.LOOP		jsr STK.Get
				bcs .9

				tax
				and #$3F
				cmp #C.WHILE
				bne .9

				txa
				bmi .8					true, loop

				jmp STK.PopCtx			false, Discard loop Ptr

.8 				jsr STK.PopA

				jsr STK.PopYA
				bcs .99

				>STYA ZPInputBufPtr
*				clc
				rts

.9				lda #E.NOWHILE
				sec
.99				rts
*--------------------------------------
CMD.ELSE		jsr STK.Get
				bcs .9

				bit #$40				parent is true ?
				beq .8					no, skip

				tax
				and #$3F
				cmp #C.IF
				bne .9

				txa
				eor #$80				toggle and store at stack ptr
				sta (pStk),y

.8				clc
				rts
.9
CMD.ELSE.NOIF	lda #E.NOIF
				sec
				rts
*--------------------------------------
CMD.FI			jsr STK.PopA
				bcs CMD.ELSE.NOIF

				and #$3F
				cmp #C.IF
				bne CMD.ELSE.NOIF

				clc
				rts
*--------------------------------------
CMD.IsSwitch	lda (ZPArgVBufPtr)
				cmp #'-'
				bne .9

				ldy #1
				lda (ZPArgVBufPtr),y
				beq .9

				cmp #'0'				is -0 ... -9 ?
				bcc .9

				cmp #'9'+1
				bcc .9

				tax
				iny
				lda (ZPArgVBufPtr),y
				bne .9

				txa
				jmp ToUpperCase

.9				sec
				rts
*--------------------------------------
MAN
SAVE usr/src/bin/sh.s.cmd
LOAD usr/src/bin/sh.s
ASM
