NEW
  AUTO 3,1
*--------------------------------------
* LoadLib
*  in :
*   Y,A = PTR To "LibName" C-String
* out :
*   Y,A = pLIB
*--------------------------------------
K.LoadLib		>STYA ZPPtr1
				jsr PS.Find.LIB
				bcs .99

				sec						load in U Memory

				jsr BIN.Load			K.PathBuf = "/LIB/LIBNAME"
				bcs .99

* PS.pBuf = PTR to Code Segment, A1L = CmdLine

				>STYA RAMSW.2AUXJSR+7

				ldx #LIBMGR.LOAD		Pass pLIB to LibLoad

				jsr RAMSW.2AUXJSR		Call LIB.LOAD function

				bcc .8

				jmp BIN.FreeBuf

.8				>LDYA RAMSW.2AUXJSR+7
*				clc
.99				rts
*--------------------------------------
* UnloadLib
*  in :
*   Y,A = pLib
* out :
*--------------------------------------
K.UnloadLib		>STYA RAMSW.2AUXJSR+7

				jsr MEM.GetRefCntX
				bcs .9

				dec
				bne .8

				ldx #LIBMGR.UNLOAD

				jsr RAMSW.2AUXJSR		Call LIB.UNLOAD function

				bcs .9

.8				>LDYA RAMSW.2AUXJSR+7
				jmp K.Free

*				clc

.9				rts
*/--------------------------------------
* # LoadDrv
* ## ASM
*  Y,A = PTR to "NAME.DRV [PARAM]" C-String
* ## RETURN VALUE
* none
*\--------------------------------------
K.LoadDrv		>STYA K.LoadDrv.Args	Save "BIN\0ARGS\0\0"
				>STYA ZPPtr1

				jsr PS.Find.DRV
				bcs .9

				sec						load in U Memory
				jsr BIN.Load			K.PathBuf = "/PATH/BIN"
				bcs .9

* PS.pBuf = PTR to Code Segment, A1L = CmdLine

				>STYA RAMSW.2AUXJSR+7

				>LDYA K.LoadDrv.Args
				>STYA ZPPtr1

				ldy #$ff

.1				iny						Skip "BIN"

.2				jsr RAMSW.xP1gY
				bne .1

				tya
				sec
				adc ZPPtr1
				tay
				lda #0
				adc ZPPtr1+1			Y,A = ARGS

				jsr RAMSW.2AUXJSR		call Dev.Detect

				jsr BIN.FreeBuf
				bcs .9

				lda #0					Make sure RC = 0 if success
*				clc
.9				rts

K.LoadDrv.Args	.BS 2
*--------------------------------------
* BIN.Load
*  in :
*	CC : Load in MAIN, CS Load in AUX
*   K.PathBuf = /BIN/PATH (CSTR)
*   STAT Already called by Filesearch in FindDRV, FindLIB
*   STAT Already called by PS.Load (TXT,BIN,SYS)
* out :
*   Y,A = MEMPTR
*--------------------------------------
BIN.Load		ror A2osX.IOOpt			C = AUX/MAIN

				jsr MEM.FindByBIN
				bcs .10

				>STYA PS.pBuf
				stx PS.hBuf

*				clc						A1L = CmdLine

				rts
*--------------------------------------
.10				lda #O.RDONLY
				sta IO.Flags
				lda #S.FI.T.BIN
				sta IO.Type
				>LDYA K.S.STAT+S.STAT.P.AUXTYPE
				>STYA BIN.R.CS.Start
				>STYA IO.AuxType
				
				stz IO.bTXT				BIN
				jsr PS.LoadFile
				bcs .9					Error Loading file

* file loaded at PS.pBuf

				>STYA ZPPtr1			for relocation

				ldy #H.BIN.CS.END
				bit A2osX.IOOpt
				bpl .2

.1				jsr RAMSW.pBufgY
				sta BIN.R.CS.End-H.BIN.CS.END,y
				iny
				cpy #H.BIN.ID.END+2
				bcc .1

				bra .3

.2				lda (PS.pBuf),y
				sta BIN.R.CS.End-H.BIN.CS.END,y
				iny
				cpy #H.BIN.ID.END+2
				bcc .2

.3				jsr BIN.CompOfsStop		PS.pBuf = actual load address
				jsr BIN.RelExe
				bcs BIN.FreeBuf

				ldy #0

.4				iny
				lda K.PathBuf-1,y
				bne .4

				ldx #S.MEM.F.BIN
				jsr MEM.MallocX.YAX		Y,A = StrLen
				bcs BIN.FreeBuf

				>STYA A1L				dst
				ldx PS.hBuf
				jsr MEM.AddBIN

				sta IO.SETWRITEAUX

				ldy #$ff

.5				iny
				lda K.PathBuf,y
				sta (A1L),y
				bne .5

				sta IO.CLRWRITEAUX

				>LDYA PS.pBuf

				clc

.9				rts
*--------------------------------------
BIN.FreeBuf		php
				pha
				>LDYA PS.pBuf
				bit A2osX.IOOpt
				bpl .1

				jsr K.Free

				pla
				plp
				rts						Discard Loaded Code, exits CS

.1				jsr MEM.FreeYA

				pla
				plp
				rts
*--------------------------------------
BIN.FClose		php
				pha
				phy
				>LDYA pFILE
				jsr K.FClose
				ply
				pla
				plp
				rts
*/--------------------------------------
* # InsDrv
* ## ASM
* `>PUSHW src
* `>PUSHW drvcsstart
* `>PUSHW drvcsend
* `>PUSHW drvidend
* `>LIBC insdrv`
* ## RETURN VALUE
* Y,A = Ptr to installed driver
*\--------------------------------------
K.InsDrv		ldy #6					src
				jsr RAMSW.GetStkYW
				>STYA A1L				...for move...

				ldy #4					drvcsstart
				jsr RAMSW.GetStkYW
				>STYA BIN.R.CS.Start

				ldy #2					drvcsend
				jsr RAMSW.GetStkYW
				>STYA BIN.R.CS.End

				jsr RAMSW.GetStk		drvidend

				sta BIN.R.ID.End
				sec
				sbc BIN.R.CS.Start
				sta BIN.R.Size
				sta A4L					...for move...

				ldy #1
				jsr RAMSW.GetStkY
				sta BIN.R.ID.End+1
				sbc BIN.R.CS.Start+1
				sta BIN.R.Size+1
				sta A4L+1				...for move...

				ldy BIN.R.Size
				jsr MEM.Malloc			Y,A = CODE + DATA
				bcs .9					No More Room to load Driver

				>STYA ZPPtr1			Y,A = DST Buf for RelDrv...
				>STYA A2L				...for move...
				sty .7+1				...and for exit
				sta .8+1
				jsr BIN.CompOfsStop

				jsr MEM.CpyX2M

				clc
				ror A2osX.IOOpt			Relocate in Main....

				jsr BIN.RelDrv			Relocate at Ptr1

				asl A2osX.IOOpt

.7				ldy #$ff				SELF MODIFIED
.8				lda #$ff				SELF MODIFIED

				clc

.9				rts
*--------------------------------------
BIN.RelExe		ldy #H.BIN.T+1

				bit A2osX.IOOpt
				bmi .2

				lda (ZPPtr1),y
				cmp /H.BIN.T.BIN65
				bne .9

				ldy #H.BIN.V
				lda (ZPPtr1),y
				cmp #2
				bne .9

				bra .8

.2				jsr RAMSW.xP1gY
				cmp /H.BIN.T.BIN65
				beq .7

				cmp /H.BIN.T.DRV65
				beq .7

.9				lda #E.IBIN
				sec
				rts

.7				ldy #H.BIN.V
				jsr RAMSW.xP1gY
				cmp #2
				bne .9

.8				ldy #H.BIN.JMP			relocate Main JMP

				jsr BIN.RelAtPtr1Y

				ldy #16					skip Header, CS.SIZE & DS.SIZE... (16 bytes)

				.HS 2C					bit abs
*--------------------------------------
BIN.RelDrv		ldy #2					start after CLD JMP

.1				jsr BIN.GetWAtPtr1Y
				beq .2					$00xx = end of table

				jsr BIN.RelAX

				iny
				bne .1

				inc ZPPtr1+1

				bra .1
*--------------------------------------
.2				jsr SHARED.AddYp12P1	add current offset in Y to Ptr
*										+ 1 to skip last 00 from beq .2
*										ZPPtr1=Current Code PTR

.3				jsr BIN.GetOpCode
				lsr						/2
				tax
				lda BIN.65R02,x			get OPCODE definition
				bcs .4					go get LO nibble

				lsr
				lsr						move HI -> LO
				lsr
				lsr

.4				and #$0f
				bit #$8					abs addressing?
				beq .5					no....

				and #7					save Opcode length...
				pha
				ldy #1
				jsr BIN.RelAtPtr1Y
				pla						get back Opcode length...

.5				clc						A = OPCODE length
				adc ZPPtr1
				sta ZPPtr1
				bcc .6

				inc ZPPtr1+1

.6				cmp BIN.R.Stop			A = ZPPtr1
				bne .3

				lda ZPPtr1+1
				sbc BIN.R.Stop+1
				bcc .3					next opcode....

				clc						Make sure exit with CC
				rts
*-------------------------------------- YA = Target Address
BIN.CompOfsStop	lda ZPPtr1
				sec
				sbc BIN.R.CS.Start
				sta BIN.R.Offset
				lda ZPPtr1+1
				sbc BIN.R.CS.Start+1
				sta BIN.R.Offset+1

				lda BIN.R.CS.End
				clc
				adc BIN.R.Offset
				sta BIN.R.Stop
				lda BIN.R.CS.End+1
				adc BIN.R.Offset+1
				sta BIN.R.Stop+1

				rts
*--------------------------------------
BIN.GetOpCode	bit A2osX.IOOpt
				bmi .1

				lda (ZPPtr1)
				rts

.1				jmp RAMSW.xP1g
*--------------------------------------
BIN.RelAtPtr1Y	jsr BIN.GetWAtPtr1Y

BIN.RelAX		pha

				cpx BIN.R.CS.Start
				sbc BIN.R.CS.Start+1
				pla
				bcc .9					addr < BIN.R.CS.Start, out of range

				pha

				cpx BIN.R.ID.End
				sbc BIN.R.ID.End+1
				pla
				bcs .9					addr > BIN.R.End, out of range

				bit A2osX.IOOpt
				bpl .8

				sta IO.SETWRITEAUX

.8				pha

				txa						Get back LO
				dey
				clc
				adc BIN.R.Offset
				sta (ZPPtr1),y

				iny
				pla
				adc BIN.R.Offset+1
				sta (ZPPtr1),y

				sta IO.CLRWRITEAUX

.9				rts
*--------------------------------------
BIN.GetWAtPtr1Y	bit A2osX.IOOpt
				bmi .1

				lda (ZPPtr1),y
				tax
				iny
				lda (ZPPtr1),y

				rts

.1				jsr RAMSW.xP1gY			Get LO
				tax						save LO in X
				iny						make Y point to HI
				jmp RAMSW.xP1gY			Get HI
*--------------------------------------
* 6502/65C02/65816 OPCODES
* Bit 3 	: 1 = absolute addressing
* Bit 2-1-0 : opcode + @ length
*--------------------------------------
*					0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F
* BIN.65816
*	TO DO : Make 2 different tables
*--------------------------------------
* 65R02 OPCODES
*--------------------------------------
*					0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F
BIN.65R02		.HS 1.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.B.B.B.3
				.HS B.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.B.B.B.3
				.HS 1.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.1.B.B.3
				.HS 1.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.1.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.2.1.1.B.B.B.3
				.HS 2.2.2.1.2.2.2.2.1.B.1.1.1.B.B.3
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.bin
LOAD usr/src/sys/kernel.s
ASM
