NEW
  AUTO 3,1
*--------------------------------------
* http://www.txbobsc.com/scsc/scdocumentor/E7A0.html
*--------------------------------------
*/--------------------------------------
* # FAdd,FSub,FMul,FDiv,FMod
* Return X*Y, X/Y, X+Y, X-Y
* ## ASM
* `>PUSHF X (float)`
* `>PUSHF Y (float)`
* `>FPU fmul`
* `>FPU fdiv`
* `>FPU fmod`							TODO
* `>FPU fadd`
* `>FPU fsub`
* ## RETURN VALUE
*  On stack (float)
*\--------------------------------------
FPU				jsr RAMSW.pStack2FAC	Get float from stack

				lda pStack
				clc
				adc #5
				sta pStack				POP ARG
				ldy pStack+1
				jsr RAMSW.AY2ARG
				
				bit	IO.RROMWRAMBNK2

				jsr .7

				ldy #0
				jmp MF.FAC2pStackY

.7				jmp (.8-FPU.fMUL,x)

.8				.DA $E987				FMULTT.1
				.DA $EA6B				FDIVT+2
				.DA 0					fMOD
				.DA $E7C1				FADDT
				.DA $E7AA				FSUBT
*/--------------------------------------
* # float
* Return 'floated' long
* ## C
* `float f = (float)l;
* ## ASM
* `>PUSHL l` (long)
* `>FPU float`
* ## RETURN VALUE
*  On stack (float)
*\--------------------------------------
LCSW.Float		ldy #3

.1				jsr RAMSW.GetStkY
				sta FAC+1,y				Reverse Order
				dey
				bpl .1

				dec pStack				keep 5 bytes on stack
				stz	FAC.SIGN
				lda #$80+32
				sta FAC					Positive + Exp=32
				
				bit	IO.RROMWRAMBNK2
				
				jsr $E82E				NORMALIZE.FAC.2 (L->F)

				ldy #0
*--------------------------------------
MF.FAC2pStackY	sty .1+1

				bit	IO.RROMWRAMBNK2

				jsr $EB72				ROUND.FAC : ROUND FAC USING EXTENSION BYTE

				bit IO.RRAMWRAMBNK2

				sta IO.SETWRITEAUX

.1				ldy #$FF				SELF MODIFIED

				lda FAC
				sta (pStack),y

				iny

				lda FAC.SIGN
				ora #$7f
				and FAC+1
				sta (pStack),y

				iny

				lda FAC+2
				sta (pStack),y

				iny

				lda FAC+3
				sta (pStack),y

				iny

				lda FAC+4
				sta (pStack),y

				sta IO.CLRWRITEAUX
				rts
*--------------------------------------
* -.1234E-03
*--------------------------------------
MF.Str2FAC		ldx #10

.1				stz TMPEXP,x
				dex
				bpl .1

				jsr RAMSW.xTXTPTRg
				beq .8

				jsr ZP.IsDigit
				bcc .4					12345

				cmp #'-'
				bne .2

				dec SERLEN				-12345
				bra .3

.2				cmp #'+'
				beq .3					+12345

				cmp #'.'				.12345
				bne .8

				dec DPFLG

.3				jsr RAMSW.xTXTPTRng
				beq .8

				jsr ZP.IsDigit
				bcc .4					12345

				cmp #'.'				.12345
				bne .5

				bit DPFLG
				bmi .8					.12345.

				dec DPFLG
				bra .3

.4				bit DPFLG
				bpl .40
				
				inc TMPEXP   
				
.40				bit	IO.RROMWRAMBNK2

				pha

				jsr $EA39				MUL10 : FAC = FAC * 10		

				pla
				and #$0F

				jsr $ECD5				ADDACC : ADD THE DIGIT

				bit IO.RRAMWRAMBNK2

				bra .3

.5				cmp #'E'
				bne .8					.12345E

				jsr RAMSW.xTXTPTRng
				beq .8

				jsr ZP.IsDigit
				bcc .7

				cmp #'+'
				beq .6					+12345E+

				cmp #'.'
				bne .8

				dec EXPSGN   			.12345E-

.6				jsr RAMSW.xTXTPTRng		.12345E-12
				beq .8

				jsr ZP.IsDigit
				bcs .8

.7				pha

				lda EXPON
				asl
				asl
*				clc
				adc EXPON
				asl
				sta EXPON

				pla
*				clc
				adc EXPON
				sta EXPON
				bra .6

.8				bit	IO.RROMWRAMBNK2

				jsr $EC9E				FIN.7 : NUMBER TERMINATED, ADJUST EXPONENT NOW

				bit IO.RRAMWRAMBNK2
				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.fpu
LOAD usr/src/sys/kernel.s
ASM
