NEW
  AUTO 3,1
*/--------------------------------------
* # SListGetData
* ## ASM
* `>PUSHB hSList`
* `>PUSHW KeyID`
* `>PUSHW DataPtr` (0 if KERNEL should allocate a buffer)
* `>PUSHW DataLen` (Data bytes to return, 0 if String mode)
* `>PUSHW DataOfs` (Start offset in Data)
* `>SYSCALL SListGetData`
* ## RETURN VALUE
*  Y,A = Byte Count
*  X = hMem (if DataPtr = 0)
*\--------------------------------------
K.SListGetData	>PULLW ZPSListDataOfs
*/--------------------------------------
* # SListAddData
* ## ASM
* `>PUSHB hSList`
* `>PUSHW KeyID`
* `>PUSHW DataPtr`
* `>PUSHW DataLen` (Data bytes to add, 0 if String mode)
* `>SYSCALL SListAddData`
* ## RETURN VALUE
*\--------------------------------------
K.SListAddData
*/--------------------------------------
* # SListSetData
* ## ASM
* `>PUSHB hSList`
* `>PUSHW KeyID`
* `>PUSHW DataPtr`
* `>PUSHW DataLen` (Data bytes to set, 0 if String mode)
* `>SYSCALL SListSetData`
* ## RETURN VALUE
*\--------------------------------------
K.SListSetData	>PULLW ZPSListDataLen
				jmp K.SYSCALL.JMPX2A
*/--------------------------------------
* # SListGetByID
* ## ASM
* `>PUSHB hSList`
* `>PUSHW KeyID`
* `>PUSHW KeyPtr`
* `>SYSCALL SListGetByID`
* ## RETURN VALUE
*  Y,A = Next KeyID
*\--------------------------------------
K.SListGetByID	.EQ K.SYSCALL.JMPX2A
*				>PULLW FORPNT
*				>PULLW TXTPTR
*				>PULLA
*/--------------------------------------
* # SListNewKey
* ## ASM
* `>PUSHB hSList`
* `>PUSHW KeyPtr`
* `>PUSHW ScopeID`
* `>SYSCALL SListNewKey`
* ## RETURN VALUE
*  Y,A = KeyID
*  X = KeyLen
*\--------------------------------------
K.SListNewKey	.EQ K.SYSCALL.JMPX2A
*				>PULLW FORPNT
*				>PULLW TXTPTR
*				>PULLA
*/--------------------------------------
* # SListLookup
* ## ASM
* `>PUSHB hSList`
* `>PUSHW KeyPtr`
* `>PUSHW ScopeID`
* `>SYSCALL SListLookup`
* ## RETURN VALUE
*  Y,A = KeyID
*  X = Key Length
*\--------------------------------------
K.SListLookup	.EQ K.SYSCALL.JMPX2A
*				>PULLW FORPNT
*				>PULLW TXTPTR
*				>PULLA
*/--------------------------------------
* # SListFree
* ## ASM
* `lda hSList`
* `>SYSCALL SListFree`
* ## RETURN VALUE
*\--------------------------------------
K.SListFree		.EQ K.SYSCALL.JMPX
*/--------------------------------------
* # SListNew
* ## ASM
* `lda Opt`
* `>SYSCALL SListNew`
* ## RETURN VALUE
* A=hSList
*\--------------------------------------
K.SListNew		.EQ K.SYSCALL.JMPX
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.slist
LOAD usr/src/sys/kernel.s
ASM
