NEW
  AUTO 3,1
*--------------------------------------
INT				jmp (.1,x)
*--------------------------------------
.1				.DA M16.uMUL
				.DA M16.uDIV
				.DA M16.uMOD
				.DA M16.ADD
				.DA M16.SUB

				.DA M16.SHL
				.DA M16.SHR

				.DA M16.L
				.DA M16.LE
				.DA M16.G
				.DA M16.GE
				.DA M16.E
				.DA M16.NE

				.DA M16.AND
				.DA M16.OR
				.DA M16.XOR

				.DA M16.LAND
				.DA M16.LOR
*--------------------------------------
				.DA M16.iMUL
				.DA M16.iDIV
				.DA M16.iMOD
				.DA M16.ADD
				.DA M16.SUB

				.DA M16.SHL
				.DA M16.SHR

				.DA M16.L
				.DA M16.LE
				.DA M16.G
				.DA M16.GE
				.DA M16.E
				.DA M16.NE

				.DA M16.AND
				.DA M16.OR
				.DA M16.XOR

				.DA M16.LAND
				.DA M16.LOR
*--------------------------------------
				.DA M32.uMUL
				.DA M32.uDIV
				.DA M32.uMOD
				.DA M32.ADD
				.DA M32.SUB

				.DA M32.SHL
				.DA M32.SHR

				.DA M32.L
				.DA M32.LE
				.DA M32.G
				.DA M32.GE
				.DA M32.E
				.DA M32.NE

				.DA M32.AND
				.DA M32.OR
				.DA M32.XOR

				.DA M32.LAND
				.DA M32.LOR
*--------------------------------------
				.DA M32.iMUL
				.DA M32.iDIV
				.DA M32.iMOD
				.DA M32.ADD
				.DA M32.SUB

				.DA M32.SHL
				.DA M32.SHR

				.DA M32.L
				.DA M32.LE
				.DA M32.G
				.DA M32.GE
				.DA M32.E
				.DA M32.NE

				.DA M32.AND
				.DA M32.OR
				.DA M32.XOR

				.DA M32.LAND
				.DA M32.LOR
*--------------------------------------
M16.AND			lda #$32				AND (zp)
				.HS 2C					BIT ABS
M16.OR			lda #$12				ORA (zp)
				.HS 2C					BIT ABS
M16.XOR			lda #$52				EOR (zp)
				.HS 2C					BIT ABS
M16.ADD			lda #$72				ADC (zp)
				.HS 2C					BIT ABS
M16.SUB			lda #$F2				SBC (zp)

				sta .3

				asl						CS if SBC, CC if ADC

				ldy #2
				ldx #2

.2				lda (pStack),y
.3				adc (pStack)			SELF MODIFIED
				sta (pStack),y

				inc pStack
				dex
				bne .2

				rts
*--------------------------------------
M16.SHL			sec
				.HS 90					BCC
M16.SHR			clc

				lda (pStack)
				inc pStack
				inc pStack

				tax
				beq .8

				ldy #1

				bcc .3

.1				lda (pStack)
				asl
				sta (pStack)

				lda (pStack),y
				rol
				sta (pStack),y

				dex
				bne .1

.8				rts
*--------------------------------------
.3				lda (pStack),y
				lsr
				sta (pStack),y

				lda (pStack)
				ror
				sta (pStack)

				dex
				bne .3

				rts
*--------------------------------------
M16.L			ldx #0
				.HS 2C					BIT ABS
M16.LE			ldx #1
				.HS 2C					BIT ABS
M16.G			ldx #2
				.HS 2C					BIT ABS
M16.GE			ldx #3
				.HS 2C					BIT ABS
M16.E			ldx #4
				.HS 2C					BIT ABS
M16.NE			ldx #5
*--------------------------------------
M16.CMP			lda INT.CMPT,x
				sta .3+1

				jsr M16.SUB

				tay						A = BYTE 1
				bmi .1

				ora (pStack)			BYTE 0
				beq .2

				lda #%001
				.HS 2C					BIT ABS

.1				lda #%100
				.HS 2C					BIT ABS

.2				lda #%010

.3				and #$ff				SELF MODIFIED
				bra M16.LOR2
*--------------------------------------
M16.LAND		jsr M16.AND
				bra M16.LOR1

M16.LOR			jsr M16.OR

M16.LOR1		ldy #1

				lda (pStack)
				ora (pStack),y

M16.LOR2		beq .1

				lda #1

.1				sta (pStack)

				lda #0

				ldy #1

				sta (pStack),y

				rts
*--------------------------------------
M16.uMUL		clc
				.HS B0					BCS
M16.iMUL		sec

				php
				jsr M16.MULDIVMOD
				jsr M16.MUL

				plp
				bcc M16.PutTMP

M16.iTMP		lda ACC32.Sign
				eor ARG32.Sign
				bpl M16.PutTMP
*--------------------------------------
* M16.PutnTMP
*--------------------------------------
				lda #TMP32
				.HS 2C					BIT ABS
*--------------------------------------
M16.PutnARG		lda #ARG32
				sta .1+1
				ldy #0
				ldx #3
				sec

.1				lda $ff,y				SELF MODIFIED
				eor #$ff				two's complement of X bytes
				adc #0
				sta (pStack),y
				iny
				dex
				bpl .1

				rts
*--------------------------------------
M16.uDIV		clc
				.HS B0					BCS
M16.iDIV		sec
				clv
				bra M16.MOD

M16.uMOD		clc
				.HS B0					BCS
M16.iMOD		sec
				bit M16.RTS				Set V

M16.MOD			php
				jsr M16.MULDIVMOD
				jsr M16.DIVMOD

				plp
				bcc .3					unsigned

				bvs M16.iTMP			return iTMP

				lda ACC32.Sign			IDIV
				eor ARG32.Sign
				bpl M16.PutARG
				bra M16.PutnARG

.3				bvc M16.PutARG			DIV
*--------------------------------------
M16.PutTMP		ldy #TMP32				MOD
				.HS 2C					BIT ABS
*--------------------------------------
M16.PutARG		ldy #ARG32

				lda $0,y
				sta (pStack)

				lda $1,y
				ldy #1
				sta (pStack),y

M16.RTS			rts
*--------------------------------------
M16.MULDIVMOD	lda (pStack)
				sta ACC32
				inc pStack
				
				lda (pStack)
				sta ACC32+1
				inc pStack
				
				sta ACC32.Sign

				lda (pStack)
				sta ARG32

				ldy #1
				lda (pStack),y
				sta ARG32+1

				sta ARG32.Sign

				bcc M16.RTS
				jsr .1
*--------------------------------------
* M16.ARG32ABS
*--------------------------------------
				lda ARG32.Sign
				bmi .2
				rts
*--------------------------------------
* M16.ACC32ABS
*--------------------------------------
.1				lda ACC32.Sign
				bpl M16.RTS
*--------------------------------------
* M16.nACC
*--------------------------------------
				ldy #ACC32
				.HS 2C					BIT ABS
*--------------------------------------
* M16.nARG32
*--------------------------------------
.2				ldy #ARG32

				sec

				lda $0,y
				eor #$ff
				adc #0
				sta $0,y

				lda $1,y
				eor #$ff
				adc #0
				sta $1,y

				rts
*--------------------------------------
M16.MUL			stz TMP32
				stz TMP32+1

				ldx #16
.1				lsr ARG32+1
				ror ARG32
				bcc .3

				clc

.2				lda TMP32
				adc ACC32
				sta TMP32

				lda TMP32+1
				adc ACC32+1
				sta TMP32+1

.3				asl ACC32
				rol ACC32+1

				dex
				bne .1

				rts
*--------------------------------------
M16.DIVMOD		stz TMP32
				stz TMP32+1

				ldx #16

.1				asl ARG32
				rol ARG32+1

				rol TMP32
				rol TMP32+1

				sec
				lda TMP32
				sbc ACC32
				tay
				lda TMP32+1
				sbc ACC32+1
				bcc .2

				sty TMP32
				sta TMP32+1
				inc ARG32				bit0 always 0 because of .1 asl

.2				dex
				bne .1

				rts
*/--------------------------------------
* # Add32,Sub32,Mul32,IMul32,Div32,IDiv32,Mod32,IMod32,Cmp32,ICmp32
* Return X+Y, X-Y, X*Y, X/Y, X mod Y....
* ## ASM
* `>PUSHL X (long)`
* `>PUSHL Y (long)`
* `>FPU add32`
* `...`
* ## RETURN VALUE
*  On stack (long)
*\--------------------------------------
M32.AND			lda #$32				AND (zp)
				.HS 2C					BIT ABS
M32.OR			lda #$12				ORA (zp)
				.HS 2C					BIT ABS
M32.XOR			lda #$52				EOR (zp)
				.HS 2C					BIT ABS
M32.ADD			lda #$72				ADC (zp)
				.HS 2C					BIT ABS
M32.SUB			lda #$F2				SBC (zp)

				sta .2

				asl						CS if SBC, CC if ADC others = don't care

				ldy #4
				ldx #4

.1				lda (pStack),y
.2				adc (pStack)			SELF MODIFIED
				sta (pStack),y

				inc pStack
				dex
				bne .1

				rts
*--------------------------------------
M32.SHL			sec
				.HS 90					BCC
M32.SHR			clc

				lda (pStack)
				inc pStack
				inc pStack
				inc pStack
				inc pStack
				
				tax
				beq .8
				bcc .3

.1				ldy #0
				
				clc

.2				lda (pStack),y
				rol
				sta (pStack),y

				iny
				tya
				eor #4
				bne .2
				
				dex
				bne .1
				
.8				rts
*--------------------------------------
.3				ldy #3

				clc

.4				lda (pStack),y
				ror
				sta (pStack),y

				dey
				bpl .4

				dex
				bne .3
				
				rts
*--------------------------------------
M32.L			ldx #0	
				.HS 2C					BIT ABS
M32.LE			ldx #1	
				.HS 2C					BIT ABS
M32.G			ldx #2	
				.HS 2C					BIT ABS
M32.GE			ldx #3	
				.HS 2C					BIT ABS
M32.E			ldx #4	
				.HS 2C					BIT ABS
M32.NE			ldx #5
*--------------------------------------
M32.CMP			lda INT.CMPT,x
				sta .3+1
				
				jsr M32.SUB

				tay						A = BYTE 3
				bmi .1

				ldy #2

.10				ora (pStack),y
				dey
				bpl .10
				
				tay
				beq .2

				lda #%001
				.HS 2C					BIT ABS

.1				lda #%100
				.HS 2C					BIT ABS

.2				lda #%010

.3				and #$ff				SELF MODIFIED
				bra M32.LOR2
*--------------------------------------
M32.LAND		jsr M32.AND
				bra M32.LOR1
				
M32.LOR			jsr M32.OR

M32.LOR1		lda (pStack)

				ldy #3
				
.1				ora (pStack),y
				dey
				bne .1

				tay

M32.LOR2		beq .1
				
				lda #1
				
.1				sta (pStack)
				
				lda #0

				ldy #3

.2				sta (pStack),y
				dey
				bne .2
				
				rts
*--------------------------------------
M32.uMUL		clc
				.HS B0					BCS
M32.iMUL		sec

				php
				jsr M32.MULDIVMOD
				jsr M32.MUL

				plp
				bcc M32.PutTMP

M32.iTMP		lda ACC32.Sign
				eor ARG32.Sign
				bpl M32.PutTMP
*--------------------------------------
* M32.PutnTMP
*--------------------------------------
				lda #TMP32
				.HS 2C					BIT ABS
*--------------------------------------
M32.PutnARG		lda #ARG32
				sta .1+1
				ldy #0
				ldx #3
				sec

.1				lda $ff,y				SELF MODIFIED
				eor #$ff				two's complement of X bytes
				adc #0
				sta (pStack),y
				iny
				dex
				bpl .1

				rts
*--------------------------------------
M32.uDIV		clc
				.HS B0					BCS
M32.iDIV		sec
				clv
				bra M32.MOD
				
M32.uMOD		clc
				.HS B0					BCS
M32.iMOD		sec
				bit M32.RTS				$60

M32.MOD			php
				jsr M32.MULDIVMOD
				jsr M32.DIVMOD

				plp
				bcc .3					unsigned

				bvs M32.iTMP			return iTMP

				lda ACC32.Sign			IDIV
				eor ARG32.Sign
				bpl M32.PutARG
				bra M32.PutnARG

.3				bvc M32.PutARG			DIV
*--------------------------------------
M32.PutTMP		lda #TMP32				MOD
				.HS 2C					BIT ABS
*--------------------------------------
M32.PutARG		lda #ARG32
				sta .1+1
				
				ldy #3
				
.1				lda $ff,y				SELF MODIFIED
				sta (pStack),y
				dey
				bpl .1

				rts
*--------------------------------------
M32.PopACC		ldy #0

.1				lda (pStack)
				inc pStack
				sta ACC32,y
				iny
				cpy #4
				bne .1

				sta ACC32.Sign
				rts
*--------------------------------------
M32.GetARG		ldy #0

.1				lda (pStack),y
				sta ARG32,y
				iny
				cpy #4
				bne .1

				sta ARG32.Sign

M32.RTS			rts
*--------------------------------------
M32.MULDIVMOD	php
				jsr M32.PopACC
				jsr M32.GetARG
				plp
				bcc M32.RTS
				jsr .1
*--------------------------------------
* M32.ARG32ABS	
*--------------------------------------
				lda ARG32.Sign
				bmi M32.nARG
				rts
*--------------------------------------
* M32.ACC32ABS
*--------------------------------------
.1				lda ACC32.Sign
				bpl M32.RTS
*--------------------------------------
M32.nACC		ldy #ACC32
				.HS 2C					BIT ABS
M32.nARG		ldy #ARG32

				ldx #3
				sec

.1				lda $0,y				two's complement of X bytes
				eor #$ff
				adc #0
				sta $0,y
				iny
				dex
				bpl .1

				rts
*--------------------------------------
* http://6502.org/source/integers/32muldiv.htm
* http://nparker.llx.com/a2/mult.html
*--------------------------------------
* ARG32*ACC32->TMP32
*--------------------------------------
M32.MUL			jsr M32.TMP32Z
				ldx #32

.1				lsr ARG32+3
				ror ARG32+2
				ror ARG32+1
				ror ARG32
				bcc .3

				clc

				ldy #0

.2				lda TMP32,y
				adc ACC32,y
				sta TMP32,y

				iny
				tya
				eor #4
				bne .2

.3				asl ACC32
				rol ACC32+1
				rol ACC32+2
				rol ACC32+3
				
				dex
				bne .1

				rts
*--------------------------------------
* ARG32 = ARG32 div ACC32
* TMP32 = ARG32 mod ACC32
*--------------------------------------
M32.DIVMOD		jsr M32.TMP32Z
				
				ldx #32
				
.1				asl ARG32
				rol ARG32+1
				rol ARG32+2
				rol ARG32+3

				rol TMP32
				rol TMP32+1
				rol TMP32+2
				rol TMP32+3

				sec 

				lda TMP32
				sbc ACC32
				pha
				lda TMP32+1
				sbc ACC32+1
				pha
				lda TMP32+2
				sbc ACC32+2
				pha
				lda TMP32+3
				sbc ACC32+3
				bcs .2
				
				pla
				pla
				pla
				dex
				bne .1

				rts
				
.2				sta TMP32+3
				pla
				sta TMP32+2
				pla
				sta TMP32+1
				pla
				sta TMP32
				inc ARG32				bit0 always 0 because of .1 asl

				dex
				bne .1

				rts
*--------------------------------------
M32.A2ACC32		sta ACC32
				.HS 2C					BIT ABS
M32.ACC32Z		stz ACC32
				stz ACC32+1
				stz ACC32+2
				stz ACC32+3
				rts
*--------------------------------------
M32.TMP32Z		stz TMP32
				stz TMP32+1
				stz TMP32+2
				stz TMP32+3
				rts
*--------------------------------------
INT.CMPT		.DA #%100				L
				.DA #%110				LE
				.DA #%001				G
				.DA #%011				GE
				.DA #%010				E
				.DA #%101				NE
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.int
LOAD usr/src/sys/kernel.s
ASM
