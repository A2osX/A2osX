NEW
  AUTO 3,1
*/--------------------------------------
* # Realloc
* ## C / CSH
* `#include <stdlib.h>`
* `void *realloc(void *ptr, size_t size);`
* ## ASM
* `>SS`
* `>PUSHW ptr`
* `>PUSHW size`
* `>LIBC realloc`
* `>SR`
* ## RETURN VALUE
*  YA = ptr
*  X = hMem
*\--------------------------------------
K.Realloc		sta IO.SETREADAUX
				sta IO.SETWRITEAUX

				ldy #2
				jsr RAMSW.GetStkYW		ptr

				jsr MEM.GetPtrYA
				bcs .99

				ldy #S.MEM.LEN
				lda (ZPMemMgrSPtr),y
				sta A4L
				iny
				lda (ZPMemMgrSPtr),y
				sta A4L+1

				lda (ZPMemMgrSPtr)
				and #$7F
				tax

				ldy #0
				jsr RAMSW.GetStkYW		size

				jsr MEM.Malloc.YAX
				bcs .99

				>STYA A2L
				pha

				jsr MEM.CpyA1A2A4

				pla
				ldy A2L
*				clc

.99				sta IO.CLRREADAUX
				sta IO.CLRWRITEAUX

				rts
*/--------------------------------------
* # Malloc
* ## C / CSH
* `#include <stdlib.h>`
* `void *malloc(size_t size);`
* ## ASM
* `>LDYA ptr`
* `>LIBC malloc`
* ## RETURN VALUE
*  CC : success
*   YA = PTR to Mem (Uninitialised)
*	X = hMem
*  CS :
*   A = EC
*\--------------------------------------
K.Malloc		ldx #0

MEM.MallocX.YAX	sta IO.SETREADAUX
				sta IO.SETWRITEAUX
				jsr MEM.Malloc.YAX
				sta IO.CLRREADAUX
				sta IO.CLRWRITEAUX
				rts
*--------------------------------------
MEM.Malloc		ldx #0

MEM.Malloc.YAX	stx MEM.ReqFlags
				sta ZPMemMgrSize+1

				tya
				bit #K.MEM.ALIGN-1		aligned ?
				beq .10					yes, request it

				and #K.MEM.nALIGNm1		align on boundary
				clc
				adc #K.MEM.ALIGN
				bcc .10

				inc ZPMemMgrSize+1

.10				sta ZPMemMgrSize

				>LDYAI MEM.LoMem
				>STYA ZPMemMgrSPtr
				stz MEM.BestSlot
				ldx #$ff
				stx MEM.BestScore
				stx MEM.BestScore+1
				ldx #0					Current slot=0
				bra .4					skip slot 0, Check if some free slot to reuse first

.1				inx						move to next slot
				jsr MEM.NextSlot
				lda (ZPMemMgrSPtr)		Get Flags
				bmi .4					in use ?

.2				lda MEM.ReqFlags		Found an empty slot
				bit #S.MEM.F.NOCROSS
				beq .21

				ldy ZPMemMgrSize+1		> 255, not applicable
				bne .22					Align to page if $100

				ldy #S.MEM.PTR
				lda (ZPMemMgrSPtr),y	get LO of PTR
				clc
				adc ZPMemMgrSize
				bcs .4					cross page boundary....

				lda MEM.ReqFlags		get back flags to test if match

.21				bit #S.MEM.F.ALIGN		is request needs a page align ?
				beq .3

.22				ldy #S.MEM.PTR
				lda (ZPMemMgrSPtr),y	get LO of PTR
				bne .4					not page-aligned

.3				ldy #S.MEM.LEN
				sec
				lda (ZPMemMgrSPtr),y	get LEN of this block
				sbc ZPMemMgrSize		compare with requested size
				pha
				iny
				lda (ZPMemMgrSPtr),y
				sbc ZPMemMgrSize+1
				ply						Y,A = SlotLen - ReqSize
				bcc .4					req size > slot size

				cpy MEM.BestScore
				pha
				sbc MEM.BestScore+1
				pla
				bcs	.4					Delta is >= BestScore
				bne .4					Delta is > 255...

				sty MEM.BestScore
				sta MEM.BestScore+1
				stx MEM.BestSlot

.4				cpx MEM.LastSlot		any other slot to check?
				bne .1					last one, create a new slot

				lda MEM.BestSlot
				beq .5

				tax
				jsr MEM.GetMemByID
				bra .7

*-------------- Create a New SLOT

.5				lda MEM.ReqFlags
				bit #S.MEM.F.NOCROSS
				beq .51

				lda ZPMemMgrSize+1		> 255, not applicable
				bne .52					Align to page if $100

				lda MEM.Free			target PTR will be in same page ?
				beq .6					Memfree is xx00, will be in same page

				cmp ZPMemMgrSize
				bcs .6					yes, allocate

				tay						no, reserve a free slot to fill gap
				lda #0
				jsr MEM.AddSlot			X = new slot
				bcs .9

				lda #S.MEM.F.NOCROSS	Make sure marked FREE
				sta (ZPMemMgrSPtr)
				bra .6

.51				bit #S.MEM.F.ALIGN		is request needs a page align ?
				beq .6

.52				lda MEM.Free			target PTR will be page aligned ?
				sec
				sbc ZPMemMgrSize
				beq .6					yes, allocate

				tay						no, reserve a free slot to fill gap
				lda #0
				jsr MEM.AddSlot			X = new slot
				bcs .9

				lda #S.MEM.F.ALIGN		Make sure marked FREE
				sta (ZPMemMgrSPtr)

.6				>LDYA ZPMemMgrSize
				jsr MEM.AddSlot			X = new slot
				bcs .9

*-------------- Reuse this SLOT

.7				phx

				lda MEM.ReqFlags		get requested flags
				ora #S.MEM.F.INUSE		mark as in use
				sta (ZPMemMgrSPtr)
				and #S.MEM.F.INIT0
				beq .8

				jsr MEM.Init0

.8				lda #1
				ldy #S.MEM.REFCNT
				sta (ZPMemMgrSPtr),y

				lda MEM.ReqFlags
				and #S.MEM.F.CODE
				bne .88

				bit IO.RDREADAUX
				php

				sta IO.CLRREADAUX

				ldy #S.PS.PID
				lda (pPS),y
				tax
				iny
				lda (pPS),y

				plp
				bpl .80

				sta IO.SETREADAUX

.80				ldy #S.MEM.OWNER+1
				sta (ZPMemMgrSPtr),y
				txa
				dey
				sta (ZPMemMgrSPtr),y

.88				plx

				clc

				jmp MEM.GetMEMPTR
* A = HI PTR,Y = LO PTR,X = Current hMem
.9				rts
*--------------------------------------
* Mem.AddSlot
*  In:
*   Y,A = Requested size
*  Out:
*--------------------------------------
MEM.AddSlot  	>STYA ZPMemMgrTmp1		save req size
				ldx MEM.LastSlot
				inx
				beq .99					> 255 ERR:OUT OF SLOT

				lda MEM.Free			Compute base PTR=FREE-REQ size
				sec
				sbc ZPMemMgrTmp1
				tay						save new MEM.Free LO
				lda MEM.Free+1
				sbc ZPMemMgrTmp1+1
				pha						save new MEM.Free HI
				cpy MEM.LoMem
				sbc MEM.LoMem+1
				bcc .98					ERR out of mem

				jsr MEM.NextSlot		X,Y unmodified
				tya						get back MEM.Free LO
				ldy #S.MEM.PTR
				sta MEM.Free			set as system MEM.Free value
				sta (ZPMemMgrSPtr),y	store it as base address of new slot
				iny
				pla						get back MEM.Free HI
				sta MEM.Free+1
				sta (ZPMemMgrSPtr),y

				iny
				lda ZPMemMgrTmp1		get requested size
				sta (ZPMemMgrSPtr),y	setup slot LEN
				iny
				lda ZPMemMgrTmp1+1
				sta (ZPMemMgrSPtr),y

				stx MEM.LastSlot		mark this slot allocated

				clc
				rts

.98				pla						discard new Mem.Free HI

.99				lda #E.OOM
				sec
				rts
*--------------------------------------
MEM.NextSlot	lda ZPMemMgrSPtr
				clc
				adc #S.MEM
				sta ZPMemMgrSPtr
				bcc .8

				inc ZPMemMgrSPtr+1

.8				rts
*--------------------------------------
MEM.Init0		ldy #S.MEM.PTR
				lda (ZPMemMgrSPtr),y	ZPMemMgrSPtr already set
				sta .12+1
				iny
				lda (ZPMemMgrSPtr),y
				sta .12+2
				lda ZPMemMgrSize
				eor #$ff
				tay						y=not lo count
				lda ZPMemMgrSize+1
				eor #$ff				a=not hi count

				ldx #0

.11				iny
				bne .12

				inc
				beq .13

.12				stz $ffff,x
				inx
				bne .11

				inc .12+2
				bra .11

.13				rts
*/--------------------------------------
* # Free
* ## C / CSH
* `#include <stdlib.h>`
* `void free(void *ptr);`
* ## ASM
* `>LDYA ptr`
* `>LIBC free`
* ## RETURN VALUE
*  none.
*\--------------------------------------
K.Free			sta IO.SETREADAUX
				sta IO.SETWRITEAUX
				jsr MEM.FreeYA
				sta IO.CLRREADAUX
				sta IO.CLRWRITEAUX
				rts
*--------------------------------------
MEM.FreeYA		jsr MEM.GetPtrYA
				bcc MEM.FreeH

MEM.Err			>DEBUG
				lda #E.BADPTR
				sec
				rts
*--------------------------------------
MEM.FreeAX		sta IO.SETREADAUX
				sta IO.SETWRITEAUX
				jsr MEM.FreeA
				sta IO.CLRREADAUX
				sta IO.CLRWRITEAUX
				rts
*--------------------------------------
MEM.FreeA		jsr MEM.GetMemByID
*--------------------------------------
MEM.FreeH		lda (ZPMemMgrSPtr)		In use ?
				bpl MEM.Err

				ldy #S.MEM.REFCNT
				lda (ZPMemMgrSPtr),y
				dec						only one left ?
				sta (ZPMemMgrSPtr),y
				bne .8					no, must be a code segment loaded several times

				lda (ZPMemMgrSPtr)
				and #$7f				keep flags for memdump
				sta (ZPMemMgrSPtr)		Mark as FREE
				and #S.MEM.F.CODE		CS: Any BINPATH to discard ?
				beq .1

				ldy #S.MEM.OWNER
				lda (ZPMemMgrSPtr),y
				pha
				iny
				lda (ZPMemMgrSPtr),y
				ply
				phx
				jsr MEM.GetPtrYA
				plx
			bcs *						***MUST BE ALLOCATED***
				lda (ZPMemMgrSPtr)
			bpl *						***MUST BE ALLOCATED***
				and #$7f				keep flags for memdump
				sta (ZPMemMgrSPtr)		mark BINPATH slot as free

.1				lda MEM.LastSlot
				beq .8

				jsr MEM.GetMemByID		X unmodified
				lda (ZPMemMgrSPtr)
				bmi .8					used, exit

.2				dec	MEM.LastSlot		free! get previous....
				beq .80					empty list: go set MEM.Free=MEM.HiMem

				lda MEM.LastSlot
				jsr MEM.GetMemByID		X unmodified
				lda (ZPMemMgrSPtr)
				bpl .2					free again! loop

				ldy #S.MEM.PTR
				lda (ZPMemMgrSPtr),y	set MEM.Free...
				sta MEM.Free
				iny
				lda (ZPMemMgrSPtr),y
				sta MEM.Free+1

.8				clc
				rts

.80				>LDYA MEM.HiMem
				>STYA MEM.Free
				clc
				rts
*--------------------------------------
* Optimized for :
* Mem.LoMem is page aligned at $800
* S.MEM is 8 bytes
*--------------------------------------
				.DO MEM.LoMem=$800
				.ELSE
				!!!!!WARNING!!!!!
				.FIN
				.DO S.MEM=8
				.ELSE
				!!!!!WARNING!!!!!
				.FIN
*--------------------------------------
MEM.AddBIN		sta IO.SETREADAUX
				sta IO.SETWRITEAUX

				pha
				txa
				jsr MEM.GetMemByID

				tya
				ldy #S.MEM.OWNER
				sta (ZPMemMgrSPtr),y
				pla
				iny
				sta (ZPMemMgrSPtr),y
				
				lda (ZPMemMgrSPtr)
				ora #S.MEM.F.CODE
				sta (ZPMemMgrSPtr)

				sta IO.CLRWRITEAUX
				sta IO.CLRREADAUX
				rts
*--------------------------------------
MEM.FindByBIN	sta IO.SETREADAUX

				lda MEM.LastSlot

				tax

				jsr MEM.GetMemByID

.1				lda (ZPMemMgrSPtr)
				bpl .7

				and #S.MEM.F.CODE
				beq .7

				ldy #S.MEM.OWNER
				lda (ZPMemMgrSPtr),y
				sta A1L
				iny
				lda (ZPMemMgrSPtr),y
				sta A1L+1

				ldy #$ff

.2				iny
				sta IO.CLRREADAUX
				lda K.PathBuf,y
				sta IO.SETREADAUX
				cmp (A1L),y
				bne .7

				eor #0
				bne .2

				ldy #S.MEM.REFCNT
				lda (ZPMemMgrSPtr),y
				inc
				sta IO.SETWRITEAUX
				sta (ZPMemMgrSPtr),y
				sta IO.CLRWRITEAUX

				jsr MEM.GetMEMPTR

				sta IO.CLRREADAUX
				clc
				rts

.7				lda ZPMemMgrSPtr
				sec
				sbc #S.MEM
				sta ZPMemMgrSPtr
				bcs .8

				dec ZPMemMgrSPtr+1

.8				dex
				bne .1

				sta IO.CLRREADAUX
				sec
				rts
*--------------------------------------
MEM.GetPtrX		sta IO.SETREADAUX
				jsr MEM.GetMemByID
				jsr MEM.GetMEMPTR
				sta IO.CLRREADAUX
				rts
*--------------------------------------
MEM.GetMemByID	sta ZPMemMgrSPtr
				lda /MEM.LoMem/8
				asl ZPMemMgrSPtr
				rol
				asl ZPMemMgrSPtr
				rol
				asl ZPMemMgrSPtr
				rol
				sta ZPMemMgrSPtr+1
				rts
*--------------------------------------
MEM.GetMEMPTR	ldy #S.MEM.PTR
				lda (ZPMemMgrSPtr),y
				pha
				iny
				lda (ZPMemMgrSPtr),y
				ply
				rts
*--------------------------------------
*MEM.IncRefCnt	ldy #S.MEM.REFCNT
*				lda (ZPMemMgrSPtr),y
*				inc
*				sta (ZPMemMgrSPtr),y
*				rts
*--------------------------------------
MEM.GetRefCntX	sta IO.SETREADAUX

				jsr MEM.GetPtrYA
				bcs .9

				ldy #S.MEM.REFCNT
				lda (ZPMemMgrSPtr),y

				sta IO.CLRREADAUX

*				clc

.9				rts
*--------------------------------------
* Copy A4 bytes from A1 to A2
*--------------------------------------
MEM.CpyX2X		sta IO.SETWRITEAUX
MEM.CpyX2M		sta IO.SETREADAUX

				jsr MEM.CpyA1A2A4

				sta IO.CLRREADAUX
				sta IO.CLRWRITEAUX

				rts
*--------------------------------------
MEM.GetPtrYA	>STYA A1L

				lda MEM.LastSlot

				tax

				jsr MEM.GetMemByID

.1				ldy #S.MEM.PTR
				lda (ZPMemMgrSPtr),y
				cmp A1L
				bne .2

				iny
				lda (ZPMemMgrSPtr),y
				cmp A1L+1
				beq .8

.2				lda ZPMemMgrSPtr
				sec
				sbc #S.MEM
				sta ZPMemMgrSPtr
				bcs .3

				dec ZPMemMgrSPtr+1

.3				dex
				bne .1

				lda #E.BADPTR
				sec
				rts

.8				clc
				rts
*--------------------------------------
MEM.GetBestBnk	lda A2osX.MaxBnk
				beq .9					Only 1 ...

				ldx A2osX.ActBnk
				phx
				stx MEM.BestSlot

				ldx /U.LoMem
				stx MEM.BestScore+1

				sta IO.SETREADAUX

.1				sta (pRWReg)

				ldx MEM.Free+1
				cpx /U.HiMem
				bne .2

				sta MEM.BestSlot

				bra .8					free bank

.2				cpx MEM.BestScore+1
				bcs .7

				sta MEM.BestSlot

.7				dec
				cmp #$ff
				bne .1

.8				sta IO.CLRREADAUX

				pla
				sta (pRWReg)

				lda MEM.BestSlot

.9				rts
*--------------------------------------
* A1L srcPtr
* A2L dstPtr
* A4L cnt
*--------------------------------------
MEM.CpyA1A2A4	lda A4L
				eor #$ff
				tax

				lda A4L+1
				eor #$ff
				pha

				ldy #0

.1				inx
				bne .2

				pla
				inc
				beq .8

				pha

.2				lda (A1L),y
				sta (A2L),y
				iny
				bne .1

				inc A1L+1
				inc A2L+1
				bra .1

.8				rts
*--------------------------------------
* Inputs
*  Y,A = Src Ptr
*  A3L srcBnk
*  A3H dstBnk
*--------------------------------------
* Uses
*  A1L srcPtr
*  A2L dstPtr
*  A4L cnt
*--------------------------------------
MEM.MBDupYA		sta IO.SETREADAUX
				sta IO.SETWRITEAUX

				pha
				lda A3L
				sta (pRWReg)
				pla

				jsr MEM.GetPtrYA		set A1L
				bcs .9

				ldy #S.MEM.LEN+1
				lda (ZPMemMgrSPtr),y
				pha
				dey
				lda (ZPMemMgrSPtr),y
				tay

				lda (ZPMemMgrSPtr)
				and #$7F
				tax

				lda A3H
				sta (pRWReg)

				pla

				>STYA A4L

				jsr MEM.Malloc.YAX
				bcs .9

				>STYA A2L
				pha

				lda A4L
				eor #$ff
				tax

				lda A4L+1
				eor #$ff
				pha

				ldy #0

.1				inx
				bne .2

				pla
				inc
				beq .8

				pha

.2				lda A3L
				sta (pRWReg)

				lda (A1L),y

				pha

				lda A3H
				sta (pRWReg)

				pla

				sta (A2L),y
				iny
				bne .1

				inc A1L+1
				inc A2L+1
				bra .1

.8				pla
				ldy A2L

*				clc

.9				sta IO.CLRREADAUX
				sta IO.CLRWRITEAUX

				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.mem
LOAD usr/src/sys/kernel.s
ASM
