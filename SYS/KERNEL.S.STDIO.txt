NEW
  AUTO 3,1
*/--------------------------------------
* # fileno
* map a stream pointer to a file descriptor
* ## C / CSH
* `#include <stdio.h>`
* `int fileno(FILE *stream);`
* ## ASM
* `>LDYA stream`
* `>LIBC fileno`
* ## RETURN VALUE
*  CC = success
*  YA = fildes
*\--------------------------------------
K.FileNo		>STYA pFILE

				ldx #0

.1				lda pFILEs+1,x
				beq .2

				cmp pFILE+1
				bne .2

				lda pFILEs,x
				cmp pFILE
				beq .3

.2				inx
				inx
				cpx #K.FILE.MAX*2
				bcc .1

				lda #E.BADPTR
*				sec
				rts

.3				lda (pFILE)				#S.FILE.hFD
				ldy #0					fake a positive int
				clc
				rts
*/--------------------------------------
* # fputc (BLOCKING)
* Print A (char) to hFILE
* ## C / CSH
* `#include <stdio.h>`
* `int fputc(int c, FILE *stream);`
* ## ASM
* `>PUSHW character`
* `>PUSHW stream`
* `>LIBC fputc`
* ## RETURN VALUE
* CC = success
*\--------------------------------------
K.FPutC			ldy #2
				jsr RAMSW.GetStkY		c
				sta K.IOBuf

				ldy #0
				jsr RAMSW.GetStkYW

				bra STDIO.Put1
*/--------------------------------------
* # putchar (BLOCKING)
* Print A (char) to StdOut
* ## C / CSH
* `#include <stdio.h>`
* `int putchar ( int c );`
* ## ASM
* `lda c`
* `>LIBC putchar`
* ## RETURN VALUE
* CC = success
*\--------------------------------------
K.PutChar		sta K.IOBuf				c

				ldy #S.PS.pStdOut
				lda (pPS),y
				pha

				iny
				lda (pPS),y
				ply
*--------------------------------------
STDIO.Put1		>SS
				sta IO.SETWRITEAUX
				>PUSHYA
				>PUSHWI K.IOBuf			buf
				lda #0
				>PUSHA
				inc						write 1 byte
				>PUSHA
				sta IO.CLRWRITEAUX

				clc						data in MAIN RAM
				ror A2osX.IOOpt
				jsr K.FWrite.PFT

				>SR

				rts
*/--------------------------------------
* # puts (BLOCKING)
* Write Str to StdOut, appends '\r\n'
* ## C / CSH
* `#include <stdio.h>`
* `int puts ( const char * str );`
* ## ASM
* `>LDYAI str`
* `>LIBC PutS`
* ## RETURN VALUE
* CC : success Y,A > 0
* CS : Y,A = EOF
*\--------------------------------------
K.PutS			>STYA TXTPTR

				ldy #0

.1				jsr RAMSW.xTXTPTRgY
				beq .2

				sta K.IOBuf,y
				iny
				bne .1

.9				lda #E.BUF
				sec
				rts

.2				lda #C.CR
				sta K.IOBuf,y
				iny
				beq .9

				lda #C.LF
				sta K.IOBuf,y
				iny
				beq .9

				>SS

				phy
				sta IO.SETWRITEAUX
				ldy #S.PS.pStdOut+1
				lda (pPS),y
				>PUSHA
				dey
				lda (pPS),y
				>PUSHA
				>PUSHWI K.IOBuf
				>PUSHBI 0
				pla
				>PUSHA
				sta IO.CLRWRITEAUX

				clc						data in MAIN RAM
				ror A2osX.IOOpt
				jsr K.FWrite.PFT

				>SR

				rts
*/--------------------------------------
* # fputs (BLOCKING)
* Write Str to FILE
* ## C / CSH
* `#include <stdio.h>`
* `int fputs (const char *s, FILE *stream);`
* ## ASM
* `>SS`
* `>PUSHW s`
* `>PUSHW stream`
* `>LIBC fputs`
* `>SR`
* ## RETURN VALUE
* CC = success
*\--------------------------------------
K.FPutS			ldy #2					s
				jsr RAMSW.GetStkYW
				jsr K.StrLen			s at A1L

				>STYA A4L

				>SS
				sta IO.SETWRITEAUX
				ldy #0					stream
				jsr RAMSW.GetStkYW
				>PUSHYA
				>PUSHW A1L				push s
				>PUSHW A4L				push len

				sta IO.CLRWRITEAUX

				jsr K.FWrite.PFT

				>SR

				rts
*/--------------------------------------
* # fgets (BLOCKING)
* read bytes from stream into the array
* pointed to by s, until n-1 bytes are read, or a <newline> is read and
* transferred to s, or an end-of-file condition is encountered. The
* string is then terminated with a null byte.
* ## C / CSH
* `#include <stdio.h>`
* `char *fgets(char *s, int n, FILE *stream);`
* ## ASM
* `>PUSHW s`
* `>PUSHW n`
* `>PUSHW FILE`
* `>LIBC fgets`
* ## RETURN VALUE
*  Y,A: s
* CC = success
*\--------------------------------------
* (pStack)+4	s -> ZPPtr3
* (pStack)+2	n -> ZPPtr2
* (pStack)+0	stream -> ZPPtr1
*--------------------------------------
K.FGetS			ldy #5

.1				jsr RAMSW.GetStkY
				sta ZPPtr1,y
				dey
				bpl .1

				lda ZPPtr2+1
				bmi .4					already something in buffer

.2				>LDYA ZPPtr1
				jsr K.GetC
				bcs .9

				cmp #C.LF				Discard any leading LF from a prev CR/LF
				beq .2

				pha

				clc						set n = !n + 1
				lda ZPPtr2
				eor #$ff
				adc #1
				sta ZPPtr2

				lda ZPPtr2+1
				eor #$ff
				adc #0
				sta ZPPtr2+1

				pla

				bra .5
*--------------------------------------
.4				>LDYA ZPPtr1
				jsr K.GetC
				bcs .6

.5				cmp #C.CR
				beq .8

				sta IO.SETWRITEAUX
				sta (ZPPtr3)
				sta IO.CLRWRITEAUX

				inc ZPPtr3
				bne .50

				inc ZPPtr3+1

.50				inc ZPPtr2
				bne .4

				inc ZPPtr2+1
				bne .4

				beq .8					Buffer full

.6				tay
				beq .70

				cmp #MLI.E.EOF
				beq .8					String terminated by EOF

				sec
				rts

.70				ldy #5

				sta IO.SETWRITEAUX

.7				lda ZPPtr1,y			NO DATA, but string not yet terminated
				sta (pStack),y
				dey
				bpl .7

				sta IO.CLRWRITEAUX

				lda #0					BLOCKING
*				sec
				rts

.8				lda #0					terminate string

				sta IO.SETWRITEAUX
				sta (ZPPtr3)
				sta IO.CLRWRITEAUX

				tay						return NULL (TODO: return s)
				clc
.9				rts
*/--------------------------------------
* # getchar (BLOCKING)
* Get char from StdIn
* ## C / CSH
* `#include <stdio.h>`
* `int getchar (void);`
* ## ASM
* `>LIBC getchar`
* ## RETURN VALUE
*  CC = success
*   A = char
*\--------------------------------------
K.GetChar		ldy #S.PS.pStdIn
				lda (pPS),y
				pha
				iny
				lda (pPS),y
				ply
*/--------------------------------------
* # getc (BLOCKING)
* Get char from Node
* ## C / CSH
* `#include <stdio.h>`
* `int getc(FILE *stream);`
* ## ASM
* `>LDYA pStream`
* `>LIBC getc`
* ## RETURN VALUE
*  CC = success
*   A = char
*\--------------------------------------
K.GetC			>SS
				sta IO.SETWRITEAUX
				>PUSHYA					stream
				>PUSHWI K.PathBuf
				lda #0
				>PUSHA
				inc						read 1 byte
				>PUSHA
				sta IO.CLRWRITEAUX
				stz A2osX.IOOpt
				jsr K.FRead.PFT
				>SR
				bcs .9

				lda K.PathBuf

.9				rts
*/--------------------------------------
* # ungetc
* push byte back into input stream
* ## C / CSH
* `#include <stdio.h>`
* `int ungetc(int c, FILE *stream);`
* ## ASM
* `>SS`
* `>PUSHW stream`
* `>PUSHW c`
* `>SR`
* `>LIBC ungetc`
* ## RETURN VALUE
*  CC = success
*   A = char
*\--------------------------------------
K.UngetC		clc
				rts
*/--------------------------------------
* # FOpen
* Open a file
* ## C / CSH
* `#include <stdio.h>`
* `FILE *fopen ( const char *filename, short int flags, short int ftype, int auxtype );`
* ## ASM
* `>SS`
* `>PUSHW filename`
* `>PUSHB flags`
*  + O.RDONLY : if R and !exists -> ERROR
*  + O.WRONLY : if W and !exists -> CREATE
*  + O.TRUNC : Reset Size To 0
*  + O.APPEND : Append
*  + O.TEXT   : Open/Append in Text mode
*  + O.CREATE : Create if not exists
* `>PUSHB ftype`
* `>PUSHW auxtype`
* `>LIBC FOpen`
* `>SR`
* ## DESCRIPTION
* TODO: replace flags/ftype/auxtype with mode="w+,t=TYP,x=AUXTYPE"
*  + r  = O_RDONLY
*  + r+ = O_RDWR
*  + w  = O_WRONLY | O_CREAT | O_TRUNC
*  + w+ = O_RDWR | O_CREAT | O_TRUNC
*  + a  = O_WRONLY | O_CREAT | O_APPEND
*  + a+ = O_RDWR | O_CREAT | O_APPEND
*  + ,t=123 or t=$ff or t=TXT
*  + ,x=12345 or x=$ffff
* ## RETURN VALUE
*  CC : YA = pFILE
*  CS : YA = EC
*\--------------------------------------
K.FOpen			jsr PFT.GetPath4
				bcs K.FOpen.99

				jsr STDIO.GetOpenP

STDIO.FOpen		ldx #_FOpen
				jsr PFT.CheckExtFS
				bcs K.FOpen.99

				jsr UNISTD.Open
				bcs K.FOpen.99

*				lda (pFD)				#S.FD.T
*				cmp #S.FD.T.DSOCK
*				bcs K.FOpen.8 			don't create file for SOCK/PIPE

K.FOpen.REGDIR	jsr STAT.MKNod
				bcs K.FOpen.90

K.FOpen.8		ldy #S.FILE.oCnt
				lda (pFILE),y
				inc
				sta (pFILE),y

				>LDYA pFILE

				clc
				rts

K.FOpen.90		pha
				jsr UNISTD.Close
				pla
				sec

K.FOpen.99		rts
*--------------------------------------
STDIO.GetOpenP	ldy #3
				jsr RAMSW.GetStkY
				sta IO.Flags

				dey						File type

				jsr RAMSW.GetStkY
				sta IO.Type

				dey

				jsr RAMSW.GetStkY		Aux type
				sta IO.AuxType+1

				dey

				jsr RAMSW.GetStkY
				sta IO.AuxType

				rts
*/--------------------------------------
* # FClose
* Close a file
* ## C / CSH
* `#include <stdio.h>`
* `int fclose(FILE *stream);`
* ## ASM
* `>LDYA stream`
* `>LIBC FClose`
* ## RETURN VALUE
*\--------------------------------------
K.FClose		jsr PFT.CheckNodeYA
				bcs K.FRead.RTS

				jsr UNISTD.Close
				bcs K.FRead.RTS

				ldy #S.FILE.oCnt
				lda (pFILE),y
				dec
				sta (pFILE),y

*				clc

				bne K.FRead.RTS

				ldy #S.FILE.ID
				lda (pFILE),y
				tax

				stz pFILEs+1,x
				stz pFILEs,x

				>LDYA pFILE
				jmp MEM.FreeYA
*/--------------------------------------
* # FRead (BLOCKING)
* Read bytes from file
* ## C
* `#include <stdio.h>`
* `int fread (FILE *stream, void * ptr, int count );`
* ## ASM
* `>PUSHW stream`
* `>PUSHW ptr`
* `>PUSHW count`
* `>LIBC FRead`
* ## RETURN VALUE
*  Y,A = Bytes Read
*\--------------------------------------
K.FRead.PFT		ldx #_FRead				Needed by PFT

K.FRead			jsr PFT.CheckNode4
				bcs K.FRead.RTS

				jsr UNISTD.Read
				bcs K.FWrite.9

K.FRead.RTS		rts
*/--------------------------------------
* # FWrite (BLOCKING)
* Write bytes to file
* ## C
* `#include <stdio.h>`
* `int fwrite (FILE *stream, const void *ptr, int count);`
* ## ASM
* `>PUSHW stream`
* `>PUSHW ptr`
* `>PUSHW count`
* `>LIBC fwrite`
* ## RETURN VALUE
*  Y,A = Bytes Written
*\--------------------------------------
K.FWrite.PFT	ldx #_FWrite			Needed by PFT

K.FWrite		jsr PFT.CheckNode4
				bcs K.FRead.RTS

				jsr UNISTD.Write

				bcc K.FRead.RTS

K.FWrite.9		cmp #E.NODATA
				sec
				bne .9					IO Error

				inc						FF -> 0 = BLOCKING
*				sec
.9				rts
*/--------------------------------------
* # FFlush
* ## C
* `#include <stdio.h>`
* `int fflush(FILE *stream);`
* ## ASM
* `>LDYA stream`
* `>LIBC fflush`
*\--------------------------------------
K.FFlush		jsr PFT.CheckNodeYA
				bcs .9

				lda (pFD)				#S.FD.T
				bne STDIO.IOERR

				>MLICALL MLI.FLUSH

.9				rts
*--------------------------------------
STDIO.IOERR		lda #MLI.E.IO
				sec
				rts
*/-------------------------------------
* # FSeek
* Set the file-position indicator for hFILE
* ## C / CSH
* `#include <stdio.h>`
* `int fseek(FILE *stream, long offset, int whence);`
* ## ASM
* `>SS`
* `>PUSHW stream`
* `>PUSHL offset`
* `>PUSHW whence`
* `>LIBC fseek`
* `>SR`
*\-------------------------------------
K.FSeek			ldy #6
				jsr PFT.CheckNodeY
				bcs .9

				ldy #2
				jsr RAMSW.GetStkYW
				>STYA ACC32				offset

				ldy #4
				jsr RAMSW.GetStkYW
				>STYA ACC32+2

				jsr RAMSW.GetStk		whence
				tax

				lda (pFD)				#S.FD.T
				bne STDIO.IOERR

				cpx #SEEK.END
				beq .30

				bcs .98

				dex
				beq .20

				stz K.MLI.PARAMS+2
				stz K.MLI.PARAMS+3
				stz K.MLI.PARAMS+4
				bra .8

* SEEK.CUR
.20				>MLICALL MLI.GETMARK
				bcc .8
				rts

* SEEK.END
.30				>MLICALL MLI.GETEOF
				bcs .9

.8				ldy #0

				clc

.81				lda K.MLI.PARAMS+2,y
				adc ACC32,y
				sta K.MLI.PARAMS+2,y

				iny
				tya					3 bytes, 24 bits!!!
				eor #3
				bne .81

				bcs .99					Offset out of range!

.82				>MLICALL MLI.SETMARK
				bcc .9

				cmp #MLI.E.BEYEOF
				bne .9

				>MLICALL MLI.SETEOF
				bcc .82

.9				rts

.98				lda #E.BADARG
				.HS 2C					bit abs
.99				lda #E.FTB
*				sec
K.FSeek.RTS		rts
*/--------------------------------------
* # FEOF
* Test the end-of-file indicator for hFILE
* ## C / CSH
* `#include <stdio.h>`
* `int feof(FILE *stream);`
* ## ASM
* `>LDYA stream`
* `>LIBC feof`
* ## RETURN VALUE
*  CC :
*  A = $ff EOF
*  A = 0 NOT EOF
*  CS :
*\--------------------------------------
K.FEOF			jsr PFT.CheckNodeYA
				bcs K.FSeek.RTS

				lda (pFD)				#S.FD.T
				tax
				jmp (.1,x)

.1				.DA PRODOS.EOF
				.DA STDIO.IOERR			DIR
				.DA DEV.EOF
				.DA STDIO.IOERR			BDEV
				.DA STDIO.IOERR			LNK
				.DA STDIO.IOERR			DSOCK
				.DA SOCK.EOF
				.DA PIPE.EOF
*/--------------------------------------
* # FTell
* Return the current value of the file-position indicator
* ## C / CSH
* `#include <stdio.h>`
* `long ftell(FILE *stream);`
* ## ASM
* `>SL`
* `>LDYA stream`
* `>LIBC ftell`
* ## RETURN VALUE
* On stack (long)
*\--------------------------------------
K.FTell			jsr PFT.CheckNodeYA
				bcs .9

				>MLICALL MLI.GETMARK
				bcs .9

				sta IO.SETWRITEAUX
				
				ldy #3

				lda #0
				sta (pStack),y

				dey

.1				lda K.MLI.PARAMS+2,y
				sta (pStack),y
				dey
				bpl .1

*				sta IO.CLRWRITEAUX

*				clc

.9				rts
*/--------------------------------------
* # Remove
* Remove a file or directory
* ## C
* `#include <stdio.h>`
* `int remove ( const char *pathname );`
* ## ASM
* `>LDYA pathname`
* `>LIBC remove`
* ## RETURN VALUE
*\--------------------------------------
K.Remove		jsr PFT.GetPathYA
				bcs .99

				jsr PFT.CheckExtFS
				bcs .99

				jsr PFT.Translate
				bcs .99

				cpx #4
				bne .98

				>MLICALL MLI.DESTROY
				rts

.98				lda #MLI.E.INCFF
				sec
.99				rts
*/--------------------------------------
* # Rename
* Rename a file
* ## C
* `#include <stdio.h>`
* `int rename ( const char * oldpath, const char * newpath );`
* ## ASM
* `>SS`
* `>PUSHW oldpath`
* `>PUSHW newpath`
* `>LIBC rename`
* `>SR`
* ## RETURN VALUE
*\--------------------------------------
K.Rename		jsr PFT.GetPath0		newpath
				bcs .9

				jsr PFT.CheckExtFS
				bcs .9

				jsr PFT.Translate
				bcs .9

				cpx #4					not ProDOS
				beq .1

				lda #MLI.E.INCFF
				sec
				rts

.1				ldx #$ff

.3				inx
				lda K.MLI.PATH,x
				sta K.MLI.PATH2,x
				bne .3

				jsr PFT.GetPath2		oldpath
				bcs .9

				jsr PFT.CheckExtFS
				bcs .9

				jsr PFT.Translate
				bcs .9

				>LDYAI K.MLI.PATH2
				>STYA K.MLI.PARAMS+3
				>MLICALL MLI.RENAME

.9				rts
*/--------------------------------------
* # PrintF (BLOCKING)
* # FPrintF (BLOCKING)
* # SPrintF
* Prints C-Style String
* ## C / CSH
* `#include <stdio.h>`
* `int printf ( const char *format, ... );`
* `int fprintf ( FILE *stream, const char *format, ... );`
* `int sprintf ( char *str, const char *format, ... );`
* ## ASM
* PrintF : (example is for printing Y,A as integer : format="%I", 2 bytes)
* `>SS`
* `>PUSHW format`
* `>PUSHW i`
* `...`
* `>PUSHBI 2`	#bytecount
* `>LIBC PrintF`
* `>SR`
* FPrintF :
* `>SS`
* `>PUSHW FILE`
* `>PUSHW format`
* `>PUSHW i`
* `...`
* `>PUSHBI 2`	#bytecount
* `>LIBC fprintf`
* `>SR`
* SPrintF :
* `>SS`
* `>PUSHW str`
* `>PUSHW format`
* `>PUSHW i`
* `...`
* `>PUSHBI 2`	#bytecount
* `>LIBC sprintf`
* `>SR`
* ## RETURN VALUE
* CC : success, Y,A = bytes sent
* CS : error, A = code from Output
* Specifiers :
* + %% : print % char
* + %b : pull 1 byte to Print BIN
* + %d : pull 1 byte unsigned DEC 0..255
* + %D : pull 2 bytes unsigned DEC 0..65535
* + %u : pull 4 bytes long unsigned DEC 0..4294967295
* + %e : pull 5 Bytes float (-)1.23456789e+12
* + %f : pull 5 Bytes float (-)3.1415
* + %h : pull 1 byte to Print HEX
* + %H : pull 2 bytes to Print HEX
* + %i : pull 1 byte to Print signed DEC -128..127
* + %I : pull 2 bytes to Print signed DEC -32768..32767
* + %L : pull 4 bytes signed DEC -2147483648..2147483647
* + %s : pull 2 bytes ptr to C-Style String
* + %S : pull 2 bytes ptr to P-Style String
* Modifiers for len and padding :
* + %d	  : '9'  '12'
* + %2d	  : ' 9' '12'
* + %02d  : '09' '12'
* + %11s  : 'ABCDEFGH   '
* + %011s : 'ABCDEFGH000'
* + %2f	  :	'3.14'
*\--------------------------------------
				.DUMMY					ZPTMP+5,5  Used by : STDIO2
				.OR ZPTMP+5				5 Bytes
PrintF.Cnt		.BS 2
STDIO.iStkB		.BS 1
PrintF.b2Buf	.BS 1
				.ED
*--------------------------------------
K.PrintF.PadL	.EQ FAC+5
K.PrintF.PadC	.EQ ARG.SIGN
*--------------------------------------
K.PrintF		ldy #S.PS.pStdOut
				lda (pPS),y
				sta pFILE
				iny
				lda (pPS),y
				sta pFILE+1

				ldx #1
				.HS 2C					BIT ABS
*--------------------------------------
K.FPrintF		ldx #2
				.HS 2C					BIT ABS
*--------------------------------------
K.SPrintF		ldx #3
*--------------------------------------
				jsr STDIO.GetParams		format string->TXTPTR

.1				jsr RAMSW.xTXTPTRgn
				beq .8					end of format..

.22				cmp #'%'
				bne .20

				jsr RAMSW.xTXTPTRg
				beq .7					end of format... print % and exit

				cmp #'%'				%% ?
				bne .21

				>INCW TXTPTR			skip %% ...
				bra .20

.21				stz K.PrintF.PadL
				stz K.PrintF.PadC

				jsr ZP.IsDigit
				bcs .6					no digit....go check specifier

				cmp #'0'				...a 0...mmm... padding char?
				bne .4

				sta K.PrintF.PadC
				>INCW TXTPTR			skip 0 ...
				jsr RAMSW.xTXTPTRg
				beq .7

				jsr ZP.IsDigit
				bcs .6					%0x ??????

.4				>LDYA TXTPTR
				jsr MATH.xDec2ACC32
				bcs .99

				tya
*				clc
				adc TXTPTR
				sta TXTPTR
				bcc .40

				inc TXTPTR+1

.40				lda ACC32
				sta K.PrintF.PadL

				lda K.PrintF.PadC
				bne .5

				lda #C.SPACE
				sta K.PrintF.PadC

.5				jsr RAMSW.xTXTPTRg
				beq .7

.6				ldx	#PrintFTBL1.Cnt-1	do we have a %x command?

.61				cmp PrintFTBL1,x
				beq .62

				dex
				bpl	.61

				bra .20					unknown ...

.62				>INCW TXTPTR
				txa						yes, jmp to it!
				asl
				tax
				jsr PrintF.ESC
				bcc .1

				bra .99

.7				lda #'%'

.20				jsr	PrintF.PutC
				bcc .1

				rts
*--------------------------------------
.99				lda #E.BADARG
				sec
				rts
*--------------------------------------
.8				bit PrintF.b2Buf
				bmi .80					Writing to buffer, append \0

				>SS
				sta IO.SETWRITEAUX
				>PUSHW pFILE
				>PUSHWI K.IOBuf
				>PUSHW PrintF.Cnt		Writing to File/dev...
				sta IO.CLRWRITEAUX

				clc						data in MAIN RAM
				ror A2osX.IOOpt
				jsr K.FWrite.PFT
				>SR
				bcc .81

				tay
				bne .9

				rts						0=BLOCKING
*--------------------------------------
.80				jsr SHARED.xFORPNTpn		A=0, Writing to buffer, append \0

				clc

.81				>LDYA PrintF.Cnt
*				clc
.9				rts
*--------------------------------------
PrintFTBL1		.AS	"bdDuefhHiILsS"
PrintFTBL1.Cnt	.EQ *-PrintFTBL1
*--------------------------------------
PrintF.ESC		jmp (.1,x)

.1				.DA PrintF.B
				.DA PrintF.D,PrintF.DD,PrintF.U
				.DA PrintF.E,PrintF.F
				.DA PrintF.H,PrintF.HH
				.DA PrintF.I,PrintF.II,PrintF.L
				.DA PrintF.S,PrintF.SS
*--------------------------------------
PrintF.B		jsr STDIO.GetStkB
				bcs PrintF.B.RTS
				ldy #8

.1				asl
				pha
				lda #'0'/2
				rol
				jsr PrintF.PutC
				bcs .9

				pla
				dey
				bne .1

				rts

.9				ply
PrintF.B.RTS
				rts
*--------------------------------------
PrintF.I		sec						signed short
				.HS 90					BCC
PrintF.D		clc						unsigned short (BYTE)

				ldy #1
				bra PrintF.NUM

PrintF.II		sec						signed int
				.HS 90					BCC
PrintF.DD		clc						unsigned int (WORD)

				ldy #2
				bra PrintF.NUM

PrintF.L		sec						signed long
				.HS 90					BCC
PrintF.U		clc						unsigned long (DWORD)

				ldy #4

PrintF.NUM		sty .2+1

				ror ACC32.Sign			save signed/unsigned flag
				jsr M32.ACC32Z

.1				jsr STDIO.GetStkB
				bcs PrintF.B.RTS

				sta ACC32-1,y			PULL 4,2 or 1
				dey
				bne .1

				bit ACC32.Sign
				bpl .4

.2				ldy #$ff				SELF MODIFIED

				lda ACC32-1,y			Get highest Byte
				bpl .4					positive....

				lda #$ff

.3				cpy #4
				beq .4

				iny
				sta ACC32-1,y
				bra .3

.4				ldx K.PrintF.PadL
				ldy K.PrintF.PadC

				rol ACC32.Sign			get back signed/unsigned flag
				jsr MATH.ACC322STR10
				bra PrintF.StrNum
*--------------------------------------
* EXP(8) 1(s) 1significants(31)
* http://apple2.org.za/gswv/a2zine/GS.WorldView/Resources/GS.TECH.INFO/AppleSoft/
*--------------------------------------
PrintF.E		sec						Force "E+12"
				.HS 90					BCC
PrintF.F		clc

				jsr RAMSW.GetStk		get current stack Ptr
				sec						at least 5 bytes remaining ?
				sbc #5
				bcc PrintF.StrNum.Err

				sta IO.SETWRITEAUX
				sta (pStack)
				sta IO.CLRWRITEAUX

*				sec
				adc pStack
				ldy pStack+1			A,Y = float
				jsr RAMSW.AY2FAC

				bit	IO.RROMWRAMBNK2

				ldy #FOUTBuf+1			FOUT.1 will do a DEY
				jsr $ED36				FOUT.1

				bit IO.RRAMWRAMBNK2

PrintF.StrNum	ldy #0

.2				lda FOUTBuf,y
				beq .8

				iny
				jsr PrintF.PutC
				bcc .2

.9				rts

.8				clc
				rts
PrintF.StrNum.Err
				ldx #E.STACK
				sec
				rts
*--------------------------------------
PrintF.S		ldx #$ff				CSTR
				.HS 2C					BIT ABS
PrintF.SS		ldx #$00				PSTR

				jsr STDIO.GetStkB
				bcs .9

				sta ZPPtr1+1

				jsr STDIO.GetStkB
				bcs .9

				sta ZPPtr1

				jsr RAMSW.xP1g			if CSTR:last char=0, if PSTR:len=0
				beq .8

				txa
				tay
				bmi .1					CSTR

				jsr RAMSW.xP1g
				tax						PSTR : X = len

.1				iny
				jsr RAMSW.xP1gY
				beq .2

				jsr PrintF.PutC
				bcs .9

				dex
				beq .2

				lda K.PrintF.PadL
				beq .1

				cpy	K.PrintF.PadL
				bne .1

.8				clc
				rts

.2				lda K.PrintF.PadL
				beq .8

.3				cpy K.PrintF.PadL
				beq .8

				lda K.PrintF.PadC
				jsr PrintF.PutC
				bcs .9

				iny
				bne .3

*				clc
.9				rts
*--------------------------------------
PrintF.HH		jsr STDIO.GetStkB
				bcs STDIO.RTS

				pha						LO byte
				jsr STDIO.GetStkB
				ply
				bcs STDIO.RTS

				pha
				tya
				jsr PrintF.H.1
				ply
				bcs STDIO.RTS

				tya
				bra PrintF.H.1
*--------------------------------------
PrintF.H		jsr STDIO.GetStkB
				bcs STDIO.RTS

PrintF.H.1		jsr SHARED.A2HexAX
				jsr PrintF.PutC
				bcs STDIO.RTS

				txa
*--------------------------------------
PrintF.PutC		bit PrintF.b2Buf
				bpl .1

				jsr SHARED.xFORPNTpn

				inc PrintF.Cnt
				bne .8

				inc PrintF.Cnt+1

				clc
				rts

.1				phx
				ldx PrintF.Cnt
				sta K.IOBuf,x
				plx
				inc PrintF.Cnt
				beq .9

.8				clc
				rts

.9				ldx #E.BUF
				sec
STDIO.RTS		rts
*/--------------------------------------
* # ScanF (BLOCKING)
* # FScanF (BLOCKING)
* # SScanF
* Read formatted data from string
* ## C
* `int scanf( const char *format, ... );`
* `int fscanf( FILE *stream, const char *format, ... );`
* `int sscanf ( const char *s, const char *format, ... );`
* ## ASM
* ScanF :
* `>SS`
* `>PUSHW format`
* `>PUSHW ptr`
* `...`
* `>PUSHB bytecount`
* `>LIBC scanf`
* `>SR`
* FScanF :
* `>SS`
* `>PUSHB stream`
* `>PUSHW format`
* `>PUSHW ptr`
* `...`
* `>PUSHB bytecount`
* `>LIBC fscanf`
* `>SR`
* SScanF :
* `>SS`
* `>PUSHW s`
* `>PUSHW format`
* `>PUSHW ptr`
* `...`
* `>PUSHB bytecount`
* `>LIBC sscanf`
* `>SR`
* Specifiers :
* + %i : short int
* + %d : byte
* + %I : int
* + %D : word
* + %L : long int
* + %U : dword
* + %h : HEX byte
* + %H : HEX word
* + %s : string
* TODO : %10s
* ## RETURN VALUE
* A = Number of arguments filled.
*\--------------------------------------
K.ScanF			ldy #S.PS.pStdIn
				lda (pPS),y
				sta pFILE
				iny
				lda (pPS),y
				sta pFILE+1

				ldx #1
				.HS 2C					BIT ABS
*--------------------------------------
K.FScanF		ldx #2
				.HS 2C					BIT ABS
*--------------------------------------
K.SScanF		ldx #3
*--------------------------------------
				jsr STDIO.GetParams		format string->TXTPTR

				bit PrintF.b2Buf
				bmi .1

				>SS
				sta IO.SETWRITEAUX
				>PUSHW pFILE
				>PUSHWI K.IOBuf
				>PUSHWI 256
				sta IO.CLRWRITEAUX
				jsr K.FGetS
				>SR
				bcs STDIO.RTS

.1				jsr RAMSW.xTXTPTRgn		End Of format?
				beq .8

				cmp #'%' 				Escape ?
				beq .2

				cmp #C.SPACE			Space ?
				beq .12

				sta .11+1

				jsr RAMSW.xFORPNTgn
				beq .9

.11				cmp #$ff				Same char in string?
				beq .1

				bra .9

.12				jsr RAMSW.xFORPNTgn
				beq .9

				cmp #C.SPACE
				bne .9

.13				jsr RAMSW.xFORPNTgn
				beq .9

				cmp #C.SPACE			another space ?
				beq .13

				bra .1

.2				jsr RAMSW.xTXTPTRgn		Get specifier after %
				beq .9					unexpected End of format after "%" ?

				ldx #K.ScanFTBL.C-2

.3				cmp K.ScanFTBL,x
				beq .4

				dex
				dex
				bpl .3

.9				lda #MLI.E.EOF
				sec
				rts

.4				jsr STDIO.GetStkB
				bcs .9

				sta ZPPtr3+1
				jsr STDIO.GetStkB
				bcs .9

				sta ZPPtr3

				jsr .5
				bcs .9					out of Ptr on stack

				inc PrintF.Cnt			parsed one more arg!
				bra .1					no chance more than 256 ptrs on stack

.8				ldy PrintF.Cnt			Arg processed
				lda #0
				clc
				rts
*--------------------------------------
.5				jmp (.6,x)

.6				.DA K.ScanF.I
				.DA K.ScanF.D
				.DA K.ScanF.II
				.DA K.ScanF.DD
				.DA K.ScanF.L
				.DA K.ScanF.U
				.DA K.ScanF.H
				.DA K.ScanF.HH
				.DA K.ScanF.S
*--------------------------------------
K.ScanFTBL		.DA #'i,#1
				.DA #'d,#1
				.DA #'I,#2
				.DA #'D,#2
				.DA #'l,#4
				.DA #'u,#4
				.DA #'h,#1
				.DA #'H,#2
				.DA #'s,#2
K.ScanFTBL.C	.EQ *-K.ScanFTBL
*--------------------------------------
K.ScanF.I
K.ScanF.D
K.ScanF.II
K.ScanF.DD
K.ScanF.L
K.ScanF.U		lda K.ScanFTBL+1,x		Get VAR size
				pha						Save VAL size

				>LDYA FORPNT
				jsr MATH.xDec2ACC32

				bra K.ScanF.GetVAL
*--------------------------------------
K.ScanF.HH
K.ScanF.H		lda K.ScanFTBL+1,x		Get VAR size
				pha

				jsr MATH.Hex2ACC32

K.ScanF.GetVAL	tya						Y=char count parsed
				clc
				adc FORPNT
				sta FORPNT
				bcc .1

				inc FORPNT+1

.1				ply						get back VAL size

				sta IO.SETWRITEAUX

.2				lda ACC32-1,y
				dey
				sta (ZPPtr3),y
				bne .2

				sta IO.CLRWRITEAUX

				rts
*--------------------------------------
K.ScanF.S		ldy #$ff

				sta IO.SETWRITEAUX

.1				iny
				jsr RAMSW.xFORPNTgn		Get char in string to scan
				sta (ZPPtr3),y			store in param ptr
				beq .8					end of string to scan ?

				jsr RAMSW.xTXTPTRc		match format next char ?
				beq .2

				cmp #C.SPACE			is it a space ?
				bne .1

.2				lda #0					add \0 to param ptr
				sta (ZPPtr3),y

.8				sta IO.CLRWRITEAUX

				clc						Y=char count parsed
				rts
*--------------------------------------
* format in TXTPTR
* X = 1 : get format only
* X = 2 : file in pFILE
* X = 3 : str in FORPNT
* OUT:
* Y = BytePtr
*--------------------------------------
STDIO.GetParams	stz PrintF.Cnt
				stz PrintF.Cnt+1

				stz PrintF.b2Buf

				jsr RAMSW.GetStk		Bytecount
				sta STDIO.iStkB

				tay

				iny
				jsr RAMSW.GetStkY		format LO
				sta TXTPTR

				iny
				jsr RAMSW.GetStkY		format HI
				sta TXTPTR+1

				dex
				beq .1

				dex
				beq .2
* X = 3
				iny
				jsr RAMSW.GetStkY		str LO
				sta FORPNT

				iny
				jsr RAMSW.GetStkY		str HI
				sta FORPNT+1

				dec PrintF.b2Buf

				rts						AX = User Buffer

.2				iny
				jsr RAMSW.GetStkY		pFILE
				sta pFILE
				iny
				jsr RAMSW.GetStkY
				sta pFILE+1

.1				rts
*--------------------------------------
STDIO.GetStkB	phy

				ldy STDIO.iStkB
				beq .9

				jsr RAMSW.GetStkY
				dec STDIO.iStkB

				ply
				clc
				rts

.9				ldx #E.STACK

				ply
				sec
				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.stdio
LOAD usr/src/sys/kernel.s
ASM
