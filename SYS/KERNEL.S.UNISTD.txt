NEW
  AUTO 3,1
*/--------------------------------------
* # open
* ## C / CSH
* `#include <unistd.h>`
* `int open(const char *pathname, short int flags);`
* ## ASM
* `>PUSHW pathname`
* `>PUSHB flags`
* `>LIBC open`
* ## RETURN VALUE
* A = hFD
* REG File created on ProDOS : T=TXT,X=$0000
*\--------------------------------------
K.Open			jsr PFT.GetPath1
				jsr RAMSW.GetStk
				sta IO.Flags

				lda #S.FI.T.TXT
				sta IO.Type
				stz IO.AuxType
				stz IO.AuxType+1
*--------------------------------------
UNISTD.Open		jsr PFT.Translate
				bcs .9

				bvs .19					/dev/\0 or /mnt/\0

				cpx #4
				beq .1

				cpx #0					/dev/file ?
				bne .19

				jsr DEV.Find
				bcc .6

				rts
*--------------------------------------
* Check for other special files... /tmp/fifo....
*....or already opened files
*--------------------------------------
.1				ldx #0

.3				lda pNames+1,x
				beq .5

				sta ZPPtr1+1
				lda pNames,x
				sta ZPPtr1

				ldy #$ff

.4				iny
				lda K.PathBuf,y
				cmp (ZPPtr1),y
				bne .5

				cmp #0
				bne .4

				txa
				jsr SHARED.GethFDpFDA
				bra .7

.5				inx
				inx
				cpx #K.FD.MAX*2
				bcc .3

				lda #S.FD.T.REG
				jsr DEV.NewNamedFD
				bcs .9

				jsr PRODOS.OpenReg
				bcc .9
				
				pha
				
				jsr DEV.FreeFD
				
				pla
				sec
				rts

.19				lda #MLI.E.INVPATH
				sec
.9				rts
*--------------------------------------
.6				jsr DEV.GetPDrv

.7				lda (pFD)
				tax
				jmp (.8-2,x)
.8
*				.DA STDIO.IOERR			REG
				.DA STDIO.IOERR			DIR
				.DA DEV.Open
				.DA DEV.Open
				.DA STDIO.IOERR			LNK
				.DA SOCK.Open
				.DA SOCK.Open
				.DA PIPE.Open
*/--------------------------------------
* # close
* ## C
* `#include <unistd.h>`
* `int close(int fd);`
* ## ASM
* `>LDYA fd`
* `>LIBC close`
*\--------------------------------------
K.Close			>STYA pFD

UNISTD.Close	lda (pFD)
				tax
				jmp (.1,x)

.1				.DA PRODOS.Close
				.DA PRODOS.Close
				.DA DEV.Close
				.DA DEV.Close
				.DA STDIO.IOERR			LNK
				.DA SOCK.Close
				.DA SOCK.Close
				.DA PIPE.Close
*/--------------------------------------
* # read
* ## C
* `#include <unistd.h>`
* `size_t read(int fd, void *buf, size_t count);`
* ## ASM
* `>PUSHW fd`
* `>PUSHW buf`
* `>PUSHW count`
* `>LIBC read`
* ## RETURN VALUE
* CC: Y,A = bytes read
* CS: A = EC
*\--------------------------------------
K.Read			ldy #4
				jsr RAMSW.GetStkYW
				>STYA pFD

UNISTD.Read		lda (pFD)				#S.FD.T
				tax
				jmp (.1,x)

.1				.DA PRODOS.Read
				.DA STDIO.IOERR			DIR
				.DA DEV.Read
				.DA STDIO.IOERR			BDEV
				.DA STDIO.IOERR			LNK
				.DA STDIO.IOERR			DSOCK
				.DA SOCK.Read
				.DA PIPE.Read
*/--------------------------------------
* # write
* ## C
* `#include <unistd.h>`
* `int write(int fd, const void *buf, int count);`
* ## ASM
* `>PUSHW fd`
* `>PUSHW buf`
* `>PUSHW count`
* `>LIBC write`
* ## RETURN VALUE
* CC: Y,A = bytes written
* CS: A = EC
*\--------------------------------------
K.Write			ldy #4
				jsr RAMSW.GetStkYW
				>STYA pFD

UNISTD.Write	lda (pFD)				#S.FD.T
				tax
				jmp (.1,x)

.1				.DA PRODOS.Write
				.DA STDIO.IOERR			DIR
				.DA DEV.Write
				.DA STDIO.IOERR			BDEV
				.DA STDIO.IOERR			LNK
				.DA STDIO.IOERR			DSOCK
				.DA SOCK.Write
				.DA PIPE.Write
*--------------------------------------
UNISTD.Stat		lda (pFD)				#S.FD.T
				tax
				jmp (.1,x)

.1				.DA PRODOS.Stat			REG
				.DA PRODOS.Stat			DIR
				.DA DEV.Stat			CDEV
				.DA DEV.Stat			BDEV
				.DA STDIO.IOERR			LNK
				.DA STDIO.IOERR			DSOCK
				.DA STDIO.IOERR			SSOCK
				.DA PIPE.Stat				
*/-------------------------------------
* # LSeek
* Set the file-position indicator for hFD
* ## C
* `#include <unistd.h>`
* `int lseek(off_t fildes, off_t offset, short int whence );`
* ## ASM
* `>PUSHB hFD`
* `>PUSHL offset`
* `>PUSHB whence`
* `>LIBC LSeek`
*\-------------------------------------
*K.LSeek

*/--------------------------------------
* # ChOwn
* ## C
* `#include <unistd.h>`
*  `int chown(const char *pathname, uid_t owner, gid_t group);`
* ## ASM
* `>SS`
* `>PUSHW pathname`
* `>PUSHW owner`
* `>PUSHW group`
* `>LIBC chown`
* `>SR`
* ## RETURN VALUE
*\--------------------------------------
K.ChOwn			jsr PFT.GetPath4
				bcs	.99

				jsr PFT.CheckExtFS
				bcs .99

				jsr PFT.Translate
				bcs .99

				bvs .98
				
				cpx #4
				bne .98

				stz K.MLI.PARAMS+3+S.FIEX.ACL		read mode

				>MLICALL MLI.ACL
				bcs .99

				ldy #1
				jsr RAMSW.GetStkY
				bmi .1

				sta K.MLI.PARAMS+3+S.FIEX.ACL.GID+1
				jsr RAMSW.GetStk
				sta K.MLI.PARAMS+3+S.FIEX.ACL.GID

.1				ldy #3
				jsr RAMSW.GetStkY
				bmi .2

				sta K.MLI.PARAMS+3+S.FIEX.ACL.UID+1
				dey
				jsr RAMSW.GetStkY
				sta K.MLI.PARAMS+3+S.FIEX.ACL.UID

.2				lda #$57							write mode
				sta K.MLI.PARAMS+3+S.FIEX.ACL

				>MLICALL MLI.ACL

				rts
				
.98				lda #MLI.E.INVPATH
				sec
.99				rts				
*/--------------------------------------
* # GetCWD
* ## C
* `#include <unistd.h>`
*  `char *getcwd(char *buf, size_t size);`
* ## ASM
* `>PUSHW buf`
* `>PUSHW size`
* `>LIBC chown`
* ## RETURN VALUE
*  NULL CS
*  buf CC
*\--------------------------------------
K.GetCWD		ldy #S.PS.pCWD
				lda (pPS),y
				pha
				iny
				lda (pPS),y
				ply
				rts
*/--------------------------------------
* # ChDir
* ## Description
* chdir() changes the current working directory of the calling
*         process to the directory specified in path.
* ## See also
* getcwd()
* ## C
* `#include <unistd.h>`
* `int chdir(const char *path);`
* ## ASM
* `>LDYA path`
* `>LIBC chdir`
* ## RETURN VALUE
*  CS : YA = int RC < 0 $FFxx
*  CC : YA = 0
*\--------------------------------------
K.ChDir			pha
				phy
				ldy #S.PS.pCWD+1
				lda (pPS),y
				beq .1

				pha
				dey
				lda (pPS),y
				tay
				pla

				jsr K.Free

.1				pla
				ldy #S.PS.pCWD
				sta (pPS),y
				iny
				pla
				sta (pPS),y

				lda #0
				clc
				rts
*/--------------------------------------
* # GetHostName
* ## Description
* gethostname() returns the null-terminated hostname in the
* character array name, which has a length of len bytes.  If the
* null-terminated hostname is too large to fit, then the name is
* truncated, and no error is returned
* ## See also
* ## C
* `#include <unistd.h>`
* ` int gethostname(char *name, size_t len);`
* ## ASM
* `>SS`
* `>PUSHW name`
* `>PUSHW len`
* `>LIBC GetHostName`
* `>SR`
* ## RETURN VALUE
*  CS : YA = -1, ERRNO
*  CC : YA = 0
*\--------------------------------------
K.GetHostName	ldy #2					name
				jsr RAMSW.StkY2FORPNT

				ldy #$ff

				sta IO.SETWRITEAUX

.1				iny
				lda K.Hostname,y
				sta (FORPNT),y
				bne .1

				sta IO.CLRWRITEAUX

				clc
				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.unistd
LOAD usr/src/sys/kernel.s
ASM
