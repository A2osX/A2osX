NEW
  AUTO 3,1
*--------------------------------------
*uint32_t lcg_parkmiller(uint32_t *state)
*{
*	// Precomputed parameters for Schrage's method
*	const uint32_t M = 0x7fffffff;
*	const uint32_t A = 48271;
*	const uint32_t Q = M / A;    // 44488
*	const uint32_t R = M % A;    //  3399
*
*	uint32_t div = *state / Q;	// max: M / Q = A = 48,271
*	uint32_t rem = *state % Q;	// max: Q - 1     = 44,487
*
*	int32_t s = rem * A;	// max: 44,487 * 48,271 = 2,147,431,977 = 0x7fff3629
*	int32_t t = div * R;	// max: 48,271 *  3,399 =   164,073,129
*	int32_t result = s - t;
*
*	if (result < 0)
*		result += M;
*
*	return *state = result;
*}
*--------------------------------------

*/--------------------------------------
* # Random
* ## C / CSH
* `#include <stdlib.h>`
* `long random(void);`
*\--------------------------------------
K.Random
*/--------------------------------------
* # StrToF
* Convert String to 40 bits Float
* ## C / CSH
* `#include <stdlib.h>`
* `float strtof (const char* str, char** endptr );`
* ## ASM
* `>SF`
* `>SS`
* `>PUSHW str`
* `>PUSHWI EndPtr`
* `>LIBC StrToF`
* `>SR`
* ## RETURN VALUE
* On stack (float) at pBase
*\--------------------------------------
K.StrToF		jsr RAMSW.GetStkW		EndPtr
				>STYA ZPPtr1

				ldy #2
				jsr RAMSW.GetStkYW		str
				>STYA TXTPTR

				jsr MF.Str2FAC
				
				ldy #4					ret value
				jsr MF.FAC2pStackY

				lda ZPPtr1+1
				beq .9					NULL ptr

				sta IO.SETWRITEAUX

				lda TXTPTR
				sta (ZPPtr1)
				ldy #1
				lda TXTPTR+1
				sta (ZPPtr1),y

				sta IO.CLRWRITEAUX

*				clc

.9				rts
*/--------------------------------------
* # AToF
* Convert String to 40 bits Float
* ## C / CSH
* `#include <stdlib.h>`
* `float atof ( const char* str );`
* ## ASM
* `>SF`
* `>LDYA str`
* `>LIBC atof`
* ## RETURN VALUE
* On stack (float) at pBase
*\--------------------------------------
K.AToF			>STYA TXTPTR			Ptr to source string

				jsr MF.Str2FAC
				
				ldy #0
				jmp MF.FAC2pStackY
*/--------------------------------------
* # StrToL/StrToUL
* Convert String to 32 bits (unsigned) int
* ## C / CSH
* `#include <stdlib.h>`
* `long strtol (const char* str, char** endptr, int base);`
* `unsigned long strtoul (const char* str, char** endptr, int base);`
* ## ASM
* `>SL`
* `>SS`
* `>PUSHW str`
* `>PUSHW EndPtr`
* `>PUSHW Base`
* `>LIBC StrToL`
* `>SR`
* ## RETURN VALUE
* On stack (long) at pBase
*\--------------------------------------
K.StrToL		sec						Signed
				.HS 90					BCC
K.StrToUL		clc						Unsigned

				ldy #2
				jsr RAMSW.GetStkYW		EndPtr
				>STYA ZPPtr1

				ldy #4
				jsr RAMSW.GetStkYW		str in YA

				jsr K.AToL.I
				bcs .9

				lda ZPPtr1+1
				beq .9					NULL ptr

				sta IO.SETWRITEAUX

				lda ZPPtr2
				sta (ZPPtr1)
				lda ZPPtr2+1
				ldy #1
				sta (ZPPtr1),y

				sta IO.CLRWRITEAUX

*				clc

.9				rts
*/--------------------------------------
* # atol
* Convert String to 32 bits long
* ## C / CSH
* `#include <stdlib.h>`
* `long atol ( const char * str );`
* ## ASM
* `>SL`
* `>LDYA str`
* `>LIBC atol`
* ## RETURN VALUE
* On stack (long)
*\--------------------------------------
K.AToL			sec						signed

K.AToL.I		jsr MATH.xDec2ACC32
				bcs .9

				ldy #3

				sta IO.SETWRITEAUX

.3				lda ACC32,y
				sta (pBase),y
				dey
				bpl .3

				sta IO.CLRWRITEAUX

*				clc
.9
				rts
*/--------------------------------------
* # atoi
* Convert String to 16 bits int
* ## C /CSH
* `#include <stdlib.h>`
* `int atoi ( const char * str );`
* ## ASM
* `>LDYA str`
* `>LIBC atoi`
* ## RETURN VALUE
*  Y,A = int
*\--------------------------------------
K.AToI			sec						signed

				jsr MATH.xDec2ACC32
				bcs .9

				>LDYA ACC32

.9				rts
*/--------------------------------------
* # RealPath
* ## C / CSH
* `#include <limits.h>`
* `#include <stdlib.h>`
* `char *realpath(const char *path, char *resolvedpath);`
* ## ASM
* `>SS`
* `>PUSHW path`
* `>PUSHW resolvedpath`
* `>LIBC realpath`
* `>SR`
* ## DESCRIPTION
* Return the canonicalized absolute pathname.
* If resolvedpath is specified as NULL, then realpath() uses
* malloc() to allocate a buffer of PATH_MAX bytes to hold
* the resolved pathname, and returns a pointer to this buffer.
* The caller should deallocate this buffer using free().
* ## RETURN VALUE
* CC : Y,A = Ptr to resolvedpath
* CS : Y,A = NULL, ERRNO set
*\--------------------------------------
K.RealPath		ldy #2					get path
				jsr RAMSW.StkY2PathBuf

				ldy #0					get resolvedpath
				jsr RAMSW.StkY2FORPNT
				
				jsr STDLIB.Expand
				bcs .9
				
				jsr STDLIB.RealPath
				bcs .9
				
				jsr SHARED.PathBuf2FORPNT
				bcc .8
				
				.HS 2C					BIT ABS

.9				lda #E.BADPATH

				ldy #S.PS.ERRNO
				sta (pPS),y

				lda #0
				tay						NULL

				sec
.8				rts				
*/--------------------------------------
* # Expand
* ## C / CSH
* `#include <stdlib.h>`
* `char *expand(const char *str, char *expanded);`
* ## ASM
* `>SS`
* `>PUSHW str`
* `>PUSHW expanded`
* `>LIBC expand`
* `>SR`
* ## RETURN VALUE
* CC : Y,A = PTR to Expanded String
* CS : Y,A = NULL, ERRNO
*\--------------------------------------
K.Expand		ldy #2					get str
				jsr RAMSW.StkY2PathBuf

				ldy #0					get expanded
				jsr RAMSW.StkY2FORPNT

				jsr STDLIB.Expand
				bcs .9

				jsr SHARED.PathBuf2FORPNT
				bcc .8
				
				.HS 2C					BIT ABS
				
.9				lda #E.BADPATH

				ldy #S.PS.ERRNO
				sta (pPS),y

				lda #0
				tay						NULL

				sec
.8				rts	
*--------------------------------------
STDLIB.iBufPtr	.BS 1
STDLIB.oBufPtr	.BS 1
ENV.VarEndChar	.BS 1
ENV.bNoExp		.BS 1
ENV.bExp		.BS 1
*--------------------------------------
STDLIB.Expand	jsr PS.Buf2IO

				stz STDLIB.iBufPtr

				stz	STDLIB.oBufPtr		init Expanded String len=0
				stz ENV.bExp			No var found yet
				stz ENV.bNoExp			Reset no expand flag

.10				ldy STDLIB.iBufPtr

.11				lda K.IOBuf,y
				beq .80					End of CSTR?

				iny

				cmp #'''
				bne .21

				lda ENV.bNoExp
				eor #$ff
				sta ENV.bNoExp			toggle flag
				bra	.11
*--------------------------------------
.21				bit ENV.bNoExp
				bpl .23

.22				jsr STDLIB.AddA2PathBuf
				bra .11
*--------------------------------------
.23				cmp #'$'				no, found one ?
				bne .22					no, store...

				lda K.IOBuf,y
				bne .24

				lda #'$'				End of string, output $
				bra .22
*--------------------------------------
.24				sec
				ror ENV.bExp			Toggle Expanded flag
				stz ENV.VarEndChar

				sty STDLIB.iBufPtr

				cmp #'{'				"${VAR]"?
				bne .31

				dec ENV.VarEndChar		"}" expected

				inc STDLIB.iBufPtr		skip "{"
				bra .40

.31				jsr STDLIB.SysVar		0-9 *#?@$!
				bcs .40

.35				inc STDLIB.iBufPtr		skip $x
				bra .10

.40				jsr STDLIB.StrVar		CWD...
				bcc .70

				jsr STDLIB.SIDVar		HOME...
				bcc .70

				jsr STDLIB.EnvVar

.70				ldy STDLIB.iBufPtr		skip $VAR in source string

.71				lda K.IOBuf,y
				beq .72

				jsr SHARED.IsIDValid
				bcs .72

				iny
				bra .71

.72				sty STDLIB.iBufPtr
				lda ENV.VarEndChar
				bne .35					skip "}" and loop

				jmp .10
*--------------------------------------
.80				ldx STDLIB.oBufPtr
				stz K.PathBuf,x
				bit ENV.bExp			Did we expand something ?
				bpl .8

				jmp STDLIB.Expand

.8				clc

.9				rts
*--------------------------------------
STDLIB.SysVar	jsr ZP.IsDigit			$0 ... $9 ?
				bcs .1

				and #$0f

				jsr K.ArgV
				bcs .8					Arg# is undefined, do not append anything

				jmp STDLIB.AddxYAToBuf
*--------------------------------------
.1				cmp #'*'
				bne .3

				lda #1					all args
				jsr K.ArgV
				bcs .8

				>STYA ZPPtr3

				jsr RAMSW.xP3g
				beq .8

.2				jsr STDLIB.AddxP3ToBuf
				jsr ENV.NextEnvP3

				jsr RAMSW.xP3g
				beq .8

				lda #C.SPACE
				jsr STDLIB.AddA2PathBuf
				bra .2
*--------------------------------------
.3				ldx #STDLIB.PSVars.C-1

.4				cmp STDLIB.PSVars,x
				beq .5

				dex
				bpl .4

				sec
				rts

.5				ldy STDLIB.PSVars.Y,x
				lda (pPS),y
				jmp STDLIB.AddNumAToBuf
				
.8				clc
				rts			
*--------------------------------------
STDLIB.PSVars	.AS "#?@$!"
STDLIB.PSVars.C	.EQ *-STDLIB.PSVars
STDLIB.PSVars.Y	.DA #S.PS.ARGC,#S.PS.ERRNO,#S.PS.PPID,#S.PS.PID,#S.PS.CPID
*--------------------------------------
STDLIB.StrVar	>LDYAI STDLIB.StrVars
				jsr STDLIB.CheckName
				bcs .9

				jmp (.8,x)

.8				.DA STDLIB.StrVarsCWD

.9				rts
*--------------------------------------
STDLIB.StrVars	.AZ "CWD"				TODO: more vars ?
				.DA #0
*--------------------------------------
STDLIB.StrVarsCWD
				jsr K.GetCWD
*--------------------------------------
STDLIB.AddxYAToBuf
				>STYA ZPPtr3
*--------------------------------------
STDLIB.AddxP3ToBuf
				ldy #$ff
				
				ldx STDLIB.oBufPtr
				dex

.1				iny
				inx
				jsr RAMSW.xP3gY
				sta K.PathBuf,x
				bne .1

				stx STDLIB.oBufPtr
				rts
*--------------------------------------
STDLIB.AddA2PathBuf
				ldx STDLIB.oBufPtr
				sta K.PathBuf,x
				inc STDLIB.oBufPtr
				rts
*--------------------------------------
STDLIB.SIDVar	>LDYAI STDLIB.SIDVars
				jsr STDLIB.CheckName
				bcs .9

				ldy #S.PS.pSession
				lda (pPS),y
				sta ZPPtr3
				iny
				lda (pPS),y
				sta ZPPtr3+1

				jmp (.8,x)

.8				.DA STDLIB.SIDVarsSTR
				.DA STDLIB.SIDVarsSTR
				.DA STDLIB.SIDVarsSTR
				.DA STDLIB.SIDVarsSTR
				.DA STDLIB.SIDVarsUID
				.DA STDLIB.SIDVarsGID

.9				rts
*--------------------------------------
STDLIB.SIDVars	.AZ "LOGNAME"
				.AZ "GECOS"
				.AZ "HOME"
				.AZ "SHELL"
				.AZ "UID"
				.AZ "GID"
				.DA #0
*--------------------------------------
STDLIB.SIDVarsSTR
				lda ZPPtr3
				clc
				adc #S.SESSION.NAME
				sta ZPPtr3
				lda ZPPtr3+1
				adc /S.SESSION.NAME
				sta ZPPtr3+1

.1				dex
				dex
				bmi STDLIB.AddP3ToBuf

				ldy #$ff

.2				iny
				lda (ZPPtr3),y
				bne .2

				jsr ENV.NextEnvP3Y
				bra .1
*--------------------------------------
STDLIB.SIDVarsUID
				ldy #S.SESSION.UID
				.HS 2C
STDLIB.SIDVarsGID
				ldy #S.SESSION.GID

				lda (ZPPtr3),y
*--------------------------------------
STDLIB.AddNumAToBuf
				jsr MATH.A2STR10NP

				>LDYAI FOUTBuf
				>STYA ZPPtr3
*--------------------------------------
STDLIB.AddP3ToBuf
				ldy #$ff

				ldx STDLIB.oBufPtr
				dex

.1				iny
				inx
				lda (ZPPtr3),y
				sta K.PathBuf,x
				bne .1

				stx STDLIB.oBufPtr
				rts
*--------------------------------------
STDLIB.CheckName
				>STYA ZPPtr3

				lda STDLIB.iBufPtr
				sta .30+1

				ldx #0

.1				lda (ZPPtr3)
				beq .9

				ldy #$ff

.2				iny

.30				lda K.IOBuf,y			SELF MODIFIED
				beq .3

				jsr SHARED.IsIDValid
				bcs .3

				cmp (ZPPtr3),y
				beq .2

				bra .4
*--------------------------------------
.3				lda (ZPPtr3),y
				beq .8

.4				inx
				inx

				ldy #$ff

.5				iny
				lda (ZPPtr3),y
				bne .5

				jsr ENV.NextEnvP3Y
				bra .1

.8				clc
				rts

.9				sec
				rts
*--------------------------------------
STDLIB.EnvVar	lda STDLIB.iBufPtr
				sta .30+1
				
				jsr ENV.InitEnvP3		Store ENV

.1				jsr RAMSW.xP3g
				beq .9					end of ENV

				ldy #$ff

.2				iny

.30				lda K.IOBuf,y			SELF MODIFIED
				beq .3

				jsr SHARED.IsIDValid
				bcs .3

				jsr RAMSW.xP3cY
				beq .2

				bra .4

.3				jsr RAMSW.xP3gY
				cmp #'='
				bne .4

				jsr ENV.NextEnvP3Y		Skip NAME=

				jmp STDLIB.AddxP3ToBuf

.4				jsr ENV.NextEnvP3		Skip NAME=VALUE
				bra .1

.9				rts
*--------------------------------------
STDLIB.RealPath	jsr PS.Buf2IO

				ldx #$ff

				lda K.IOBuf

				cmp #'/'				full path starting with '/'?
				beq .3					yes, do not append to current prefix

.1				jsr K.GetCWD
				>STYA TXTPTR

				ldy #$ff
				ldx #$ff
				
.2				iny
				inx

.20				jsr RAMSW.xTXTPTRgY
				sta K.PathBuf,x
				bne .2

				dex
*--------------------------------------
.3				ldy #$ff

.4				iny
				inx
				lda K.IOBuf,y
				sta K.PathBuf,x
				bne .4

				dex
				beq .81					we have '/'....nothing to do...
*--------------------------------------
* X=LEN, K.PathBuf = /dir1/./../file(/)\0
*--------------------------------------
				ldx #0					will skip leading /

.5				ldy #0					reset dot counter=0

.6				inx
				lda K.PathBuf,x
				beq .8

.7				cmp #'/'
				beq .8

				cmp #'.'
				bne .5

				iny
				bra .6

.8				tya
				beq .80					Y was 0....nothing to do...

				dey						one dot ?
				bne .9					no..

				dex
				dex
				jsr STDLIB.RealPath..	we found "/.", remove,useless....
				bra .80

.9				dey						"/.." ?
				bne .99					"/..." ??!!...syntax error

				dex
				dex
				dex
				txa						we found "/.."
				beq .99					at the beginning of string...cannot remove /dir/..

				jsr STDLIB.RealPath..	remove "/.."

.10				dex
				lda K.PathBuf,x			go to "/dir"
				cmp #'/'
				bne .10

				jsr STDLIB.RealPath..	remove "/dir"

.80				lda K.PathBuf,x			was / or \0 ?
				bne .5

.81				clc
.99				rts
*--------------------------------------
STDLIB.RealPath..
				txa						X = "/something"
				tay

.1				iny
				lda K.PathBuf,y
				beq .2					found /something\0

				cmp #'/'
				bne .1					found /something/

.2				phx						save X for exit

.3				iny						K.PathBuf,y=/ or 0
				inx
				lda K.PathBuf-1,y
				sta K.PathBuf-1,x
				bne .3

				txa
				bne .8

				lda #'/'				Make sure we have a least '/' in the buffer
				sta K.PathBuf
				stz K.PathBuf+1

.8				plx						restore X

				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.stdlib
LOAD usr/src/sys/kernel.s
ASM
