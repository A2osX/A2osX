NEW
PREFIX
AUTO 4,1
*/--------------------------------------
* # GetMemStat
* **In:**
*  Y,A = Ptr to 24 bytes buffer
* ## RETURN VALUE
*  Buffer filled with memory stats
*\--------------------------------------
K.GetMemStat	>STYA ZPPtr1

				ldy #23
				ldx #7
				
.1				lda DevMgr.Stat,x
				sta (ZPPtr1),y
				dey
				dex
				bpl .1
				
				sta SETREADAUX
				
				jsr .2
				
				sta CLRREADAUX
				
.2				ldx #7
				
.3				lda Mem.Table,x
				sta (ZPPtr1),y
				dey
				dex
				bpl .3

				rts
*--------------------------------------
* # FStat
* Return information about a hFILE
* ## C
* `int fstat(short int hFILE, struct stat *statbuf);`
* ## ASM
* **In:**
* `>PUSHW statbuf`
* `lda hFILE`
* `>SYSCALL fstat`
* ## RETURN VALUE
*--------------------------------------
K.FStat			jsr PFT.CheckNodeA
				bcs K.FStat.9
				
				tax
				lda OF.Table.hPath,x
				jsr K.GetMemPtr
				
				jsr PFT.YAToMLIPATH
				
				jsr K.Stat.I	
				bcs K.Stat.9
				
				lda (pFD)				#S.FD.T
				bne K.Stat.BLK2SIZE
				
				ldy #S.FD.REG.REF
				lda (pFD),y
				sta K.MLI.PARAMS+1

				>MLICALL MLIGETEOF
				bcs K.Stat.BLK2SIZE
				
				ldy #S.STAT.SIZE+3
				lda #0
				sta (ZPPtr1),y
				
				ldx #2
				
.1				lda K.MLI.PARAMS+2,x
				dey
				sta (ZPPtr1),y
				dex
				bpl .1
				
*				clc
				rts
				
K.FStat.9		>RET 2					discard statbuf
*/--------------------------------------
* # Stat
* Return information about a file
* ## C
* `int stat(const char *pathname, struct stat *statbuf);`
* ## ASM
* **In:**
* `>PUSHW statbuf`
* `>LDYA pathname`
* `>SYSCALL stat`
* ## RETURN VALUE
*\--------------------------------------
K.Stat			jsr PFT.CheckPathYA
				bcs K.FStat.9			go discard statbuf
				
				jsr K.Stat.I
				bcs K.Stat.9
K.Stat.BLK2SIZE				
				ldy #S.STAT.SIZE
				lda #0
				sta (ZPPtr1),y
				
				iny
				
				lda K.MLI.PARAMS+S.FI.UBLKS
				asl
				sta (ZPPtr1),y
				
				iny
				
				lda K.MLI.PARAMS+S.FI.UBLKS+1
				rol
				sta (ZPPtr1),y
				
				iny
				
				lda #0
				rol
				sta (ZPPtr1),y
				
*				clc
K.Stat.9		rts

K.Stat.I		>PULLW ZPPtr1			Get StatBuf
				
				>MLICALL MLIGETFILEINFO
				bcs .9
				
				ldx K.MLI.PARAMS+S.FI.A

				lda #S.STAT.MODE.XO+S.STAT.MODE.WO+S.STAT.MODE.RO
				cpx #S.FI.A.FULL
				beq .2

				lda #S.STAT.MODE.XO+S.STAT.MODE.RO	
				cpx #S.FI.A.R
				beq .2

				lda #0
				
.2				ldy #S.STAT.MODE				
				sta (ZPPtr1),y

				ldx #K.Stat.DST-K.Stat.SRC

.3				ldy K.Stat.SRC-1,x
				lda K.MLI.PARAMS,y
				ldy K.Stat.DST-1,x
				sta (ZPPtr1),y
				dex
				bne .3
				
				clc
.9				rts
*--------------------------------------
K.Stat.SRC		.DA #S.FI.T
				.DA #S.FI.AUXTYPE,#S.FI.AUXTYPE+1
				.DA #S.FI.UBLKS,#S.FI.UBLKS+1
K.Stat.DST		.DA #S.STAT.P.TYPE
				.DA #S.STAT.P.AUXTYPE,#S.STAT.P.AUXTYPE+1
				.DA #S.STAT.BLOCKS,#S.STAT.BLOCKS+1
*/-------------------------------------
* # MKDir
* create a directory
* ## C
* `int mkdir(const char *pathname, int mode);`
* ## ASM
* **In:** 
* `>PUSHW mode`
* `>LDYA pathname`
* `>SYSCALL mkdir`
* ## RETURN VALUE
* CC : success
* CS : error
* A = EC
*\-------------------------------------
K.MKDir			jsr PFT.CheckPathYA
				bcs K.Stat.9
				
				lda #S.FI.T.DIR
				sta K.MLI.PARAMS+4
				stz K.MLI.PARAMS+5
				stz K.MLI.PARAMS+6
				lda #S.FI.ST.DIR
				jmp IO.MLI.CREATE
*/--------------------------------------
* # MkNod
* Create a special or ordinary file.
* (CDEV, BDEV, DSOCKS, SSOCK, PIPE)
* ## C
* `hFILE mknod(const char *pathname, int mode, hFD fd);`
* ## ASM
* **In:** 
* `>PUSHB fd`
* `>PUSHW mode`
* `>LDYA pathname`
* `>SYSCALL mknod`
* ## RETURN VALUE
* CC = OK, CS = ERROR
* A = hFILE
*\--------------------------------------
K.MkNod 		>STYA ZPPtr1			pathname
				
				>PULLW K.S.STAT+S.STAT.MODE
				>PULLB K.S.STAT+S.STAT.DEV
				
				jsr K.GetMemPtr
				bcs K.MKNOD.RTS
				
				>STYA pFD
				
				>LDYA ZPPtr1
				ldx K.S.STAT+S.STAT.DEV
				jsr STAT.NewhNodeYAX
				bcs K.MKNOD.RTS
				
				lda (pFD)				#S.FD.T
				
				tax
				jmp (.8,x)
				
.8				.DA STDIO.IOERR			REG
				.DA STDIO.IOERR			DIR
				.DA STAT.MKNOD.CDEV
				.DA STAT.MKNOD.BDEV
				.DA STDIO.IOERR			LNK
				.DA STAT.MKNOD.DSOCK
				.DA STAT.MKNOD.SSOCK
				.DA STAT.MKNOD.PIPE
*--------------------------------------				
STAT.MKNOD.CDEV
STAT.MKNOD.BDEV
STAT.MKNOD.DSOCK
STAT.MKNOD.SSOCK
STAT.MKNOD.PIPE
				clc
K.MKNOD.RTS		rts				
*/--------------------------------------
* # MKFIFO
* return a hFILE to a new FIFO
* ## C
* `hFILE mkfifo(const char *pathname, int mode);`
* ## ASM
* **In:** 
* `>PUSHW mode`
* `>LDYA pathname`
* `>SYSCALL mkfifo`
* ## RETURN VALUE
* CC = OK, CS = ERROR
* A = hFILE
*\--------------------------------------
K.MKFIFO		>LDYAI K.PIPE.SIZE
				jsr K.GetMem
				bcs .99
				
				stx .1+1				save PIPE buffer
				
				>LDYAI S.FD.PIPE
				ldx #S.MEM.F.INIT0+S.MEM.F.FD
				jsr MEM.GetMem.YAX
				
				bcs .9
				
				>STYA pFD
				
				ldy #S.FD.T
				lda #S.FD.T.PIPE
				sta (pFD),y
				
				iny						S.FD.PIPE.hMem
.1				lda #$ff				Self Modified
				sta (pFD),y
				txa
				clc
				rts
				
.9				pha						save error code
				lda .1+1				get back PIPE buffer
				jsr K.FreeMem
				pla
				sec
				
.99				rts				
*--------------------------------------
STAT.NewhNodeYAX
				pha
				stx .4+1				Store hFD
				
				ldx #0
				
.1				lda Nod.Table.hFD,x
				beq .2
				
				inx
				cpx #K.Nod.MAX
				bne .1
				
				pla
				lda #E.OOH
*				sec				
				rts
				
.2				stx .3+1				Store hFILE
				
				pla
				>SYSCALL StrDup
				bcs .9
				txa
				
.3				ldx #$ff				SELF MODIFIED
				sta Nod.Table.hPath,x
.4				lda #$ff				SELF MODIFIED			
				sta Nod.Table.hFD,x
				
				txa						hNODE
				
				clc
.9				rts
*--------------------------------------
MAN
SAVE USR/SRC/SYS/KERNEL.S.STAT
LOAD USR/SRC/SYS/KERNEL.S
ASM
