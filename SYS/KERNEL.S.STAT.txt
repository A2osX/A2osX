NEW
  AUTO 3,1
*/--------------------------------------
* # ChMod
* change permissions of a file
* ## C
* `int chmod(const char *pathname, int mode);`
* ## ASM
* `>PUSHW pathname`
* `>PUSHW mode`
* `>LIBC chmod`
* ## RETURN VALUE
*\--------------------------------------
K.ChMod			jsr PFT.GetPath2
				bcs .99

				jsr PFT.CheckExtFS
				bcs .99

				jsr PFT.Translate
				bcs .99

				bvs .98
				
				cpx #4
				bne .98

				ldy #0
				jsr RAMSW.GetStkYW
				>STYA K.S.STAT+S.STAT.MODE

				stz K.MLI.PARAMS+3+S.FIEX.ACL		read mode

				>MLICALL MLI.ACL
				bcs .99

				>LDYA K.S.STAT+S.STAT.MODE
				>STYA K.MLI.PARAMS+3+S.FIEX.ACL.MOD

				lda #$57							write mode
				sta K.MLI.PARAMS+3+S.FIEX.ACL

				>MLICALL MLI.ACL
				rts

.98				lda #MLI.E.INVPATH
				sec
.99				rts
*/--------------------------------------
* # FStat
* Return information about a FD
* ## C
* `#include <sys/stat.h>`
* `int fstat(int fd, struct stat *statbuf);`
* ## ASM
* `>SS`
* `>PUSHW fd`
* `>PUSHW statbuf`
* `>LIBC fstat`
* `>SR`
* ## RETURN VALUE
*\--------------------------------------
K.FStat			ldy #3					fd (hi byte)
				jsr RAMSW.GetStkY

				jsr SHARED.GethFDpFDA	Y = hFD
				bcs STAT.RTS

				jsr SHARED.GethFDPathBuf

				jsr UNISTD.Stat
				bcs STAT.RTS

*				ldy #S.FD.REG.REF
*				lda (pFD),y
*				sta K.MLI.PARAMS+1

*				>MLICALL MLI.GETEOF
*				bcs STAT.RTS

*				ldx #2

*.1				lda K.MLI.PARAMS+2,x
*				sta K.S.STAT+S.STAT.SIZE,x
*				dex
*				bpl .1
*--------------------------------------
K.Stat.Store	ldy #0
				jsr RAMSW.GetStkYW
				>STYA K.Stat.Store.2+1

				ldy #S.STAT-1

				sta IO.SETWRITEAUX

K.Stat.Store.1	lda K.S.STAT,y

K.Stat.Store.2	sta $ffff,y				SELF MODIFIED
				dey
				bpl K.Stat.Store.1

				sta IO.CLRWRITEAUX

*				clc
STAT.RTS		rts
*/--------------------------------------
* # Stat
* Return information about a file
* ## C
* `#include <sys/stat.h>`
* `int stat(const char *pathname, struct stat *statbuf);`
* ## ASM
* `>SS`
* `>PUSHW pathname`
* `>PUSHW statbuf`
* `>LIBC stat`
* `>SR`
* ## RETURN VALUE
*\--------------------------------------
K.Stat			jsr PFT.GetPath2		-> RealPath in Buf256
				bcs STAT.RTS

				jsr STAT.Stat
				bcc K.Stat.Store

				rts
*--------------------------------------
STAT.Stat		ldx #_Stat
				jsr PFT.CheckExtFS
				bcs .9
			
				jsr PFT.Translate
				bcs .9

				bvc .1					not a Special dir

				jsr SHARED.ClrStat

				lda #S.STAT.MODE.FO+S.STAT.MODE.XG+S.STAT.MODE.RG+S.STAT.MODE.XU+S.STAT.MODE.RU+S.STAT.MODE.DIR
				sta K.S.STAT+S.STAT.MODE
				lda /S.STAT.MODE.FO+S.STAT.MODE.XG+S.STAT.MODE.RG+S.STAT.MODE.XU+S.STAT.MODE.RU+S.STAT.MODE.DIR
				sta K.S.STAT+S.STAT.MODE+1

*				clc

.9				rts

.1				jmp (.7,x)

.7				.DA STAT.StatDev
				.DA STAT.StatMnt
				.DA PRODOS.Stat
*--------------------------------------
STAT.StatDev	jsr DEV.Find
				bcs .9

				jmp DEV.Stat

.9				rts
*--------------------------------------
STAT.StatMnt	lda #MLI.E.INVPATH

				sec
				rts
*/-------------------------------------
* # MKDir
* create a directory
* ## C
* `int mkdir(const char *pathname, int mode);`
* ## ASM
* `>SS`
* `>PUSHW pathname`
* `>PUSHW mode`
* `>LIBC mkdir`
* `>SR`
* ## RETURN VALUE
* CC : success
* CS : error
* A = EC
*\-------------------------------------
K.MKDir			jsr PFT.GetPath2
				bcs .99

				jsr PFT.CheckExtFS
				bcs .99

				jsr PFT.Translate
				bcs .99

				bvs .98
				
				cpx #4
				bne .98

				ldy #0
				jsr RAMSW.GetStkYW
				>STYA K.S.STAT+S.STAT.MODE

				lda #S.FI.T.DIR
				sta K.MLI.PARAMS+4
				stz K.MLI.PARAMS+5
				stz K.MLI.PARAMS+6
				lda #S.FI.ST.DIR
				jmp FS.MLICREATE

.98				lda #MLI.E.INVPATH
				sec
.99				rts
*/--------------------------------------
* # MKFIFO
* return a pathname to a new FIFO
* ## C
* `#include <sys/stat.h>`
* `int mkfifo(const char *path, mode_t mode);`
* ## ASM
* `>SS`
* `>PUSHW path`
* `>PUSHW mode`
* `>LIBC mkfifo`
* `>SR`
* ## RETURN VALUE
* CC = OK, CS = ERROR
*\--------------------------------------
K.MKFIFO		ldy #2					path
				jsr RAMSW.GetStkYW
				>STYA .3+1
				jsr RAMSW.YA2PathBuf

				ldy #0					mode
				jsr RAMSW.GetStkYW
				>STYA K.S.STAT+S.STAT.MODE

				>LDYAI 512
				jsr K.Pipe
				bcs .9

				lda K.PathBuf
				bne .7

				ldy #0

.1				lda STAT.TMPFIFO,y
				sta K.PathBuf,y
				iny
				cpy #9
				bne .1

				lda IO.hFD
				jsr SHARED.A2HexAX
				sta K.PathBuf,y
				txa
				iny
				sta K.PathBuf,y
				iny
				lda #0
				sta K.PathBuf,y

				sta IO.SETWRITEAUX

.2				lda K.PathBuf,y
.3				sta $FFFF,y				SELF MODIFIED
				dey
				bpl .2
				
				sta IO.CLRWRITEAUX

.7				jsr DEV.AddName
				bcc STAT.MKNod

.9				rts
*--------------------------------------
STAT.TMPFIFO	.AS "/tmp/fifo"
*/--------------------------------------
* # MkNod
* Create a special or ordinary file.
* (CDEV, BDEV, DSOCK, SSOCK, PIPE)
* ## C
* `#include <sys/stat.h>`
* `int mknod(const char *pathname, mode_t mode, dev_t dev);`
* ## ASM
* `>SS`
* `>PUSHW pathname`
* `>PUSHW mode`
* `>PUSHW dev`
* `>LIBC mknod`
* `>SR`
* ## RETURN VALUE
* CC = OK, CS = ERROR
* A = hFILE
*\--------------------------------------
K.MKNod 		ldy #4					pathname
				jsr RAMSW.GetStkYW
				jsr RAMSW.YA2PathBuf

				ldy #2					mode
				jsr RAMSW.GetStkYW
				>STYA K.S.STAT+S.STAT.MODE

				ldy #0					dev
				jsr RAMSW.GetStkYW
				>STYA pFD

STAT.MKNod		ldx #0

.1				lda pFILEs+1,x
				beq .2

				inx
				inx
				cpx #K.FILE.MAX*2
				bcc .1

				lda #E.OOH

*				sec

				rts

.2				stx .3+1

				>LDYAI S.FILE
				jsr MEM.Malloc
				bcs .9

				>STYA pFILE

.3				ldx #$FF				SELF MODIFIED

				sta pFILEs+1,x
				tya
				sta pFILEs,x

				lda IO.hFD
				sta (pFILE)				#S.FILE.hFD

				txa
				ldy #S.FILE.ID
				sta (pFILE),y

				lda #0
				ldy #S.FILE.Mode

.4				sta (pFILE),y
				iny
				cpy #S.FILE
				bcc .4

				>LDYA pFILE

				clc

.9				rts
*/--------------------------------------
* # pipe
* ## C
* `hFD pipe(int size);`
* ## ASM
* `>LDYA size`
* `>LIBC pipe`
* ## RETURN VALUE
* CC = OK, CS = ERROR
* A = hFD
*\--------------------------------------
K.Pipe			>STYA A4L				SIZE HI

				jsr MEM.Malloc
				bcs .99

				>STYA A1L				save PIPE buffer

				lda #S.FD.T.PIPE
				jsr DEV.NewFD
				bcs .9

.1				lda A4L+1
				ldy #S.FD.PIPE.Free+1
				sta (pFD),y

				ldy #S.FD.PIPE.Size+1
				sta (pFD),y

				ldy #S.FD.PIPE.pBuf
				lda A1L
				sta (pFD),y
				iny
				lda A1L+1
				sta (pFD),y

				lda IO.hFD
*				clc
				rts

.9				pha						save error code
				>LDYA A1L
				jsr K.Free

				pla
				sec
.99				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.stat
LOAD usr/src/sys/kernel.s
ASM
