NEW
  AUTO 3,1
*--------------------------------------
ZPPtr1			.EQ 0
ZPPtr2			.EQ 2
ZPPtr3			.EQ 4
ZPPtr4			.EQ 6

pFD				.EQ 8
pDRV			.EQ 10
pFILE			.EQ 12
pPS				.EQ 14
*--------------------------------------
ZPMemMgrSPtr 	.EQ $10					Pointer To Slot selected
ZPMemMgrTmp1	.EQ $10+2
ZPMemMgrSize	.EQ $10+4

MEM.ReqFlags	.EQ $10+6				store requested Flags
MEM.BestSlot	.EQ $10+7
MEM.BestScore	.EQ ZPMemMgrTmp1

pIBlk			.EQ $10+8
pLBlk 			.EQ $10+10
pDBlk 			.EQ $10+12

pRWReg			.EQ $10+14
*--------------------------------------
*SIGNFLG		.EQ $16					COS,SIN,TAN
*--------------------------------------
* XMov / XFer
*--------------------------------------
A1L				.EQ $3C					srcPtr
A2L				.EQ $3E					dstPtr
A3L				.EQ $40					srcBnk
A3H				.EQ $41					dstBnk
A4L				.EQ $42					cnt
*--------------------------------------
*XMov			.EQ $C311
*XFer.JMP		.EQ $3ED
*XFer			.EQ $C314				CS:M->X, VS:Use Aux ZP
*--------------------------------------
* $42-$47   ProDOS Block Device Drivers	Main
*--------------------------------------
ZP.CMDNUM		.EQ $42
ZP.UNITNUM		.EQ $43
ZP.BUFPTR		.EQ $44
ZP.BLKNUM		.EQ $46
*--------------------------------------
* $5E-$C8 	RESERVED APPLESOFT			Main/Aux (ROM Call, no need to switch back MainZP)
*--------------------------------------
*INDEX			.EQ $5E					->$5F	LOAD.FAC.FROM.YA
*DEST			.EQ $60					->$61 	used in FCOMP
RESULT			.EQ $62					->$66	used in FMULT FDIV
TMP32.Sign		.EQ RESULT
TMP32			.EQ RESULT+1
*--------------------------------------
ZPTMP			.EQ $67					->$84	29 bytes
*--------------------------------------
* X.UNPAK temp ZP (with ZPPtr1 &ZPPtr2)
*--------------------------------------
				.DUMMY					UNPAK
				.OR ZPTMP
ZPInBufPtr		.BS 2
ZPOutBufPtr		.BS 2

ZPnCnt			.BS 2
ZPInMask		.BS 1
ZPBLOfsLBits	.BS 1
ZPBLOfsHBits	.BS 1
ZPBLLenBits		.BS 1
				.ED
*--------------------------------------
FORPNT			.EQ $85					->$86	Used in GETFAC
*--------------------------------------
TMPEXP			.EQ $99
EXPON			.EQ $9A
DPFLG			.EQ $9B
EXPSGN			.EQ $9C
FAC				.EQ $9D					->$A1
FAC.SIGN		.EQ $A2
SERLEN			.EQ $A3
*--------------------------------------
ACC32.Sign		.EQ FAC
ACC32			.EQ FAC+1
*--------------------------------------
ARG				.EQ $A5					-> $A9 (5 bytes)
ARG.SIGN		.EQ $AA
SGNCPR			.EQ $AB
FAC.EXTENSION	.EQ $AC
*SSTRNG2		.EQ $AD					used by FOUT.1
*--------------------------------------
ARG32.Sign		.EQ ARG
ARG32			.EQ ARG+1
*--------------------------------------
* CHARGET		.EQ $B1
* CHARGOT		.EQ $B7
TXTPTR			.EQ $B8
*--------------------------------------
				.DUMMY
				.OR FAC					12 Bytes
BIN.R.CS.Start	.BS 2
BIN.R.CS.End	.BS 2
BIN.R.ID.End	.BS 2
BIN.R.Size		.BS 2
BIN.R.Offset	.BS 2
BIN.R.Stop		.BS 2
				.ED
*--------------------------------------
				.DUMMY
				.OR ZPTMP				6 Bytes
PS.NewIndex		.BS 1
PS.Flags		.BS 1
PS.pTmpPS		.BS 2
PS.pParentPS	.BS 2
				.ED
*--------------------------------------
				.DUMMY
				.OR ZPTMP+8				7 Bytes
PS.hBuf			.BS 1
PS.pBuf			.BS 2
PS.ArgV			.BS 2
PS.ArgSize		.BS 2
				.ED
*--------------------------------------
				.DUMMY
				.OR ZPTMP+20			6 Bytes
IO.Flags		.BS 1
IO.Type			.BS 1
IO.AuxType		.BS 2
IO.hFD			.BS 1
IO.bTXT			.BS 1
				.ED
*--------------------------------------
SaveSM			.EQ $100				Aux
SaveSX			.EQ $101				Aux
*FOUTBufPtr		.EQ $102				Aux
FOUTBuf			.EQ $103				Aux
*--------------------------------------
* Main $200 -> 2FF : (Used By ProDOS,Clock DRV....)
* Main $300 -> 3EF : Z80 I/O
* Main $3F0 -> 3FF : SYS Vectors (reset,IRQ...)
* Aux  $200 -> 3FD : /RAM Driver
* Aux  $3FE -> 3FF : IRQ Vector
*--------------------------------------
*** $3F0-$3FF IRQ Handler.... ***
*--------------------------------------
SYS.BOOT		.EQ $2C0				setup by QC
*--------------------------------------
*SYS.BASL0		.EQ $400
*--------------------------------------
* Main/Aux $400	-> $7FF : TXT PAGE1		Screens
*--------------------------------------
*K.LoMem		.EQ $1000
K.HiMem			.EQ $6000
*--------------------------------------
U.LoMem			.EQ $1000
U.HiMem			.EQ $C000
*--------------------------------------
H.BIN.T			.EQ 0
H.BIN.T.DRV65		.EQ $4CD8			6502:cld,jmp abs
H.BIN.T.LIB65		.EQ $7CD8			6502:cld,jmp (abs,x)
H.BIN.T.BIN65		.EQ $7CD8			6502:cld,jmp (abs,x)
*H.BIN.T.LIB80		.EQ $A28D			Z80:
*H.BIN.T.BIN80		.EQ $A28D			Z80:
H.BIN.JMP		.EQ 2
H.BIN.CPU		.EQ 4
H.BIN.CPU.6502		.EQ $60
H.BIN.CPU.65C02		.EQ $61
H.BIN.CPU.65R02		.EQ $62
H.BIN.CPU.65816		.EQ $63
H.BIN.V			.EQ 5
H.BIN.SIG		.EQ 6
H.BIN.CS.END	.EQ 8
H.BIN.ID.END	.EQ 10
H.BIN.DS.SIZE	.EQ 12
H.BIN.SS.SIZE	.EQ 14
H.BIN.ZP.SIZE	.EQ 15
*--------------------------------------
S.DCB.TTY.DEVID		.EQ 0
S.DCB.TTY.S			.EQ 1
S.DCB.TTY.M			.EQ 2
S.DCB.TTY.M.ESC			.EQ 2
S.DCB.TTY.M.CSI			.EQ 4
S.DCB.TTY.M.IAC			.EQ 6
S.DCB.TTY.M.G0			.EQ 8
S.DCB.TTY.M.G1			.EQ 10
S.DCB.TTY.CH		.EQ 3
S.DCB.TTY.CH.SAVE	.EQ 4
S.DCB.TTY.CV		.EQ 5
S.DCB.TTY.CV.SAVE	.EQ 6

S.DCB.TTY.SCROLLTOP	.EQ 7
S.DCB.TTY.SCROLLBOT	.EQ 8
S.DCB.TTY.bCURON	.EQ 9
S.DCB.TTY.bTITLE	.EQ 10

S.DCB.TTY.bNORMAL	.EQ 11
S.DCB.TTY.bDECAWM	.EQ 12
S.DCB.TTY.bLNM		.EQ 13

S.DCB.TTY.bG0G1		.EQ 14
S.DCB.TTY.bG0G1ALT	.EQ 15

S.DCB.TTY.OUTTAIL	.EQ 16
S.DCB.TTY.OUTHEAD	.EQ 17
S.DCB.TTY.INBUF		.EQ 18
S.DCB.TTY.INBUF.MAX	.EQ 31
S.DCB.TTY.OUTBUF	.EQ 32
S.DCB.TTY.OUTBUF.MAX	.EQ 64
*
S.DCB.TTY			.EQ 64
*--------------------------------------
S.MD5.A0		.EQ 0
S.MD5.B0		.EQ 4
S.MD5.C0		.EQ 8
S.MD5.D0		.EQ 12
S.MD5.BITCOUNT	.EQ 16
S.MD5.EXTRABIT	.EQ 24
S.MD5.FINALIZED	.EQ 25
*
S.MD5			.EQ 26
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.def
LOAD usr/src/sys/kernel.s
ASM
