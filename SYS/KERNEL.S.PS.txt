NEW
  AUTO 3,1
*/--------------------------------------
* # ExecV
* ## C / CSH
* `#include <unistd.h>`
* `int execv(const char* argv[], int flags);`
* ## ASM
* `>SS`
* `>PUSHW argv`
* `>PUSHW flags`
* `>LIBC execv`
* `>SR`
* ## RETURN VALUE
* Y,A = Child PSID
*\--------------------------------------
K.ExecV			ldy #2
				jsr RAMSW.StkY2TXTPTR	TXTPTR = argv[]

				jsr ARG.ArgV2Args
				bra PS.Exec
*/--------------------------------------
* # ExecL
* ## C / CSH
* `#include <unistd.h>`
* ` int execl(const char *args, int flags);`
* ## ASM
* `>SS`
* `>PUSHW args`
* `>PUSHW flags`
* `>LIBC execl`
* `>SR`
* ## RETURN VALUE
* Y,A = Child PSID
*\--------------------------------------
K.ExecL			ldy #2
				jsr RAMSW.StkY2PathBuf	args

PS.Exec			jsr STDLIB.Expand

				jsr RAMSW.GetStk
				sta PS.Flags

				jsr PS.CreateChild
				bcs .99

				jsr ARG.Args2ArgV		Args in Buf256 -> argv[] in Buf256

				jsr ARG.MakeArgV		Y,A = argv[]
				bcs .90

				phy
				ldy #S.PS.pARGV+1
				sta (PS.pTmpPS),y
				dey
				pla
				sta (PS.pTmpPS),y

				ldy #S.PS.ARGC
				txa
				dec						exclude ARG[0] from cnt
				sta (PS.pTmpPS),y

				jsr PS.SetOwner

				jsr PS.Load
				bcs .90

				lda #S.PS.F.HOLD
				bit PS.Flags
				beq .1

				ora (PS.pParentPS)
				sta (PS.pParentPS)		HOLD parent PS

				ldy #S.PS.CPID
				lda CORE.LastPSID
				sta (PS.pParentPS),y
				iny
				lda CORE.LastPSID+1
				sta (PS.pParentPS),y

.1				ldx PS.NewIndex

				lda PS.pTmpPS
				sta pPSs,x
				lda PS.pTmpPS+1
				sta pPSs+1,x

				lda CORE.LastPSID
				sta PIDs,x
				tay
				lda CORE.LastPSID+1
				sta PIDs+1,x

.8				lda A2osX.ActBnk
				sta (pRWReg)

				clc
				rts

.90				pha						save error code

				jsr PS.Destroy

				lda A2osX.ActBnk
				sta (pRWReg)

				pla						get back error code
				sec
.99				rts
*/--------------------------------------
* # Fork
* ## C / CSH
* `#include <unistd.h>`
* `pid_t fork(void);`
* ## ASM
* `>LIBC fork`
* ## RETURN VALUE
* A = Child PSID
*\--------------------------------------
K.Fork			jsr PS.CreateChild		A=PID,Child S.PS at PS.pTmpPS,PS.Load.hMem
*				bcs .99
*
*				sta .8+1
*
*				ldy #S.PS.S
*				lda #S.PS.S.RUN
*				sta (PS.pTmpPS),y
*
*				ldy #S.PS.hCS
*				lda (ZPPtr1),y
*				sta (PS.pTmpPS),y
*				jsr MEM.GetMemByID
*				jsr Mem.IncRefCnt
*
*				ldy #S.MEM.PTR+1
*				lda (ZPMemMgrSPtr),y
*				pha
*				dey
*				lda (ZPMemMgrSPtr),y
*				ldy #S.PS.ZP.CODE+1
*				sta (PS.pTmpPS),y
*				dey
*				pla
*				sta (PS.pTmpPS),y
*
*				ldy #S.PS.hDS
*				lda (ZPPtr1),y
*				jsr MEM.Dup
*.99				bcs .9
*
*				ldy #S.PS.hDS
*				sta (PS.pTmpPS),y
*				jsr K.GetMemPtr
*				phy
*				ldy #S.PS.ZP.DATA+1
*				sta (PS.pTmpPS),y
*				dey
*				pla
*				sta (PS.pTmpPS),y
*
*				ldy #S.PS.hSS
*				lda (ZPPtr1),y
*				jsr MEM.Dup
*				bcs .9
*
*				ldy #S.PS.hSS
*				sta (PS.pTmpPS),y
*				jsr K.GetMemPtr
*				phy
*				ldy #S.PS.ZP.STACK+1
*				sta (PS.pTmpPS),y
*				dey
*				pla
*				sta (PS.pTmpPS),y
*
*				ldy #S.PS.hARGV
*				lda (ZPPtr1),y
*				jsr MEM.Dup
*				bcs .9
*
*				ldy #S.PS.hARGV
*				sta (PS.pTmpPS),y
*
*				dey						S.PS.ARGC
*
*				lda (ZPPtr1),y
*				sta (PS.pTmpPS),y
*
*				ldy #S.PS.A
*				lda #0
*				sta (PS.pTmpPS),y		Forked PS will get A=PSID=0
*				iny
*
*.1				lda (ZPPtr1),y
*				sta (PS.pTmpPS),y
*				iny
*				cpy #S.PS.hSession
*				bne .1
*
*				ldy #S.PS.ZP.LOCAL
*
*.2				lda (ZPPtr1),y
*				sta (PS.pTmpPS),y
*				iny
*				cpy #S.PS
*				bne .2
*
*.8				lda #$ff				SELF MODIFIED
*				clc
.9				rts
*--------------------------------------
PS.CreateChild	jsr PS.New
				bcs .99

				ldy #S.PS.Bnk
				lda (PS.pParentPS),y
				sta A3L

				lda (PS.pTmpPS),y
				sta A3H
				sta (pRWReg)

				ldy #S.PS.pCWD			copy CWD...
				jsr PS.GetParentY

				jsr MEM.MBDupYA
				bcs .9

				phy
				ldy #S.PS.pCWD+1
				sta (PS.pTmpPS),y
				dey
				pla
				sta (PS.pTmpPS),y

				jsr PS.SetOwner

				ldy #S.PS.EnvSize
				jsr PS.Copy2NewY

				ldy #S.PS.pENV
				jsr PS.GetParentY

				jsr MEM.MBDupYA
				bcs .9

				phy
				ldy #S.PS.pENV+1
				sta (PS.pTmpPS),y
				dey
				pla
				sta (PS.pTmpPS),y

				jmp PS.SetOwner

.9				pha
				jsr PS.Destroy

				pla
				sec

.99				rts
*--------------------------------------
PS.New 			ldx #2					Skip PS0

.1				lda pPSs+1,x
				beq .2					Found an empty slot

				inx
				inx
				cpx #K.PS.MAX*2
				bcc .1

				lda #E.OOH
*				sec
				rts

.2				stx PS.NewIndex

.3				inc CORE.LastPSID		Get a PSID not already running
				bne .4

				inc CORE.LastPSID+1
				beq .3					not = 0

.4				>LDYA CORE.LastPSID
				jsr PS.FindYA
				bcc .3					running...loop

				>LDYAI S.PS
				ldx #S.MEM.F.INIT0		Blank Everything in this S.PS
				jsr MEM.Malloc.YAX
				bcs .9

				>STYA PS.pTmpPS

				lda PS.Flags
				and #S.PS.F.CLOSEONX
				sta (PS.pTmpPS)

				lda #S.PS.F.NOHUP
				bit PS.Flags
				beq .5

				jsr MEM.GetBestBnk
				ldy #S.PS.Bnk
				sta (PS.pTmpPS),y

				>LDYA pPSs				Parent is PS0
				bra .6

.5				lda A2osX.ActBnk
				ldy #S.PS.Bnk
				sta (PS.pTmpPS),y

				>LDYA pPS				Parent is active PS

.6				>STYA PS.pParentPS

				lda CORE.LastPSID
				ldy #S.PS.PID
				sta (PS.pTmpPS),y
				lda (PS.pParentPS),y
				ldy	#S.PS.PPID
				sta (PS.pTmpPS),y

				lda CORE.LastPSID+1
				ldy #S.PS.PID+1
				sta (PS.pTmpPS),y
				lda (PS.pParentPS),y
				ldy	#S.PS.PPID+1
				sta (PS.pTmpPS),y

				ldy #S.PS.pStdIn

.7				jsr PS.Copy2NewY
				iny
				cpy #S.PS.pStdErr+2
				bcc .7

				ldy #S.PS.pSession
				jsr PS.Copy2NewY

*				tax
*				lda USRs.hSID-1,x
*				jsr MEM.GetMemByID
*				jsr MEM.IncRefCnt


*				lda #S.PS.S.INIT
*				ldy #S.PS.S
*				sta (PS.pTmpPS),y		Make this PS Init....

				clc

.9				rts
*--------------------------------------
PS.GetParentY	lda (PS.pParentPS),y
				pha
				iny
				lda (PS.pParentPS),y
				ply
				rts
*--------------------------------------
PS.Copy2NewY	lda (PS.pParentPS),y
				sta (PS.pTmpPS),y
				iny
				lda (PS.pParentPS),y
				sta (PS.pTmpPS),y
				rts
*--------------------------------------
* ZPPtr1 = K.PathBuf = ARGV[0] expanded
*--------------------------------------
PS.Load			ldx #$ff

.1				inx
				lda K.PathBuf,x
				beq .2					no / in path...try search in PATH

				cmp #'/'
				bne .1

				jsr STAT.Stat			found /, some path specified, no search
				bcc .6					REAL path in K.PathBuf

				rts						file not found
*--------------------------------------
.2				jsr PS.Find.PATH		Get fullpath in K.PathBuf
				bcc .6

				jsr PS.Find.CWD
				bcs PS.RTS
*--------------------------------------
.6				lda K.S.STAT+S.STAT.P.TYPE

				cmp #S.FI.T.BIN
				beq .8

				cmp #S.FI.T.TXT
				beq PS.LoadTXT

				cmp #S.FI.T.SYS
				bne PS.Load.IPATH

				>LDYAI PS.SHUTDOWN
				jsr PS.Find.PATH
				bcs PS.RTS

.8				jmp PS.LoadBIN
*--------------------------------------
PS.Load.IPATH	lda #E.BADPATH
				.HS 2C
PS.Load.IBIN	lda #E.IBIN
				sec
PS.RTS			rts
*--------------------------------------
PS.LoadTXT		jsr PS.LoadGetHeader
				bcs PS.RTS

				ldx #0

.3				lda K.IOBuf,x			Check HEADER= "#!"
				cmp PS.HEADER,x
				bne PS.Load.IBIN

				inx
				cpx #2
				bne .3

				ldy #0

.4				inx
				iny
				lda K.IOBuf-1,x
				sta K.PathBuf-1,y		K.PathBuf = "/bin/shell"
				beq .5

				eor #C.CR
				bne .4

				sta K.PathBuf-1,y

.5				jsr STAT.Stat
				bcs PS.RTS

				lda K.S.STAT+S.STAT.P.TYPE
				cmp #S.FI.T.BIN
				bne PS.Load.IBIN
*--------------------------------------
PS.LoadBIN		sec						load in User Memory

				jsr BIN.Load			K.PathBuf= "/BIN/SH\0", K.IOBuf=/.../SCRIPT
				bcs PS.RTS

* PS.pBuf = PTR to Code Segment, A1L = CmdLine

				phy
				ldy #S.PS.pCode+1
				sta (PS.pTmpPS),y		save pCode HI...
				dey
				pla
				sta (PS.pTmpPS),y		save pCode LO...
				
				lda A1L
				ldy #S.PS.pCmdLine
				sta (PS.pTmpPS),y
				iny
				lda A1L+1
				sta (PS.pTmpPS),y

				ldy #H.BIN.SIG
				jsr RAMSW.pBufgY

				ldy #S.PS.SIG
				sta (PS.pTmpPS),y

.1				ldy #H.BIN.DS.SIZE+1
				jsr RAMSW.pBufgY		Load DS.SIZE HI
				dey
				tax
				bne .22

				jsr RAMSW.pBufgY
				beq .2					DS.SIZE=0...

.22				jsr RAMSW.pBufgY
				tay
				txa						Y,A = DS.SIZE

				ldx #S.MEM.F.INIT0+S.MEM.F.DATA
				jsr MEM.MallocX.YAX
				bcs .9

				phy
				ldy #S.PS.pData+1
				sta (PS.pTmpPS),y		save pData HI...
				dey
				pla
				sta (PS.pTmpPS),y		save pData LO...

				jsr PS.SetOwner

.2				ldy #H.BIN.SS.SIZE
				jsr RAMSW.pBufgY		Load SS.SIZE
				sta .4+1

				tay
				beq .3					SS.SIZE.LO=0, set as default $100

				lda #$ff				SS.SIZE.HI

.3				inc

				ldx #S.MEM.F.NOCROSS+S.MEM.F.STACK
				jsr MEM.MallocX.YAX
				bcs .9

				phy

				ldy #S.PS.pSS+1
				sta (PS.pTmpPS),y

				ldy #S.PS.pStack+1
				sta (PS.pTmpPS),y		save pStack HI...

				ldy #S.PS.pBase+1
				sta (PS.pTmpPS),y		save pLocal HI...

				pla
				ldy #S.PS.pSS
				sta (PS.pTmpPS),y

*				clc

.4				adc #$ff				SELF MODIFIED

				ldy #S.PS.pStack
				sta (PS.pTmpPS),y		...plus Stack size

				ldy #S.PS.pBase
				sta (PS.pTmpPS),y

				clc

				jmp PS.SetOwner

.9				rts
*--------------------------------------
PS.SetOwner		sta IO.SETWRITEAUX

				ldy #S.MEM.OWNER
				lda CORE.LastPSID
				sta (ZPMemMgrSPtr),y
				iny
				lda CORE.LastPSID+1
				sta (ZPMemMgrSPtr),y

				sta IO.CLRWRITEAUX
				rts
*--------------------------------------
PS.LoadGetHeader
				lda #O.RDONLY
				sta IO.Flags
				lda #S.FI.T.TXT
				sta IO.Type
				stz IO.AuxType
				stz IO.AuxType+1

				lda #$FF				TXT
				sta IO.bTXT
				clc						MAIN
				ror A2osX.IOOpt

				jsr STDIO.FOpen
				bcs .9

*				>STYA pFILE
*				>PUSHW pFILE
				>SS
				sta IO.SETWRITEAUX
				>PUSHYA
				>PUSHWI K.IOBuf
				>PUSHWI 256
				sta IO.CLRWRITEAUX
				jsr K.FRead.PFT
				>SR

				jmp BIN.FClose

.9				rts
*/--------------------------------------
* # Kill
* ## C
* `int kill(int pid, int sig);`
* ## ASM
* `>SS`
* `>PUSHW pid`
* `>PUSHW sig`
* `>LIBC kill`
* `>SR`
* ## RETURN VALUE
*\--------------------------------------
K.Kill			ldy #2
				jsr RAMSW.GetStkYW		pid

				jsr PS.FindYA
				bcs .99

				>STYA PS.pTmpPS
				stx PS.DestroyIdx

				jsr RAMSW.GetStk		sig
				cmp #2+1
				bcs .9

				asl
				tax
				jmp (.1,x)

.1				.DA K.Kill.0
				.DA K.Kill.1
				.DA PS.Destroy

.9				lda #E.SYN
*				sec
.99				rts
*--------------------------------------
K.Kill.1		lda (PS.pTmpPS)
				and #S.PS.F.SLEEP^$FF
				sta (PS.pTmpPS)

				ldy #S.PS.S
				lda #S.PS.S.QUIT
				sta (PS.pTmpPS),y

K.Kill.0		clc
				rts
*--------------------------------------
PS.DestroyX		stx PS.DestroyIdx

				>LDYA pPSs,x
				>STYA PS.pTmpPS

				lda (PS.pTmpPS)
				bit #S.PS.F.CLOSEONX
				beq .1

				ldy #S.PS.pStdOut
				lda (PS.pTmpPS),y
				pha
				iny
				lda (PS.pTmpPS),y
				ply
				jsr K.FClose

.1				jsr PS.Destroy

				ldx PS.DestroyIdx
				stz PIDs,x
				stz PIDs+1,x
				stz pPSs,x
				stz pPSs+1,x

				rts
*--------------------------------------
PS.Destroy		ldx #5

.1				ldy .10,x
				lda (PS.pTmpPS),y
				beq .2

				pha
				dey
				lda (PS.pTmpPS),y
				tay
				pla

				phx
				jsr K.Free
				plx

.2				dex
				bpl .1

				>LDYA PS.pTmpPS
				jmp MEM.FreeYA

.10				.DA #S.PS.pSS+1,#S.PS.pData+1,#S.PS.pCode+1
				.DA #S.PS.pARGV+1,#S.PS.pCWD+1,#S.PS.pENV+1

PS.DestroyIdx	.BS 1
*/--------------------------------------
* # GetPS(int PID)
*
* ## C
* `void *getps (int PID);`
* ## ASM
* `>LDYA PID`
* `>LIBC GetPS`
* ## RETURN VALUE
*  Y,A = Ptr to PS struct
*\--------------------------------------
K.GetPS			jsr PS.FindYA
				bcc PS.GetYAX
				
				rts

PS.GetYAX		stx .4+1

				>STYA ZPPtr1

				>LDYAI S.PS
				jsr K.Malloc
				bcs .9

				>STYA ZPPtr2

				ldy #S.PS-1

				sta IO.SETWRITEAUX

.3				lda (ZPPtr1),y
				sta (ZPPtr2),y
				dey
				bpl .3

.4				ldx #$ff				SELF MODIFIED

				lda PSStats,x

				ldy #S.PS.CPU
				sta (ZPPtr2),y

				>LDYA ZPPtr2

*				sta IO.CLRWRITEAUX

*				clc

.9				rts
*--------------------------------------
* Y,A = PID
*--------------------------------------
PS.FindYA		ldx #2					Skip PS0
				sty .2+1

.1				ldy PIDs,x

.2				cpy #$ff				SELF MODIFIED
				bne .3

				cmp PIDs+1,x
				beq .8

.3				inx
				inx
				cpx #K.PS.MAX*2
				bcc .1

				lda #E.NSP
*				sec
				rts

.8				>LDYA pPSs,x

				clc
PS.RTS2			rts
*/--------------------------------------
* # LoadTxtFile
* Load TXT a file in memory (with ending 0)
* ## C
* `void *loadtxtfile ( const char * filename );`
* ## ASM
* `>LDYA filename`
* `>LIBC loadtxtfile`
* ## RETURN VALUE
*  Y,A = Ptr to loaded file
*\--------------------------------------
K.LoadTxtFile	jsr PFT.GetPathYA
				bcs PS.RTS2

				lda #O.RDONLY
				sta IO.Flags
				lda #S.FI.T.TXT
				sta IO.Type
				stz IO.AuxType
				stz IO.AuxType+1

				lda #$FF
				sta IO.bTXT				TXT
				sec						AUX
				bra PS.LoadFileA
*/--------------------------------------
* # LoadFile
* Load a file in memory
* ## C
* `void *loadfile(const char *filename, short int flags, short int ftype, int auxtype);`
* ## ASM
* `>PUSHW filename`
* `>PUSHB flags`
* `>PUSHB ftype`
* `>PUSHW auxtype`
* `>LIBC loadfile`
* ## RETURN VALUE
*  Y,A = Ptr to loaded file
*\--------------------------------------
K.LoadFile		jsr PFT.GetPath4
				bcs PS.RTS2

				jsr STDIO.GetOpenP

				stz IO.bTXT				BIN
				sec						AUX

PS.LoadFileA	ror A2osX.IOOpt

				jsr STAT.Stat
				bcs PS.RTS2

PS.LoadFile		lda K.S.STAT+S.STAT.SIZE+3
				ora K.S.STAT+S.STAT.SIZE+2
				bne .97

				>LDYA K.S.STAT+S.STAT.SIZE

				bit IO.bTXT				TXT: Add 1 to buffer size for ending 0
				bpl .1

				iny
				bne .1

				inc
				bra .1
*--------------------------------------
.95				jsr BIN.FClose

.96				jmp BIN.FreeBuf

.97				lda #E.FTB
				sec
.99				rts
*--------------------------------------
.1				bit A2osX.IOOpt
				bmi .2

				jsr MEM.Malloc
				bcc .3

				rts

.2				jsr K.Malloc

.3				bcs .9

				>STYA PS.pBuf
				stx PS.hBuf

				jsr STDIO.FOpen
				bcs .96

*				>STYA pFILE
*				>PUSHW pFILE
				>SS
				sta IO.SETWRITEAUX
				>PUSHYA
				>PUSHW PS.pBuf
				>PUSHWI $ffff
				sta IO.CLRWRITEAUX

				lda A2osX.IOOpt			AUX ?
				sta MLI.IOBANK

				jsr K.FRead.PFT
				>SR
				bcs .95

				bit IO.bTXT				TXT: set ending 0
				bpl .5

				pha
				tya

*				clc

				adc PS.pBuf
				sta .4+1
				pla
				adc PS.pBuf+1
				sta .4+2

				bit A2osX.IOOpt			AUX ?
				bpl .4

				sta IO.SETWRITEAUX

.4				stz $ffff				SELF MODIFIED

				sta IO.CLRWRITEAUX

.5				jsr BIN.FClose

				>LDYA PS.pBuf

*				clc

.9				rts
*/--------------------------------------
* # FileSearch
* Search a file in the provided PATH list
* And return, if found, the full path to it.
* ## C
* `int filesearch(char *filename, char *searchpath, char *fullpath, stat *filestat);`
* ## ASM
* `>SS`
* `>PUSHW filename`
* `>PUSHW fullpath`
* `>PUSHW searchpath`
* `>PUSHW filestat`
* `>LIBC filesearch`
* `>SR`
* ## RETURN VALUE
* CC : success
* DstBuf = FilePath
* DstStat = S.STAT
* CS : not found
*\--------------------------------------
K.FileSearch	ldy #6					filename to find
				jsr RAMSW.GetStkYW
				>STYA ZPPtr1

				ldy #4					path to search
				jsr RAMSW.GetStkYW
				>STYA ZPPtr3

				ldy #2					DstBuf
				jsr RAMSW.GetStkYW
				>STYA .2+1

				ldy #0					DstStat
				jsr RAMSW.GetStkYW
				>STYA .4+1

				jsr PS.Find
				bcs .9

				sta IO.SETWRITEAUX

				ldx #$ff

.1				inx
				lda K.PathBuf,x
.2				sta $ffff,x				Self Modified
				bne .1

				ldx #S.STAT-1

.3				lda K.S.STAT,x
.4				sta $ffff,x				Self Modified
				dex
				bpl .3

				sta IO.CLRWRITEAUX

*				clc
.9				rts
*--------------------------------------
PS.Find.CWD		ldy #S.PS.pCWD
				lda (PS.pTmpPS),y
				sta ZPPtr3
				iny
				lda (PS.pTmpPS),y
				sta ZPPtr3+1

				bra PS.Find
*--------------------------------------
* File to find in ZPPtr1
*--------------------------------------
PS.Find.LIB		ldx #0
				.HS 2C					BIT ABS
PS.Find.DRV		ldx #2
				.HS 2C					BIT ABS
PS.Find.PATH	ldx #4

				>LDYA PS.VARS,x
				jsr ENV.GetEnvP3		get value for Search Path
				bcs PS.Find.RTS

PS.Find			stz .1+1				Index in Search list string

.1				ldy #0					SELF MODIFIED

				ldx #0

.2				jsr RAMSW.xP3gY
				beq .3					end of string, try it....

				iny
				cmp #':'
				beq .3

				sta K.PathBuf,x
				inx
				bra .2
*--------------------------------------
.3				txa
				beq .98					String is empty....nothing to try

				sty .1+1				save current index

				ldy #0

.4				jsr RAMSW.xP1gY			Append cmdline...
				sta K.PathBuf,x
				beq .5

				iny
				inx
				bra .4
*--------------------------------------
.5				jsr PS.Stat
				bcs .1					Failed...retry next path...

				lda K.S.STAT+S.STAT.MODE+1
				cmp /S.STAT.MODE.DIR	Dir ?
				beq .1

				clc
				rts

.98				lda #MLI.E.FNOTFND
				sec
PS.Find.RTS		rts
*--------------------------------------
PS.GetYw		lda (pPS),y
				pha
				iny
				lda (pPS),y
				ply
				bne .8

				cmp #0

.8				rts
*--------------------------------------
PS.Stat			ldx ZPPtr3
				phx
				ldx ZPPtr3+1
				phx

				jsr STDLIB.Expand
				bcs .1

				jsr STAT.Stat

.1				plx
				stx ZPPtr3+1
				plx
				stx ZPPtr3

				rts
*--------------------------------------
PS.HEADER		.AS "#!"
PS.SHUTDOWN		.AZ "shutdown"
PS.VARS			.DA .1
				.DA .2
				.DA .3
.1				.AZ "LIB"
.2				.AZ "DRV"
.3				.AZ "PATH"
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.ps
LOAD usr/src/sys/kernel.s
ASM
