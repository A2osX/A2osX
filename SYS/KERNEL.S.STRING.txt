NEW
  AUTO 3,1
*/--------------------------------------
* # StrDup
* Create a new copy of this C-String
* ## C
* `#include <string.h>`
* `char *strdup(const char *s);`
* ## ASM
* Y,A = Ptr to source C-String
* CC : success 
*  Y,A = PTR to String
* CS : error
*  A = SYS error code
*\--------------------------------------
K.StrDup		jsr K.StrLen			src in A1L 

				iny						Add one for ending 0
				bne .1

				inc 

.1				>STYA A4L				len

				jsr K.Malloc
				bcs .9

				>STYA A2L				dst

				phy
				pha

				jsr MEM.CpyX2X

				pla
				ply
				clc
.9				rts
*/--------------------------------------
* # StrLen
* Returns Length of C-String
* ## C
* `#include <string.h>`
* `size_t strlen(const char *s);`
* ## ASM
* `>LDYAI str`
* `>LIBC strlen`
* ## RETURN VALUE 
* Y,A = String length
*\--------------------------------------
K.StrLen		>STYA A1L

				pha

				ldy #0
				ldx #0
				
				bit A2osX.IOOpt
				bmi .2

.1				lda (A1L),y
				beq .8

				iny
				bne .1

				inx
				inc A1L+1
				bra .1

.2				jsr RAMSW.xA1LgY
				beq .8

				iny
				bne .2

				inx
				inc A1L+1
				bra .2

.8				pla
				sta A1L+1

				txa
				clc
				rts
*/--------------------------------------
* # StrCat
* Concatenate strings
* ## C
* `#include <string.h>`
* `char * strcat ( char * destination, const char * source );`
* ## ASM
* `>PUSHWI destination`
* `>PUSHWI source`
* `>LIBC strcat`
* ## RETURN VALUE 
* Y,A = destination
*\--------------------------------------
K.StrCat		sec
				.HS 90					BCC
*/--------------------------------------
* # StrCpy
* `#include <string.h>`* Copy string
* ## C
* `#include <string.h>`
* `char *strcpy(char *restrict dst, const char *restrict src);`
* ## ASM
* `>PUSHWI destination`
* `>PUSHWI source`
* `>LIBC strcpy`
* ## RETURN VALUE 
* Y,A = destination
*\--------------------------------------
K.StrCpy		clc

				ldy #2					dst
				jsr RAMSW.GetStkYW
				
				>STYA FORPNT
				phy
				pha
				
				ldy #0					src
				jsr RAMSW.StkY2TXTPTR
						
				bcc .2
		
.1				jsr RAMSW.xFORPNTgn
				bne .1

.2				jsr RAMSW.xTXTPTRgn
				jsr SHARED.xFORPNTpn
				tay
				bne .2
				
.8				pla
				ply
				clc
				rts
*/--------------------------------------
* # StrUpr/StrLwr
* Convert string to UPPERCASE/lowercase
* ## C
* `#include <string.h>`
* `int strupr ( char * str);`
* `int strlwr ( char * str);`
* ## ASM
* `>LDYAI str`
* `>LIBC strupr`
* `>LIBC strlwr`
* ## RETURN VALUE 
* Uppercased/lowercased String in Buffer
* Y,A = str
*\--------------------------------------
K.StrUpr		ldx #0
				.HS 2C					BIT ABS
K.StrLwr		ldx #2
				>STYA TXTPTR
				phy
				pha						save Y,A to restore them at exit

				ldy #0
				sta IO.SETWRITEAUX

.1				jsr RAMSW.xTXTPTRgY
				beq .8

				cmp .9,x
				bcc .2

				cmp .9+1,x
				bcs .2

				eor #$20
				sta (TXTPTR),y

.2				iny
				bne .1

				inc TXTPTR+1
				bra .1
				
.8				sta IO.CLRWRITEAUX
				pla
				ply
				clc
				rts
*--------------------------------------
.9				.AS "a{A["
*/--------------------------------------
* # StrCmp
* Compare 2 strings
* ## C
* `#include <string.h>`
* `int strcmp(const char *s1, const char *s2);`
* ## ASM
* `>PUSHWI s1`
* `>PUSHWI s2`
* `>LIBC strcmp`
* ## RETURN VALUE 
* CC : match
* CS : no match
*  CC, Y,A=0
*  CS, Y,A > 0 or < 0
*\--------------------------------------
K.StrCmp		sec
				.HS 90					BCC
*/--------------------------------------
* # StrCaseCmp
* Compare 2 strings, ignoring case
* ## C
* `#include <string.h>`
* `int strcasecmp(const char *s1, const char *s2);`
* ## ASM
* `>PUSHWI s1`
* `>PUSHWI s2`
* `>LIBC strcasecmp`
* ## RETURN VALUE 
* CC : match
* CS : no match
*  CC, Y,A=0
*  CS, Y,A > 0 or < 0
*\--------------------------------------
K.StrCaseCmp	clc
				ldy #2
				jsr RAMSW.StkY2TXTPTR
				ldy #0
				jsr RAMSW.StkY2FORPNT

				ldy #0

.1				jsr RAMSW.xTXTPTRgY
				beq .7

				jsr .80
				sta .2+1
				jsr RAMSW.xFORPNTgY
				beq .9

				jsr .80

.2				eor #$ff				SELF MODIFIED
				bne .9

				iny
				bne .1

				inc TXTPTR+1
				inc FORPNT+1
				bra .1
 
.7				jsr RAMSW.xFORPNTgY
				bne .9

				tay						Y,A = 0

.8				clc
				rts

.9				sec

				lda .2+1
				jsr RAMSW.xFORPNTgY
				ldy #0
				sec
				rts
*--------------------------------------
.80				bcs .99

				cmp #'a'
				bcc .99
				
				cmp #'z'+1
				bcs .81

				eor #$20

.81				clc

.99				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.string
LOAD usr/src/sys/kernel.s
ASM
