NEW
  AUTO 3,1
*/--------------------------------------
* # PutEnv
* Change or add an environment variable, string is 'NAME=VALUE'
* ## C / CSH
* `#include <stdlib.h>`
* `int putenv(char *string);`
* ## ASM
* `>LDYA string`
* `>LIBC putenv`
* ## RETURN VALUE
*  CC, Y,A = 0
*  CS, Y,A = -1, ERRNO
*\--------------------------------------
ENV.bOverwrite	.BS 2
*--------------------------------------
K.PutEnv		>STYA TXTPTR			name=value

				ldy #$ff

.1				iny
				jsr RAMSW.xTXTPTRgY	 	NAME=
				beq .9

				cmp #'='
				bne .1

				tya
				sec						skip =
				adc TXTPTR
				sta FORPNT

				lda #0
				adc TXTPTR+1
				sta FORPNT+1

				bra ENV.SetEnv

.9				lda #E.SYN
				ldy #S.PS.ERRNO
				sta (pPS),y

				lda #$ff				-1
				tay

				sec
				rts
*/--------------------------------------
* # SetEnv
* Change or add an environment variable
* ## C / CSH
* `#include <stdlib.h>`
* `int setenv(const char *envname, const char *envval, int overwrite);`
* ## ASM
* `>PUSHW envname`
* `>PUSHW envval`
* `>PUSHW overwrite`
* `>LIBC setenv`
* ## RETURN VALUE
*  CC, Y,A = 0
*  CS, Y,A = -1, ERRNO
*\--------------------------------------
K.SetEnv		ldy #4					envname
				jsr RAMSW.StkY2TXTPTR

				ldy #2					envval
				jsr RAMSW.StkY2FORPNT

				jsr RAMSW.GetStk
				sta ENV.bOverwrite

* FROM putenv

ENV.SetEnv		jsr ENV.UnsetEnv

.1				jsr ENV.InitEnvP3

				lda #1					\0
				sta ZPPtr4
				stz ZPPtr4+1

.10				jsr RAMSW.xP3g			End of ENV
				beq .15

				jsr ENV.NextEnvP3
				jsr ENV.NextEnvP4Y
				bra .10

.15				ldy #$ff

.16				iny
				jsr RAMSW.xTXTPTRgY
				beq .17

				jsr SHARED.IsIDValid
				bcc .16

.17				jsr ENV.NextEnvP4Y		ZPPtr4 = ENVSIZE + VAR

				ldy #$ff

.19				iny
				jsr RAMSW.xFORPNTgY
				bne .19

				jsr ENV.NextEnvP4Y		ZPPtr4 = ENVSIZE + VALUE

				ldy #S.PS.EnvSize
				lda (pPS),y
				cmp ZPPtr4
				iny
				lda (pPS),y
				sbc ZPPtr4+1
				bcs .22					env is large enough

				>SS
				ldy #S.PS.pENV+1
				lda (pPS),y
				>PUSHA
				dey
				lda (pPS),y
				>PUSHA
				>PUSHW ZPPtr4
				jsr K.Realloc
				>SR
				bcs .9

				phy
				ldy #S.PS.pENV+1
				sta (pPS),y
				pla
				dey
				sta (pPS),y

				ldy #S.PS.EnvSize
				lda ZPPtr4
				sta (pPS),y
				iny
				lda ZPPtr4+1
				sta (pPS),y

				bra .1				Start over
*--------------------------------------
.22				ldy #$ff

				sta IO.SETWRITEAUX

.23				iny
				jsr RAMSW.xTXTPTRgY
				sta (ZPPtr3),y
				beq .24

				jsr SHARED.IsIDValid
				bcc .23

.24				lda #'='
				sta (ZPPtr3),y

				jsr ENV.NextEnvP3Y

				ldy #$ff

.25				iny
				jsr RAMSW.xFORPNTgY
				sta (ZPPtr3),y
				bne .25

				iny
				sta (ZPPtr3),y			don't forget array ending 0

				sta IO.CLRWRITEAUX

				clc

.9				rts
*/--------------------------------------
* # GetEnv
* searches the environment list to find the environment variable name,
* and returns a pointer to the corresponding value string.
* ## C / CSH
* `#include <stdlib.h>`
* `char *getenv(const char *name);`
* ## ASM
* `>LDYA name`
* `>LIBC getenv`
* ## RETURN VALUE
*  CC : Y,A = PTR to VALUE (C-String)
*  CS : Y,A = NULL
*\--------------------------------------
K.GetEnv		>STYA TXTPTR			name

				tay
				beq	.10					return pENV

				jsr ENV.FindEnvVar
				bcs .9

				jsr ENV.NextEnvP3Y		Skip NAME=

				>LDYA ZPPtr3

				clc
.9				rts

.10				ldy #S.PS.pENV
				lda (pPS),y
				pha
				iny
				lda (pPS),y
				ply
				clc
				rts
*--------------------------------------
ENV.GetEnvP3	>STYA ZPPtr4			name

				jsr ENV.InitEnvP3		Store ENV

.1				jsr RAMSW.xP3g
				beq .9					end of ENV

				ldy #$ff

.2				iny
				lda (ZPPtr4),y
				beq .3

				jsr SHARED.IsIDValid
				bcs .3

				jsr RAMSW.xP3cY
				beq .2

				bra .4

.3				jsr RAMSW.xP3gY
				cmp #'='
				bne .4

				jsr ENV.NextEnvP3Y		Skip NAME=

				clc
				rts

.4				jsr ENV.NextEnvP3		Skip NAME=VALUE
				bra .1

.9				sec
				rts
*/--------------------------------------
* # UnsetEnv
* Remove an environment variable
* ## C / CSH
* `#include <stdlib.h>`
* `int unsetenv(const char *name);`
* ## ASM
* `>LDYA name`
* `>LIBC unsetenv`
* ## RETURN VALUE
*  CC, Y,A = 0
*  CS, Y,A = -1, X=ERRNO
*\--------------------------------------
K.UnsetEnv		>STYA TXTPTR			name

ENV.UnsetEnv	jsr ENV.FindEnvVar
				bcs .8					not found, quit

				jsr ENV.DelVarP3		Ptr3 -> NAME=VALUE

.8				clc

				rts
*--------------------------------------
* ENV.FindEnvVar
*  In:
*	 TXTPTR -> NAME
*  Out:
*   CC: Found
*    Y = NAME len
*	 TXTPTR -> NAME
*	 ZPPtr3 -> NAME=VALUE
*	CS: Not Found
*	 TXTPTR -> NAME
*	 ZPPtr3 -> PTR to Ending 0
*--------------------------------------
ENV.FindEnvVar	jsr ENV.InitEnvP3		Store ENV

.1				jsr RAMSW.xP3g
				beq .9					end of ENV

				ldy #$ff

.2				iny
				jsr RAMSW.xTXTPTRgY
				beq .3

				jsr SHARED.IsIDValid
				bcs .3

				jsr RAMSW.xP3cY
				beq .2

				bra .4

.3				jsr RAMSW.xP3gY
				cmp #'='
				bne .4

				clc
				rts

.4				jsr ENV.NextEnvP3		Skip NAME=VALUE
				bra .1

.9				lda #E.NOKEY
				sec
				rts
*--------------------------------------
* ENV.DelVarP3
*  In:
*	ZPPtr3 -> ENV.NAME to Discard
*--------------------------------------
ENV.DelVarP3	>LDYA ZPPtr3			save actual Ptr
				>STYA ZPPtr4
				jsr ENV.NextEnvP3		Skip NAME=VALUE

				sta IO.SETWRITEAUX

.1				ldy #$ff

.2				iny
				jsr RAMSW.xP3gY			Move back CSTRs...
				sta (ZPPtr4),y
				bne .2

				tya

				beq .8					we moved back ending \0

				jsr ENV.NextEnvP3Y
				jsr ENV.NextEnvP4Y
				bra .1

.8				sta IO.CLRWRITEAUX

				rts
*--------------------------------------
ENV.InitEnvP3	ldy #S.PS.pENV
				lda (pPS),y
				sta ZPPtr3
				iny
				lda (pPS),y
				sta ZPPtr3+1
				rts
*--------------------------------------
ENV.NextEnvP3	ldy #$ff

.1				iny
				jsr RAMSW.xP3gY
				bne .1
*--------------------------------------
ENV.NextEnvP3Y	tya
				sec
				adc ZPPtr3
				sta ZPPtr3
				bcc .8

				inc ZPPtr3+1

.8				rts
*--------------------------------------
ENV.NextEnvP4Y	tya
				sec
				adc ZPPtr4
				sta ZPPtr4
				bcc .8

				inc ZPPtr4+1

.8				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.env
LOAD usr/src/sys/kernel.s
ASM
