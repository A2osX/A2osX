NEW
  AUTO 3,1
*/--------------------------------------
* # Shift
* ## ASM
* A = argument index.
* ## RETURN VALUE
* CC : success
* Y,A = PTR To Arg[A]
* CS : Out Of Bound
*\--------------------------------------
K.Shift			jsr K.ArgV
				bcs .9

				>STYA ZPPtr1
*				>STYA ZPPtr2			already set from ArgV

				ldy #$ff

.1				iny
				lda (ZPPtr1),y
				bne .1

.2				jsr SHARED.AddYp12P1

				ldy #$ff

.3				iny
				lda (ZPPtr1),y
				sta (ZPPtr2),y
				bne .3

				tya
				beq .8

				jsr SHARED.AddYp12P2
				bra .2

.8				ldy #S.PS.ARGC
				lda (pPS),y
				dec
				sta (pPS),y
				clc

.9				rts
*/--------------------------------------
* # ArgV
* ## ASM
* A = argument index.
* ## RETURN VALUE
* CC : success
* Y,A = PTR To Arg[A]
* CS : Out Of Bound
*\--------------------------------------
K.ArgV			tax						save requested arg#

				ldy #S.PS.pARGV
				lda (pPS),y
				sta ZPPtr2
				iny
				lda (pPS),y
				sta ZPPtr2+1			Use Ptr2, called from ExpandStr

.1				jsr RAMSW.xP2g			end of ARGV[] ?
				beq .9					yes, not found....

				dex
				bmi .8

				ldy #$ff

.2				iny
				jsr RAMSW.xP2gY
				bne .2

				tya
				sec
				adc ZPPtr2
				sta ZPPtr2
				bcc .1

				inc ZPPtr2+1
				bra .1

.8				>LDYA ZPPtr2

				clc
				rts

.9				lda #E.OOB
				sec
				rts
*/--------------------------------------
* # Arg2ArgV
* Expand String and convert to StrV List
* ## C
* short int arg2argv(char* args, char* argv[])
* ## ASM
* `>PUSHW args`
* `>PUSHW argv`
* `>LIBC Arg2ArgV`
* ## RETURN VALUE
* A = Arg count
*\--------------------------------------
*K.Arg2ArgV		ldy #2					get args
*				jsr RAMSW.StkY2PathBuf
*
*				ldy #0					get target argv[]
*				jsr RAMSW.StkY2FORPNT
*
*				jsr STDLIB.Expand
*				bcs .9
*
*				jsr ARG.Args2ArgV
*
*				lda FORPNT+1
*				bne .1
*
*				>LDYAI 256
*				jsr K.Malloc
*				bcs .9
*
*				>STYA FORPNT
*
*.1				ldy #$FF				copy ARGV to target buffer
*
*				ldx #0					Arg Count
*
*				sta IO.SETWRITEAUX
*
*.2				iny
*				lda K.PathBuf,y
*				sta (FORPNT),y
*				bne .2
*
*				inx
*
*				iny
*				lda K.PathBuf,y
*				sta (FORPNT),y
*				bne .2
*
*				sta IO.CLRWRITEAUX
*
*				txa
*				clc
*.9				rts
*--------------------------------------
ARG.Args2ArgV	ldx #$ff
				ldy #0

				stz ENV.bNoExp			bInQuote

.1				inx
				lda K.PathBuf,x
				beq .8

				cmp #C.SPACE
				beq .1					skip leading spaces

.2				cmp #'"'				found a quote ?
				bne .3

				lda ENV.bNoExp
				eor #$ff
				sta ENV.bNoExp
				bra .7					skip quote and check next char

.3				cmp #C.SPACE
				bne .6					regular char ...store...

				lda ENV.bNoExp
				bmi .4					between quotes... store space...

				lda #0					set this token End
				sta K.PathBuf,y
				iny
				bra .1

.4				lda #C.SPACE

.6				sta K.PathBuf,y
				iny

.7				inx
				lda K.PathBuf,x
				bne .2

.8				sta K.PathBuf,y			set Argv[x] Ending 0
				iny
				sta K.PathBuf,y			set Array Ending 0

				rts
*--------------------------------------
ARG.ArgV2Args	ldx #0

				ldy #$ff

.1				stz ENV.bNoExp			bInQuote

				phy

				iny
				jsr RAMSW.xTXTPTRgY
				bne .20

				ply

				stz K.PathBuf,x

				rts

.2				iny
				jsr RAMSW.xTXTPTRgY
				beq .3

.20				cmp #C.SPACE
				bne .2

				ror ENV.bNoExp
				bra .2

.3				txa
				beq .4

				lda #C.SPACE
				sta K.PathBuf,x
				inx

.4				bit ENV.bNoExp
				beq .5

				lda #'"'
				sta K.PathBuf,x
				inx

.5				ply

.6				iny
				jsr RAMSW.xTXTPTRgY
				beq .7

				sta K.PathBuf,x
				inx
				bra .6

.7				bit ENV.bNoExp
				beq .1

				lda #'"'
				sta K.PathBuf,x
				inx
				bra .1
*--------------------------------------
ARG.MakeArgV	ldy #0

				ldx #$ff

.1				inx
				iny
				lda K.PathBuf,x
				bne .1

				inx
				iny
				lda K.PathBuf,x
				bne .1

				jsr K.Malloc			Y,A = Total ARGV size
				bcs .9

				>STYA ZPPtr1

				ldy #$FF				copy ARGV to target buffer

				ldx #0					Arg Count

				sta IO.SETWRITEAUX

.2				iny
				lda K.PathBuf,y
				sta (ZPPtr1),y
				bne .2

				inx

				iny
				lda K.PathBuf,y
				sta (ZPPtr1),y
				bne .2

				sta IO.CLRWRITEAUX

				>LDYA ZPPtr1

*				clc

.9				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.arg
LOAD usr/src/sys/kernel.s
ASM
