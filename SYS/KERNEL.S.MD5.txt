NEW
  AUTO 3,1
*--------------------------------------
				.DUMMY					ZPTMP,6
				.OR ZPTMP				29 bytes
ZPDataLen		.BS 2
ZPChunkLen		.BS 2
				.ED
*--------------------------------------
				.DUMMY
				.OR K.S.STAT
MD5.A			.BS 4					Chunk Level,A,B,C,D
MD5.B			.BS 4
MD5.C			.BS 4
MD5.D			.BS 4

MD5.F1			.BS 4
MD5.F2			.BS 4

MD5.DTemp		.BS 4
MD5.F			.BS 4
MD5.i			.BS 1
				.ED
*--------------------------------------
* DWORD Macros : Do NOT disturb carry with cpx, cpy...
*--------------------------------------
				.MA	ADC32
				ldx #3
				ldy #0
				clc
:1				lda ]1,y
				adc ]2,y
				sta ]3,y
				iny
				dex
				bpl :1
				.EM
*--------------------------------------
				.MA	AND32
				ldx #3
:1				lda ]1,x
				and ]2,x
				sta ]3,x
				dex
				bpl :1
				.EM
*--------------------------------------
				.MA	ORA32
				ldx #3
:1				lda ]1,x
				ora ]2,x
				sta ]3,x
				dex
				bpl :1
				.EM
*--------------------------------------
				.MA	EOR32
				ldx #3
:1				lda ]1,x
				eor ]2,x
				sta ]3,x
				dex
				bpl :1
				.EM
*--------------------------------------
				.MA	NOT32
				ldx #3
:1				lda ]1,x
				eor #$FF
				sta ]2,x
				dex
				bpl :1
				.EM
*--------------------------------------
				.MA	MOV32
				ldx #3
:1				lda ]1,x
				sta ]2,x
				dex
				bpl :1
				.EM
*--------------------------------------
				.MA	ROL32x
:2				lda ]1+3
				rol
				rol ]1
				rol ]1+1
				rol ]1+2
				rol ]1+3
				dex
				bne :2
				.EM
*/--------------------------------------
* ## MD5
* Return MD5 Hash for input String
* # C
* `void md5 (const char* str, char* digest);`
* # ASM
* `>PUSHW str`
* `>PUSHW digest`
* `>LIBC md5`
* ## RETURN VALUE
* CC
*\--------------------------------------
K.MD5			ldy #2					str
				jsr RAMSW.StkY2TXTPTR
				ldy #0
				jsr RAMSW.StkY2FORPNT	digest

				ldy #$ff

.1				iny
				jsr RAMSW.xTXTPTRgY
				bne .1

				sty ZPDataLen
				stz ZPDataLen+1

				jsr K.MD5Init
				bcs .9

				pha						save MD5 Context hMem

				jsr MD5.Update

				jmp MD5.Finalize
				
.9				rts				
*/--------------------------------------
* ## MD5Init
* Initialize a MD5 computation
* # C
* `void *md5init();`
* # ASM
* `>LIBC MD5Init`
* ## RETURN VALUE
* Y,A = pMD5
*\--------------------------------------
K.MD5Init		>LDYAI S.MD5
				jsr K.Malloc
				bcs MD5.RTS

				>STYA ZPPtr3

				ldy #0

				sta IO.SETWRITEAUX

.1				lda MD5.ABCDINIT,y
				sta (ZPPtr3),y
				iny
				cpy #S.MD5.BITCOUNT
				bne .1

				lda #0

.2				sta (ZPPtr3),y
				iny
				cpy #S.MD5
				bne .2

				sta IO.CLRWRITEAUX

				>LDYA ZPPtr3

				clc

MD5.RTS			rts
*/--------------------------------------
* ## MD5Update
* Add Data to MD5 computation
* # C
* `void md5update (void *md5, char *data, int len);`
* # ASM
* `>PUSHW md5`
* `>PUSHW data`
* `>PUSHW len`
* `>LIBC MD5Update`
* ## RETURN VALUE
*\--------------------------------------
K.MD5Update		ldy #4					md5
				jsr RAMSW.GetStkYW
				>STYA ZPPtr3

				ldy #2					data
				jsr RAMSW.StkY2TXTPTR

				ldy #0					len
				jsr RAMSW.StkY2FORPNT

				>LDYA FORPNT
				>STYA ZPDataLen

MD5.Update		ldy #S.MD5.FINALIZED
				jsr RAMSW.xP3gY
				sec
				bne MD5.RTS

.1				lda ZPDataLen+1			More than 256 Bytes remaining to hash ?
				bne .3					yes

				lda ZPDataLen
				clc
				beq MD5.RTS				Len = O, all data processed

				cmp #64					More than 64 Bytes remaining to hash ?
				bcc .50					yes

.3				lda #64
.50				sta ZPChunkLen			Save Chunk Len

				jsr MD5.UpdBC

				ldy #0

.51				jsr RAMSW.xTXTPTRgY		Load Buffer with data
				sta K.S.STAT,y
				iny
				cpy ZPChunkLen
				bne .51

				cpy #64					Full 64 Bytes DATA ?
				beq .58

* Append "$80" & Padding & original size

				lda #$80				no, Append $80
				sta K.S.STAT,y
				lda #0
.52				iny						Pad with 0 to 64
				cpy #64
				beq .53

				sta K.S.STAT,y
				bra .52

.53				ldy #S.MD5.EXTRABIT		Mark MD5 Context as Appended
				lda #$80
				sta IO.SETWRITEAUX
				sta (ZPPtr3),y
				sta IO.CLRWRITEAUX
				lda ZPChunkLen
				cmp #56					Enough room for BITCOUNT ?
				bcs .58					no

				jsr MD5.AppBC

.58				jsr MD5.Transform
				jsr MD5.UpdateABCD0

.8				lda ZPDataLen			Substract Bytes processed from LEN
				sec
				sbc ZPChunkLen			get back chunk Len
				sta ZPDataLen
				bcs .81

				dec ZPDataLen+1

.81				lda TXTPTR				Add Bytes processed to DATA
				clc
				adc ZPChunkLen
				sta TXTPTR
				bcc .1

				inc TXTPTR+1
				bra .1
*/--------------------------------------
* ## MD5Finalize
* # C
* `void md5finalize (void *md5, char* digest);`
* # ASM
* `>PUSHW md5`
* `>PUSHW digest`
* `>LIBC MD5Finalize`
* ## RETURN VALUE
*\--------------------------------------
K.MD5Finalize	ldy #2					md5
				jsr RAMSW.GetStkYW
				>STYA ZPPtr3

				ldy #0					digest
				jsr RAMSW.StkY2FORPNT

MD5.Finalize	ldy #S.MD5.FINALIZED

				jsr RAMSW.xP3gY
				bne .1

				jsr MD5.ExtraChunk

.1				ldy #S.MD5.A0

.2				jsr RAMSW.xP3gY
				lsr
				lsr
				lsr
				lsr
				tax
				lda MD5.DIGITS,x
				jsr SHARED.xFORPNTpn

				jsr RAMSW.xP3gY
				and #$0F
				tax
				lda MD5.DIGITS,x
				jsr SHARED.xFORPNTpn

				iny
				cpy #S.MD5.A0+16
				bne .2

				lda #0
				jsr SHARED.xFORPNTpn

				>LDYA ZPPtr3
				jmp K.Free
*--------------------------------------
*			PRIVATE
*--------------------------------------
* MD5AppendBitCount
*  In :
*   ZPPtr3 = MD5 Context
*--------------------------------------
MD5.AppBC		ldx #56
				ldy #S.MD5.BITCOUNT		Append 8 Bytes of BITCOUNT

.1				jsr RAMSW.xP3gY
				sta K.S.STAT,x
				inx
				iny
				cpy #S.MD5.BITCOUNT+8
				bne .1

				ldy #S.MD5.FINALIZED	Mark MD5 Context as Finalized
				lda #$80
				sta (ZPPtr3),y
				rts
*--------------------------------------
* MD5UpdateBitCount
*  In :
*   CL = Size (in bytes) to add to MD5 context
*   ZPPtr3 = MD5 Context
*--------------------------------------
MD5.UpdBC		stz ZPChunkLen+1
				lda ZPChunkLen
				asl
				rol ZPChunkLen+1
				asl						times 8 to get bit count
				rol ZPChunkLen+1
				asl
				rol ZPChunkLen+1
				clc
				ldy #S.MD5.BITCOUNT
				adc (ZPPtr3),y
				sta (ZPPtr3),y
				iny
				lda ZPChunkLen+1
				adc (ZPPtr3),y
				sta (ZPPtr3),y
				bcc .8

.1				iny
				lda (ZPPtr3),y
				inc
				sta (ZPPtr3),y
				bne .8

				cpy #7
				bne .1

.8				rts
*--------------------------------------
* MD5ExtraChunk
*  In :
*   ZPPtr3 = MD5 Context
*--------------------------------------
MD5.ExtraChunk	ldy #S.MD5.FINALIZED
				lda #$80
				sta (ZPPtr3),y			Mark MD5 Context as "finalized"
				ldx #0
				ldy #S.MD5.EXTRABIT		Extra Bit already appended ?
				jsr RAMSW.xP3gY
				bne .1

				lda #$80
				sta K.S.STAT				Add extra bit to buffer
				sta (ZPPtr3),y			Mark Extrabit added
				inx

.1				stz K.S.STAT,x			pad with "0"...
				inx
				cpx #56
				bne .1					...until room for bitcount

				jsr MD5.AppBC
				jsr MD5.Transform
*--------------------------------------
* MD5UpdateABCD0
*  In:
*   ZPPtr3 = MD5 Context
*--------------------------------------
MD5.UpdateABCD0	ldy #0

.1				clc						ADC32 A+A0->A0, B, C, D....

.2				lda MD5.A,y
				adc (ZPPtr3),y
				sta (ZPPtr3),y
				iny
				tya
				and #3
				bne .2

				cpy #16
				bne .1

				rts
*--------------------------------------
* MD5Transform
*  In:
*   ZPPtr3 = MD5 Context
*   512 Bits Padded chunk in K.S.STAT
*  Out:
*   Updated MD5.ABCD
*--------------------------------------
MD5.Transform	ldy #15					init ABCD Chunk with Context ABCD0

.1				lda (ZPPtr3),y
				sta MD5.A,y
				dey
				bpl .1

				stz MD5.i				Start Proceed 0 to 63 bytes
				lda #0					lda MD5.i

.2				lsr
				lsr
				lsr
				and #6
				tax

				jsr MD5.XXXX

				inc MD5.i
				lda MD5.i
				cmp #64
				bne .2

				rts
*--------------------------------------
MD5.XXXX		jmp (.1,x)

.1				.DA MD5.0015
				.DA MD5.1631
				.DA MD5.3247
				.DA MD5.4863
*--------------------------------------
MD5.0015		>AND32 MD5.B,MD5.C,MD5.F1
				>NOT32 MD5.B,MD5.F2
				>AND32 MD5.F2,MD5.D,MD5.F2
				>ORA32 MD5.F1,MD5.F2,MD5.F
				jmp MD5.XXXX.END
*--------------------------------------
MD5.1631		>AND32 MD5.D,MD5.B,MD5.F1
				>NOT32 MD5.D,MD5.F2
				>AND32 MD5.F2,MD5.C,MD5.F2
				>ORA32 MD5.F1,MD5.F2,MD5.F
				bra MD5.XXXX.END
*--------------------------------------
MD5.3247		>EOR32 MD5.B,MD5.C,MD5.F
				>EOR32 MD5.F,MD5.D,MD5.F
				bra MD5.XXXX.END
*--------------------------------------
MD5.4863		>NOT32 MD5.D,MD5.F1
				>ORA32 MD5.F1,MD5.B,MD5.F2
				>EOR32 MD5.F2,MD5.C,MD5.F
*--------------------------------------
MD5.XXXX.END	>MOV32 MD5.D,MD5.DTemp
				>MOV32 MD5.C,MD5.D
				>MOV32 MD5.B,MD5.C
				>ADC32 MD5.A,MD5.F,MD5.F
				lda MD5.i
				asl
				asl
				tay
				ldx #0
				clc

.1				lda MD5.K,y 			ADC32 MD5.K[i],MD5.F,MD5.F
				adc MD5.F,x
				sta MD5.F,x
				iny
				inx
				txa
				eor #4					DO NOT DISTURB carry with cpx !!!
				bne .1

				ldy MD5.i
				lda MD5.g,y
				asl
				asl
				tay
				ldx #0
				clc
.2				lda K.S.STAT,y			ADC32 M[g],MD5.F,MD5.F
				adc MD5.F,x
				sta MD5.F,x
				iny
				inx
				txa
				eor #4					DO NOT DISTURB carry with cpx !!!
				bne .2

				ldy MD5.i
				ldx MD5.s,y				get s[i] in x

				>ROL32x MD5.F
				>ADC32 MD5.B,MD5.F,MD5.B
				>MOV32 MD5.DTemp,MD5.A
				rts
*--------------------------------------
MD5.ABCDINIT	.HS 01234567.89ABCDEF.FEDCBA98.76543210
*--------------------------------------
MD5.s			.DA #7,#12,#17,#22,#7,#12,#17,#22,#7,#12,#17,#22,#7,#12,#17,#22
				.DA #5,#9,#14,#20,#5,#9,#14,#20,#5,#9,#14,#20,#5,#9,#14,#20
				.DA #4,#11,#16,#23,#4,#11,#16,#23,#4,#11,#16,#23,#4,#11,#16,#23
				.DA #6,#10,#15,#21,#6,#10,#15,#21,#6,#10,#15,#21,#6,#10,#15,#21
*--------------------------------------
MD5.g			.DA #0,#1,#2,#3,#4,#5,#6,#7,#8,#9,#10,#11,#12,#13,#14,#15
				.DA #1,#6,#11,#0,#5,#10,#15,#4,#9,#14,#3,#8,#13,#2,#7,#12
				.DA #5,#8,#11,#14,#1,#4,#7,#10,#13,#0,#3,#6,#9,#12,#15,#2
				.DA #0,#7,#14,#5,#12,#3,#10,#1,#8,#15,#6,#13,#4,#11,#2,#9
*--------------------------------------
MD5.K			.HS 78A46AD7.56B7C7E8.DB702024.EECEBDC1
				.HS AF0F7CF5.2AC68747.134630A8.019546FD
				.HS D8988069.AFF7448B.B15BFFFF.BED75C89
				.HS 2211906B.937198FD.8E4379A6.2108B449
				.HS 62251EF6.40B340C0.515A5E26.AAC7B6E9
				.HS 5D102FD6.53144402.81E6A1D8.C8FBD3E7
				.HS E6CDE121.D60737C3.870DD5F4.ED145A45
				.HS 05E9E3A9.F8A3EFFC.D9026F67.8A4C2A8D
				.HS 4239FAFF.81F67187.22619D6D.0C38E5FD
				.HS 44EABEA4.A9CFDE4B.604BBBF6.70BCBFBE
				.HS C67E9B28.FA27A1EA.8530EFD4.051D8804
				.HS 39D0D4D9.E599DBE6.F87CA21F.6556ACC4
				.HS 442229F4.97FF2A43.A72394AB.39A093FC
				.HS C3595B65.92CC0C8F.7DF4EFFF.D15D8485
				.HS 4F7EA86F.E0E62CFE.144301A3.A111084E
				.HS 827E53F7.35F23ABD.BBD2D72A.91D386EB
*--------------------------------------
MD5.DIGITS		.AS "0123456789abcdef"
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.md5
LOAD usr/src/sys/kernel.s
ASM
