NEW
  AUTO 3,1
*/--------------------------------------
* # lrintf
* Return float rounded into a long
* ## C
* `#include <math.h>`
* `long int lrintf (float x);`
* ## ASM
* `>SL`
* `>SS`
* `>PUSHF x`
* `>LIBC lrintf`
* `>SR`
* ## RETURN VALUE
*  On stack (long)
*\--------------------------------------
K.lrintf		jsr RAMSW.pStack2FAC
				
				bit	IO.RROMWRAMBNK2

				jsr $EBF2				QINT

				bit IO.RRAMWRAMBNK2

				sta IO.SETWRITEAUX

				ldy #3

.1				lda FAC+1,y
				sta (pBase),y
				dey
				bpl .1

				sta IO.CLRWRITEAUX

				rts
*/--------------------------------------
* # Logf,sqrtf,Expf,Cosf,Sinf,Tanf,ATanf
* Return Log(x), Sqr(x), E^X, Cos(x), Sin(X), Tan(x), ATan(x)
* ## C
* `#include <math.h>`
* `float logf ( float x);`
* `float sqrtf ( float x);`
* `float expf ( float x);`
* `float cosf ( float x);`
* `float sinf ( float x);`
* `float tanf ( float x);`
* `float atanf ( float x);`
* ## ASM
* `>SF`
* `>SS`
* `>PUSHF x (Float)`
* `>LIBC logf`
* `>SR`
* ## RETURN VALUE
*  On stack (Float)
*\--------------------------------------
K.MathX			jsr RAMSW.pStack2FAC
				
				bit	IO.RROMWRAMBNK2
				
				jsr .1
				
				bit IO.RRAMWRAMBNK2
				
				ldy #5
				jmp MF.FAC2pStackY
				
.1				jmp (.2-_LogF,x)
				
.2				.DA $E941				LOG
				.DA $EE8D				SQR
				.DA $EF09				EXP
				.DA $EFEA				COS
				.DA $EFF1				SIN
				.DA $F03A				TAN
				.DA $F09E				ATN
*/--------------------------------------
* # powf
* Return the value of x raised to the power y
* ## C
* `#include <math.h>`
* `float powf(float x, float y);`
* ## ASM
* `>SF`
* `>SS`
* `>PUSHF x`
* `>PUSHF y`
* `>LIBC powf`
* `>SR`
* ## RETURN VALUE
*  On stack (float)
*\--------------------------------------
K.PowF			jsr RAMSW.pStack2FAC
				
				lda pStack
				clc
				adc #5
				ldy pStack+1
				jsr RAMSW.AY2ARG

				bit	IO.RROMWRAMBNK2

				lda FAC
				jsr $EE97				FPWRT
				
				bit IO.RRAMWRAMBNK2
				
				ldy #10
				jmp MF.FAC2pStackY
*--------------------------------------
MATH.A2STR10NP	ldx #3					3 digit max
				ldy #0					Disable Padding

MATH.A2STR10	jsr M32.A2ACC32
				clc						unsigned
*--------------------------------------
* CS = signed long
* CC = unsigned long
* X  = Pad Len
* Y  = Pad Char
*--------------------------------------
MATH.ACC322STR10
				stx .5+1				Pad Len
				sty .81+1				Pad Char

				stz FOUTBuf-1
				bcc .1

				clc
				lda ACC32+3
				bpl .1

				jsr M32.nACC

				sec
.1				ror ACC32.Sign			Save sign

				ldx #4

.2				stz RESULT,x			Clear all 5 bytes
				dex
				bpl .2

				sed						switch to BCD mode

				ldx #32					let's roll 32 bits

.3				jsr MATH.ACC32x2

				ldy #4

.4				lda RESULT,y
				adc RESULT,y
				sta RESULT,y
				dey
				bpl .4

				dex
				bne .3

				cld

				ldx .5+1				no padding
				beq .6

				lda #10					starts at 10-padlen
				sec

.5				sbc #$ff				SELF MODIFIED
				tax

.6				txa
				lsr
				tay
				lda RESULT,y
				bcs .7

				lsr
				lsr
				lsr
				lsr

.7				and #$0F
				ora #$30

				cmp #'0'
				beq .80

				ldy #'0'				next 0s always printed
				sty .81+1
				bra .82

.80				cpx #9					last char, print always
				beq .82

.81				lda #$ff				SELF MODIFIED	Get Padding char
				beq .87

.82				bit ACC32.Sign			"-" to print ?
				bpl .86

				pha
				lda #'-'
				jsr .88
				stz ACC32.Sign
				pla

.86				jsr .88
.87				inx
				cpx #10
				bne .6

				lda #0

.88				ldy FOUTBuf-1
				inc FOUTBuf-1
				sta FOUTBuf,y
				rts
*--------------------------------------
* Convert Hex int at ZPPtr2 to ACC32
*--------------------------------------
MATH.Hex2ACC32	lda (ZPPtr2)
				beq .9

				jsr .80
				bcs .9

				jsr M32.A2ACC32

				ldy #0

.1				iny
				lda (ZPPtr2),y
				beq .8

				jsr .80
				bcs .8

				pha
				ldx #4

.2				jsr MATH.ACC32x2
				dex
				bne .2

				pla
				ora ACC32
				sta ACC32
				bra .1

.8				clc
				rts

.9				sec
.99				rts
*--------------------------------------
.80				jsr ZP.IsDigit
				bcc .88

				cmp #'A'
				bcc .9

				cmp #'F'+1
				bcc .81

				cmp #'a'
				bcc .9

				cmp #'f'+1
				bcs .99

				eor #$20
.81
*				clc
				sbc #'A'-11			cc so A->10 (11-CC)
				clc
.88				and #$0F
				rts
**--------------------------------------
* Convert Decimal int at ZPPtr2 to ACC32
*--------------------------------------
MATH.Dec2ACC32	jsr M32.ACC32Z

				ldy #$ff

.1				iny
				lda (ZPPtr2),y
				beq .8

				jsr ZP.IsDigit
				bcs .8

				jsr MATH.ACC32x10
				bcs .9

				lda (ZPPtr2),y
				and #$0F

*				clc
				jsr MATH.ACC32AddA
				bcc .1

.9				lda #E.INUM
				sec
				rts

.8				tya						no digit parsed...error
				beq .9

				clc
				rts
*--------------------------------------
* Convert Decimal int at ZPPtr2 to ACC32
*--------------------------------------
MATH.xDec2ACC32	>STYA ZPPtr2

				jsr M32.ACC32Z

				stz .80+1				sign

				ldy #0

				jsr RAMSW.xP2gY

				eor #'-'
				bne .1

				dec .80+1				set pos/neg flag

				iny						skip '-'

.1				jsr RAMSW.xP2gY
				beq .8

				jsr ZP.IsDigit
				bcs .8

				jsr MATH.ACC32x10
				bcs .9

				jsr RAMSW.xP2gY

				iny

				and #$0F

*				clc
				jsr MATH.ACC32AddA
				bcc .1

.9				lda #E.INUM
				sec
				rts

.8				tya
				clc
				adc ZPPtr2
				sta ZPPtr2
				bcc .80
				
				inc ZPPtr2+1

.80				lda #$FF				SELF MODIFIED
				bpl .88

				jmp M32.nACC

.88				clc
				rts
*--------------------------------------
MATH.ACC32AddA	adc ACC32
				sta ACC32
				bcc .9

				inc ACC32+1
				bne .8

				inc ACC32+2
				bne .8

				inc ACC32+3
				beq .9					if 0, overflow!!!

.8				clc
.9				rts
*--------------------------------------
MATH.ACC32x10	ldx #3

.1				lda ACC32,x				save ACC32 for 4+1
				pha
				dex
				bpl .1

				jsr MATH.ACC32x2		ACC32 * 2 -> ACC32
				jsr MATH.ACC32x2		ACC32 * 4 -> ACC32

				ldx #0

*				clc

.2				pla						ACC32 * 4 + ACC32 -> ACC32
				adc ACC32,x
				sta ACC32,x
				inx
				txa
				eor #4
				bne .2

MATH.ACC32x2	asl ACC32
				rol ACC32+1
				rol ACC32+2
				rol ACC32+3
				rts
*--------------------------------------
MAN
SAVE usr/src/sys/kernel.s.math
LOAD usr/src/sys/kernel.s
ASM
